namespace = mem_surveyor

#####################################################################################################################
#    Surveyor Probe     #
#   By ViolentBeetle    # <- i am going to hunt you down for not making an overview at the top - tree
#####################################################################################################################
# Base events 
#####################################################################################################################
# mem_surveyor.1	|	Initial issuing of orders. Don't feel safe enough to put it into initializer
# mem_surveyor.2	|	Fleet arrives in a system and consider what to do next
# mem_surveyor.3	|	Country event: Enigmatic spacefarers
# mem_surveyor.4	|	Probe makes contact
# mem_surveyor.5	|	Probe greetings
# mem_surveyor.6	|	Flag about attacking probe
# mem_surveyor.7	|	Country witnesses probe jumping away
# mem_surveyor.8	|	Surveyor probe is dead
# mem_surveyor.9	|	Player is notified someone killed the probe
# mem_surveyor.10	|	Player killed the probe
# mem_surveyor.11	|	Empire enters a curio system for the first time
#####################################################################################################################
# Diplomacy with friendly probe
#####################################################################################################################
# mem_surveyor.100	|	Custom diplomacy with surveyor probe opens mem_surveyor.120
# mem_surveyor.101	|	Attempting diplo after attacking peaceful probe
# mem_surveyor.102	|	Country event selecting viable mission
# mem_surveyor.103	|	Sending request for computation
# mem_surveyor.104	|	Sending request for raw resources
# mem_surveyor.105	|	Ask to use a planet as amplifier
# mem_surveyor.106	|	Ask to scan a planet
# mem_surveyor.107	|	Ask to perform a project on capital
# mem_surveyor.108	|	Scan is complete
# mem_surveyor.109	|	Calculation is complete
# mem_surveyor.110	|	Country event to determine which reward does the player get
# mem_surveyor.111	|	Giving survey data
# mem_surveyor.112	|	Give contact
# mem_surveyor.113	|	Probe dispenses science
# mem_surveyor.114	|	Probe gives tech
# mem_surveyor.115	|	Probe gives away modifier
# mem_surveyor.116	|	Probe gives away deposit
# mem_surveyor.120	|	Custom diplomacy mainmenu
# mem_surveyor.121	|	Custom diplomacy submenu - Talk about Probe
# mem_surveyor.122	|	Custom diplomacy submenu - Earn Trust
# mem_surveyor.123	|	Custom diplomacy submenu - Galactic Curiosities
# mem_surveyor.124	|	Survey Reevaluation
# mem_surveyor.125	|	Renew Survey Buff
# mem_surveyor.126	|	Renew Survey Reevaluation
# mem_surveyor.127	|	Custom diplomacy submenu - WPDR Info
#####################################################################################################################
# Probe flips to Berserker
#####################################################################################################################
# mem_surveyor.200	|	Midgame start - decide if flippage should occur (Can also be rewritten to trigger event)
# mem_surveyor.201	|	Probe decides to flip
# mem_surveyor.202	|	Diplomatic event to notify player
# mem_surveyor.203	|	Custom diplomacy with the berserker
# mem_surveyor.204	|	Berserker Probe first contact? Seems unlikely to not have seen it before it goes berserk
# mem_surveyor.210	|	Probe decision making - main cycle
# mem_surveyor.211	|	Player is informed about invasion
# mem_surveyor.216	|	OLD	Reinforcement event - disabled - Don't we need reinforcements?
# mem_surveyor.217	|	Planet constructs outpost after conquest
# mem_surveyor.218	|	Planet constructs defensive fleets
# mem_surveyor.219	|	Planet constructs defensive fleets
# mem_surveyor.220	|	Player is notified of Probe stoppinge offensive
# mem_surveyor.221	|	Probe completely loses control
# mem_surveyor.222	|	Player is notified of Freebotomites being born
# mem_surveyor.223	|	Increase probe attrition yearly
# mem_surveyor.230	|	Berserker probe is killed
# mem_surveyor.231	|	Inform player of probe being destroyed + robotomites
# mem_surveyor.232	|	Inform player of probe being destroyed
# mem_surveyor.233	|	You have killed berserker probe
# mem_surveyor.234	|	Pop event to try and escape
# mem_surveyor.235	|	Refugees arrive
# mem_surveyor.240	|	Marauders receive event to spawn probe hunters
# mem_surveyor.241	|	Establishing contact with the avengers
# mem_surveyor.242	|	Diplomatic event from the avengers
# mem_surveyor.243	|	Custom diplomacy with the avengers
# mem_surveyor.244	|	The avengers fleet is defeated
# mem_surveyor.245	|	Inform player that avengers are killed by 3rd party
# mem_surveyor.246	|	Inform player that avengers are killed by the Aux Probe Fleet
# mem_surveyor.247	|	Inform player that avengers are killed by the probe itself
# mem_surveyor.248	|	Disband avengers
# mem_surveyor.249	|	Inform player that avengers disbanded
# mem_surveyor.250	|	Player destroyed avengers
# mem_surveyor.251	|	Player enters combat with the avengers
# mem_surveyor.252	|	Unable to contact avengers
# mem_surveyor.253	|	Somehow, avengers leader dies
# mem_surveyor.254	|	Disband avengers fleet when leader dies
# mem_surveyor.255	|	Inform player that avengers disbanded after leader's death
# mem_surveyor.256	|	Country spots avengers they know nothing about
# mem_surveyor.257	|	Avengers bounce back to player
# mem_surveyor.258	|	Contact with avengers
# mem_surveyor.260	|	Curators pop up offering data
# mem_surveyor.261	|	When enclave is destroyed by the probe, trigger Titanic Effort
# mem_surveyor.262	|	Titanic Effort
# mem_surveyor.263	|	Player is notified about titanic effort
# mem_surveyor.264	|	Custom diplomacy with Titan
# mem_surveyor.265	|	Mercs are killed
# mem_surveyor.266	|	Inform player that mercs are killed by 3rd party
# mem_surveyor.267	|	Inform player that mercs are killed by the Aux Probe Fleet
# mem_surveyor.268	|	Inform player that mercs are killed by the probe itself
# mem_surveyor.269	|	Disband titan
# mem_surveyor.270	|	Player is notified titan was disbanded
# mem_surveyor.271	|	Player destroyed mercs
# mem_surveyor.272	|	Quietly replace titan's captain if he dies
# mem_surveyor.273	|	Can't communicate with them
#####################################################################################################################
# ALKREE HOMEWORLD
#####################################################################################################################
# mem_surveyor.300	|	Anomaly resolution
# mem_surveyor.301	|	Bounce off planet to give player valuable info
# mem_surveyor.302	|	Receive country event telling story
# mem_surveyor.303	|	Country cross-references surveyor with the ruins
# mem_surveyor.400	|	Personality matrix activation effect
# mem_surveyor.500	|	Origin Event
#####################################################################################################################
# First Contact
#####################################################################################################################
# mem_surveyor.600	|	First contact I guess?
# mem_surveyor.601	|	The stage?
# mem_surveyor.602	|	Contact established
#####################################################################################################################
# Probe flips to Sentinel
#####################################################################################################################
# mem_surveyor.1001	|	Probe decides to flip but good
# mem_surveyor.1005	|	Notify player 
# mem_surveyor.1010	|	Setup probe country and destroy old event country
# mem_surveyor.1015	|	Diplomatic event to notify player, probe returned
# mem_surveyor.1020	|	Origin player makes decision


country_event = {
	id = mem_surveyor.9999
	hide_window = yes
	is_triggered_only = yes
	trigger = {
	}
	immediate = {
		random_country = {
			limit = {
				has_country_flag = mem_surveyor_country
			}
			if = {
				limit = {
					exists = event_target:amoeba_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:amoeba_country
				}
			}
			if = {
				limit = {
					exists = event_target:amoeba_garrison_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:amoeba_garrison_country
				}
			}
			if = {
				limit = {
					exists = event_target:pirate_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:pirate_country
				}
			}
			if = {
				limit = {
					exists = event_target:drone_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:drone_country
				}
			}
			if = {
				limit = {
					exists = event_target:cloud_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:cloud_country
				}
			}
			if = {
				limit = {
					exists = event_target:crystal_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:crystal_country
				}
			}
		}
	}
}

country_event = {
	id = mem_surveyor.999
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_country = {
			limit = {
				is_country_type = mem_surveyor_country_green
			}
			country_event = {
				id = mem_surveyor.201
			}
		}
	}
}

country_event = {
	id = mem_surveyor.998
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_country = {
			limit = {
				is_country_type = mem_surveyor_country_green
			}
			country_event = {
				id = mem_surveyor.1010
			}
		}
	}
}

###################
### Base events ###
###################
#Initial issuing of orders. Don't feel safe enough to put it into initializer
event = {
	id = mem_surveyor.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = mem_surveyor_is_present
		# exists = event_target:mem_surveyor_fleet
	}
	immediate = {
		random_country = {
			limit = {
				has_country_flag = mem_surveyor_country
			}
			random_owned_fleet = {
				fleet_event = {
					id = mem_surveyor.2
				}
			}
			# this is not stable for future updates
			if = {
				limit = {
					exists = event_target:amoeba_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:amoeba_country
				}
			}
			if = {
				limit = {
					exists = event_target:amoeba_garrison_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:amoeba_garrison_country
				}
			}
			if = {
				limit = {
					exists = event_target:pirate_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:pirate_country
				}
			}
			if = {
				limit = {
					exists = event_target:drone_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:drone_country
				}
			}
			if = {
				limit = {
					exists = event_target:cloud_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:cloud_country
				}
			}
			if = {
				limit = {
					exists = event_target:crystal_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:crystal_country
				}
			}
			if = {
				limit = {
					exists = event_target:voidworms_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:voidworms_country
				}
			}
			if = {
				limit = {
					exists = event_target:wraith_country
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = event_target:wraith_country
				}
			}
		}
		# log = "Initialized"
	}
}

#Fleet arrives in a system and consider what to do next
fleet_event = {
	id = mem_surveyor.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		owner = {
			is_country_type = mem_surveyor_country_green
		}
	}
	immediate = {
		solar_system = {
			save_event_target_as = surveyor_system
			set_star_flag = mem_surveyor_visited
			remove_star_flag = mem_surveyor_next_target
			# log = "[This.GetName] visited"
			closest_system = {
				# Find the most appealing system
				limit = {
					NOR = {
						has_star_flag = mem_surveyor_visited
						has_star_flag = hostile_system
						has_star_flag = formless_system
						has_star_flag = sealed_system
						has_star_flag = lcluster
						has_star_flag = scavenger_bot_system
						has_star_flag = elderly_tiyanki_system
						any_ship_in_system = {
							exists = owner
							owner = {
								OR = {
									is_country_type = faction
									is_country_type = amoeba
									is_country_type = crystal
									is_country_type = drone
									is_country_type = cloud
									is_guardian_country = yes
									is_country_type = guardian_scavenger_bot
									is_country_type = guardian_elderly_tiyanki
									is_country_type = guardian_hatchling
									AND = {
										NOT = {
											is_country_type = default
										}
										is_hostile = root.owner
									}
								}
							}
						}
					}
					NAND = {
						exists = space_owner
						space_owner = {
							OR = {
								is_country_type = fallen_empire
								is_country_type = awakened_fallen_empire
								is_country_type = dormant_marauders
								is_country_type = awakened_marauders
								has_country_flag = mem_surveyor_attacked_surveyor
							}
						}
					}
				}
				min_steps = 1
				max_steps = 1
				set_star_flag = mem_surveyor_next_target
			}
			#Various effects go here
			IF = {
				limit = {
					exists = space_owner
					space_owner = {
						is_country_type = default
					}
				}
				mem_surveyor_try_to_communicate = yes
			}
		}
		clear_fleet_actions = this
		queue_actions = {
			find_closest_system = {
				#Try to move to targeted system
				trigger = {
					id = mem_surveyor.vanilla.1
					has_star_flag = mem_surveyor_next_target
				}
				found_system = {
					move_to = this
					wait = 1
					effect = {
						id = mem_surveyor.vanilla.2
						root = {
							fleet_event = {
								id = mem_surveyor.2
							}
						}
					}
				}
				failed = {
					#If no system is flagged, no system is valid
					wait = {
						duration = 10
					}
					find_random_system = {
						#Go somewhere
						trigger = {
							id = mem_surveyor.vanilla.3
							NOR = {
								has_star_flag = mem_surveyor_visited
								has_star_flag = hostile_system
								has_star_flag = formless_system
								has_star_flag = sealed_system
								has_star_flag = lcluster
								has_star_flag = scavenger_bot_system
								has_star_flag = elderly_tiyanki_system
								any_ship_in_system = {
									exists = owner
									owner = {
										OR = {
											is_country_type = faction
											is_country_type = amoeba
											is_country_type = crystal
											is_country_type = drone
											is_country_type = cloud
											is_guardian_country = yes
											is_country_type = guardian_scavenger_bot
											is_country_type = guardian_elderly_tiyanki
											is_country_type = guardian_hatchling
										}
									}
								}
							}
							NAND = {
								exists = space_owner
								space_owner = {
									OR = {
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
										is_country_type = dormant_marauders
										is_country_type = awakened_marauders
										has_country_flag = mem_surveyor_attacked_surveyor
									}
								}
							}
						}
						found_system = {
							effect = {
								id = mem_surveyor.vanilla.4
								# log = "Setting location to [This.GetName]"
								root = {
									solar_system = {
										IF = {
											limit = {
												exists = space_owner
											}
											space_owner = {
												random_list = {
													7 = {
														country_event = {
															id = mem_surveyor.7
														}
													}
													93 = {
													}
												}
											}
										}
									}
									set_location = prev.star
									fleet_event = {
										id = mem_surveyor.2
									}
								}
							}
						}
						failed = {
							effect = {
								id = mem_surveyor.vanilla.5
								# log = "Found nothing"
								every_system = {
									limit = {
										has_star_flag = mem_surveyor_visited
									}
									remove_star_flag = mem_surveyor_visited
								}
								every_playable_country = {
									remove_country_flag = mem_surveyor_reward_wait
									remove_country_flag = mem_surveyor_offered_quest
								}
								owner = {
									change_variable = {
										which = mem_surveyor_iteration_count
										value = 1
									}
								}
								# log = "Rebooting the cycle: [This.mem_surveyor_iteration_count]" 
								fleet_event = {
									id = mem_surveyor.2
								}
							}
						}
					}
				}
			}
		}
	}
}

#Country event: Enigmatic spacefarers
country_event = {
	id = mem_surveyor.3
	title = mem_surveyor.3.name
	desc = mem_surveyor.3.desc
	is_triggered_only = yes
	trigger = {
		# # log = "Trying to initiate first contact. [From.GetName]"
		FROM = {
			is_country_type = mem_surveyor_country_green
		}
		NOT = {
			has_country_flag = mem_surveyor_spotted_probe
		}
		NOT = {
			has_origin = origin_mem_ceaseless_gaze
		}
	}
	picture = GFX_evt_unknown_ships
	show_sound = event_radio_chatter
	#location = FROMFROMFROM
	immediate = {
		set_country_flag = mem_surveyor_spotted_probe
		if = {
			limit = {
				exists = FROMFROMFROM
			}
			FROMFROMFROM = {
				save_event_target_as = surveyor_system
			}
		}
	}
	option = {
		name = INTERESTING
		hidden_effect = {
			country_event = {
				id = story.7
				days = 2
			}
		}
	}
}

#Probe makes contact
country_event = {
	id = mem_surveyor.4
	title = mem_surveyor.4.name
	desc = mem_surveyor.4.desc
	is_triggered_only = yes
	picture = GFX_evt_unknown_ships
	show_sound = event_radio_chatter
	location = FROM
	trigger = {
		NOT = {
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_opened_comms
		establish_communications_no_message = FROM.owner
		country_event = {
			id = mem_surveyor.303
			days = 120
			random = 180
		}
	}
	option = {
		name = ONSCREEN
		hidden_effect = {
			country_event = {
				id = mem_surveyor.5
			}
		}
	}
}

#Probe greetings
country_event = {
	id = mem_surveyor.5
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = {
		text = mem_surveyor.5.desc
		trigger = {
			NOT = {
				has_country_flag = mem_surveyor_solved_fc
			}
		}
	}
	desc = {
		text = mem_surveyor.5.desc.fc
		trigger = {
			has_country_flag = mem_surveyor_solved_fc
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	location = FROMFROM
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	option = {
		name = mem_surveyor.5.default
	}
	option = {
		name = mem_surveyor.5.ega
		trigger = {
			OR = {
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
			}
		}
	}
	option = {
		name = mem_surveyor.5.aut
		trigger = {
			OR = {
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
			}
		}
	}
	option = {
		name = mem_surveyor.5.mat
		trigger = {
			OR = {
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
			}
		}
	}
	option = {
		name = mem_surveyor.5.spi
		trigger = {
			OR = {
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
			}
		}
	}
	option = {
		name = mem_surveyor.5.pac
		trigger = {
			OR = {
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
			}
		}
	}
	option = {
		name = mem_surveyor.5.mil
		trigger = {
			OR = {
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
			}
		}
	}
	option = {
		name = mem_surveyor.5.phile
		trigger = {
			OR = {
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
	}
	option = {
		name = mem_surveyor.5.phobe
		trigger = {
			OR = {
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
	option = {
		name = mem_surveyor.5.hive
		trigger = {
			has_authority = auth_hive_mind
		}
	}
	option = {
		name = mem_surveyor.5.machine
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	option = {
		name = mem_surveyor.5.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
		}
	}
	option = {
		name = mem_surveyor.5.terminator
		exclusive_trigger = {
			has_valid_civic = civic_machine_terminator
		}
	}
	option = {
		name = mem_surveyor.5.swarm
		exclusive_trigger = {
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
}

#Flag about attacking probe
country_event = {
	id = mem_surveyor.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			OR = {
				is_country_type = mem_surveyor_country_green
				is_country_type = mem_surveyor_country_yellow
			}
		}
		NOT = {
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_attacked_surveyor
	}
}

#Country witnesses probe jumping away
country_event = {
	id = mem_surveyor.7
	title = mem_surveyor.7.name
	desc = mem_surveyor.7.desc
	picture = GFX_evt_wormhole
	show_sound = event_alien_signal
	is_triggered_only = yes
	trigger = {
		is_country_type = default
		has_communications = event_target:mem_surveyor_country
		NOR = {
			has_technology = tech_experimental_subspace_navigation
			has_tech_option = tech_experimental_subspace_navigation
		}
	}
	option = {
		name = mem_surveyor.7.a
		add_research_option = tech_experimental_subspace_navigation
	}
}

# Surveyor probe is dead
country_event = {
	id = mem_surveyor.8
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = mem_surveyor_country_green
		FROMFROM = {
			has_ship_flag = mem_surveyor_probe_ship
		}
	}
	immediate = {
		# log = "Probe killed by [From.GetName]"
		FROM = {
			save_event_target_as = probe_killers
			set_country_flag = mem_surveyor_probe_killers
			country_event = {
				id = mem_surveyor.10
			}
		}
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
				NOT = {
					is_same_value = FROM
				}
			}
			country_event = {
				id = mem_surveyor.9
			}
		}
	}
}

# Player is notified someone killed the probe
country_event = {
	id = mem_surveyor.9
	title = mem_surveyor.9.name
	desc = mem_surveyor.9.desc
	is_triggered_only = yes
	picture = GFX_evt_debris
	show_sound = event_ship_explosion
	option = {
		name = mem_surveyor.9.a
	}
}

# Player killed the probe
country_event = {
	id = mem_surveyor.10
	title = mem_surveyor.10.name
	desc = mem_surveyor.10.desc
	is_triggered_only = yes
	picture = GFX_evt_debris
	after = {
		IF = {
			limit = {
				is_country_type = default
				NOR = {
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
				}
			}
			custom_tooltip = mem_surveyor.10.tooltip.opinion_decrease
			hidden_effect = {
				every_playable_country = {
					limit = {
						has_communications = FROM
						has_communications = ROOT
					}
					add_opinion_modifier = {
						who = root
						modifier = mem_surveyor_destroyed_probe
					}
				}
			}
		}
		mem_surveyor_killing_reward = yes
	}
	option = {
		name = mem_surveyor.10.a
	}
}

# Empire enters a curio system for the first time
# Scope = Ship
# From = System
# FromFrom = Country
ship_event = {
	id = mem_surveyor.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			has_star_flag = mem_surveyor_curio
		}
	}

	immediate = {		
		from = {
			if = {
				limit = {
					NOT = {
						has_star_flag = mem_surveyor_curio_marked_@root.FromFrom
					}
				}
				set_star_flag = mem_surveyor_curio_marked_@root.FromFrom
			}
		}	
		fromfrom = {
			mem_surveyor_end_curio_chain = yes
		}
	}
}

#####################################
### Diplomacy with friendly probe ###
#####################################
# Custom diplomacy with surveyor probe
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.100
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_country_green
		}
		NOR = {
			has_country_flag = mem_surveyor_diplomacy_engaged
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		country_event = {
			id = mem_surveyor.120
		}
	}
}

# Attempting diplo after attacking peaceful probe
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.101
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.101.desc.1
	desc = mem_surveyor.101.desc.2
	desc = mem_surveyor.101.desc.3
	desc = mem_surveyor.101.desc.4
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_country_green
		}
		NOT = {
			has_country_flag = mem_surveyor_diplomacy_engaged
		}
		has_country_flag = mem_surveyor_attacked_surveyor
	}
	immediate = {
		set_country_flag = mem_surveyor_diplomacy_engaged
	}
	option = {
		name = MEM_SURVEYOR_EXIT
		default_hide_option = yes
		remove_country_flag = mem_surveyor_generic_responses
		remove_country_flag = mem_surveyor_diplomacy_engaged
	}
}

#Country event selecting viable mission
country_event = {
	id = mem_surveyor.102
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOR = {
			has_country_flag = mem_surveyor_attacked_surveyor
			has_country_flag = mem_surveyor_offered_quest
			has_country_flag = mem_surveyor_finished_quest
			has_country_flag = mem_surveyor_busy_with_project
			has_country_flag = mem_surveyor_collected_reward
		}
	}
	immediate = {
		set_timed_country_flag = {
			flag = mem_surveyor_offered_quest
			years = 2
		}
		# log = "[This.GetName] Is offered quest"
		random_list = {
			#Revise weights when all is done!!!
			3 = {
				country_event = {
					id = mem_surveyor.103
				}
			}
			#Ask to share computation
			5 = {
				country_event = {
					id = mem_surveyor.104
				}
			}
			#Ask for raw resources
			2 = {
				country_event = {
					id = mem_surveyor.105
				}
			}
			#Ask to use a planet as amplifier
			4 = {
				country_event = {
					id = mem_surveyor.106
				}
			}
			#Ask to use science ship to scan a unihabited planet
			5 = {
				country_event = {
					id = mem_surveyor.107
				}
			}
			#Ask to perform a special project on owned planet
		}
	}
}

#Sending request for computation
country_event = {
	id = mem_surveyor.103
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.103.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	option = {
		name = mem_surveyor.mission.accept
		add_modifier = {
			modifier = mem_surveyor_science_drain
			days = 360
		}
		set_country_flag = mem_surveyor_finished_quest
		set_timed_country_flag = {
			flag = mem_surveyor_reward_wait
			days = 120
		}
	}
	option = {
		name = mem_surveyor.mission.decline
		default_hide_option = yes
	}
	option = {
		name = mem_surveyor.mission.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
}

#Sending request for raw resources
country_event = {
	id = mem_surveyor.104
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.104.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	option = {
		name = mem_surveyor.mission.accept
		add_resource = {
			minerals = -500
			energy = -500
		}
		set_country_flag = mem_surveyor_finished_quest
		set_timed_country_flag = {
			flag = mem_surveyor_reward_wait
			days = 120
		}
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 500
			}
			resource_stockpile_compare = {
				resource = minerals
				value >= 500
			}
		}
	}
	option = {
		name = mem_surveyor.mission.decline
		default_hide_option = yes
	}
	option = {
		name = mem_surveyor.mission.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
}

#Ask to use a planet as amplifier
country_event = {
	id = mem_surveyor.105
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.105.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	trigger = {
		any_owned_planet = {
			is_capital = no
			NOR = {
				is_planet_class = pc_ringworld_habitable
				is_planet_class = pc_habitat
			}
		}
	}
	immediate = {
		random_owned_planet = {
			limit = {
				is_capital = no
				NOR = {
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_habitat
				}
			}
			save_event_target_as = amplifier_planet
		}
	}
	option = {
		name = mem_surveyor.mission.accept
		set_country_flag = mem_surveyor_finished_quest
		set_timed_country_flag = {
			flag = mem_surveyor_reward_wait
			days = 120
		}
		event_target:amplifier_planet = {
			add_modifier = {
				modifier = mem_surveyor_amplified
				days = 360
			}
		}
	}
	option = {
		name = mem_surveyor.mission.decline
		default_hide_option = yes
	}
	option = {
		name = mem_surveyor.mission.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
}

#Ask to scan a planet
country_event = {
	id = mem_surveyor.106
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.106.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	immediate = {
		random_planet_within_border = {
			limit = {
				OR = {
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_toxic
					is_planet_class = pc_frozen
					is_planet_class = pc_molten
					is_planet_class = pc_gas_giant
				}
			}
			save_event_target_as = scannable_planet
		}
	}
	option = {
		name = mem_surveyor.mission.accept
		set_country_flag = mem_surveyor_busy_with_project
		enable_special_project = {
			name = MEM_SURVEYOR_SCAN
			owner = root
			location = event_target:scannable_planet
		}
	}
	option = {
		name = mem_surveyor.mission.decline
		default_hide_option = yes
	}
	option = {
		name = mem_surveyor.mission.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
}

#Ask to perform a project on capital
country_event = {
	id = mem_surveyor.107
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.107.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	option = {
		name = mem_surveyor.mission.accept
		custom_tooltip = mem_surveyor.107.tooltip
		set_country_flag = mem_surveyor_busy_with_project
		hidden_effect = {
			random_list = {
				33 = {
					enable_special_project = {
						name = MEM_SURVEYOR_HELP_PHYSICS
						owner = root
						location = capital_scope
					}
				}
				33 = {
					enable_special_project = {
						name = MEM_SURVEYOR_HELP_SOCIETY
						owner = root
						location = capital_scope
					}
				}
				33 = {
					enable_special_project = {
						name = MEM_SURVEYOR_HELP_ENGINEERING
						owner = root
						location = capital_scope
					}
				}
			}
		}
	}
	option = {
		name = mem_surveyor.mission.decline
		default_hide_option = yes
	}
	option = {
		name = mem_surveyor.mission.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
}

#Scan is complete
ship_event = {
	id = mem_surveyor.108
	title = mem_surveyor.108.name
	desc = mem_surveyor.108.desc
	is_triggered_only = yes
	location = event_target:scannable_planet
	show_sound = event_scanner
	picture = GFX_evt_ship_in_orbit_2
	immediate = {
		owner = {
			remove_country_flag = mem_surveyor_busy_with_project
			set_timed_country_flag = {
				flag = mem_surveyor_reward_wait
				days = 120
			}
			set_country_flag = mem_surveyor_finished_quest
		}
	}
	option = {
		name = EXCELLENT
	}
}

#Calculation is complete
planet_event = {
	id = mem_surveyor.109
	title = mem_surveyor.109.name
	desc = mem_surveyor.109.desc
	is_triggered_only = yes
	location = ROOT
	show_sound = event_scanner
	picture = GFX_evt_physics_research
	immediate = {
		owner = {
			remove_country_flag = mem_surveyor_busy_with_project
			set_timed_country_flag = {
				flag = mem_surveyor_reward_wait
				days = 120
			}
			set_country_flag = mem_surveyor_finished_quest
		}
	}
	option = {
		name = EXCELLENT
	}
}

#Country event to determine which reward does the player get
#fired from mem_surveyor_try_to_communicate
country_event = {
	id = mem_surveyor.110
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		remove_country_flag = mem_surveyor_finished_quest
		remove_country_flag = mem_surveyor_offered_quest
		set_timed_country_flag = {
			flag = mem_surveyor_collected_reward
			days = 1800
		}
		# log = "[This.GetName] Collects Reward"
		random_list = {
			#Choosing the reward
			5 = {
				# Give survey data
				country_event = {
					id = mem_surveyor.111
				}
				modifier = {
					factor = 0
					NOT = {
						any_system = {
							has_star_flag = mem_surveyor_visited
							any_system_planet = {
								is_surveyed = {
									who = ROOT
									status = no
								}
							}
						}
					}
				}
			}
			5 = {
				# Give contacts
				country_event = {
					id = mem_surveyor.112
				}
				modifier = {
					factor = 0
					NOT = {
						any_country = {
							NOT = {
								is_same_value = root
							}
							NOT = {
								has_communications = root
							}
							OR = {
								is_country_type = default
								is_country_type = fallen_empire
								is_country_type = enclave
								is_country_type = dormant_marauders
							}
						}
					}
				}
			}
			10 = {
				# Give science
				country_event = {
					id = mem_surveyor.113
				}
			}
			3 = {
				# Give tech
				country_event = {
					id = mem_surveyor.114
				}
				modifier = {
					factor = 0
					has_technology = tech_lasers_2
					has_technology = tech_sensors_2
					has_technology = tech_wormhole_stabilization
				}
				modifier = {
					factor = 0
					check_variable = {
						which = mem_surveyor_received_techs
						value > 1
					}
				}
			}
			10 = {
				# Give navigation data, increase speed temporarility
				country_event = {
					id = mem_surveyor.115
				}
			}
			5 = {
				# Give deposit
				country_event = {
					id = mem_surveyor.116
				}
				modifier = {
					factor = 0
					NOT = {
						#I don't know how could it possibly be so
						any_planet_within_border = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_barren_cold
								is_planet_class = pc_frozen
								is_planet_class = pc_molten
								is_planet_class = pc_toxic
								is_planet_class = pc_gas_giant
							}
							is_colonizable = no
							has_deposit = no
						}
					}
				}
			}
		}
	}
}

#Giving survey data
country_event = {
	id = mem_surveyor.111
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.111.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	immediate = {
		random_system = {
			limit = {
				has_star_flag = mem_surveyor_visited
				any_system_planet = {
					is_surveyed = {
						who = ROOT
						status = no
					}
				}
			}
			every_system_planet = {
				set_surveyed = {
					surveyed = yes
					surveyor = root
				}
			}
		}
		random_list = {
			25 = {
			}
			50 = {
				random_system = {
					limit = {
						has_star_flag = mem_surveyor_visited
						any_system_planet = {
							is_surveyed = {
								who = ROOT
								status = no
							}
						}
					}
					every_system_planet = {
						set_surveyed = {
							surveyed = yes
							surveyor = root
						}
					}
				}
			}
			25 = {
				while = {
					count = 2
					random_system = {
						limit = {
							has_star_flag = mem_surveyor_visited
							any_system_planet = {
								is_surveyed = {
									who = ROOT
									status = no
								}
							}
						}
						every_system_planet = {
							set_surveyed = {
								surveyed = yes
								surveyor = root
							}
						}
					}
				}
			}
		}
	}
	option = {
		name = mem_surveyor.111.a
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}
}

#Give contact
country_event = {
	id = mem_surveyor.112
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = {
		text = mem_surveyor.112.desc.default
		trigger = {
			event_target:contact_country = {
				is_country_type = default
			}
		}
	}
	desc = {
		text = mem_surveyor.112.desc.fallen
		trigger = {
			event_target:contact_country = {
				is_country_type = fallen_empire
			}
		}
	}
	desc = {
		text = mem_surveyor.112.desc.enclave
		trigger = {
			event_target:contact_country = {
				is_country_type = enclave
			}
		}
	}
	desc = {
		text = mem_surveyor.112.desc.mara
		trigger = {
			event_target:contact_country = {
				is_country_type = dormant_marauders
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	immediate = {
		random_country = {
			limit = {
				NOT = {
					is_same_value = root
				}
				NOT = {
					has_communications = root
				}
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = enclave
					is_country_type = dormant_marauders
				}
			}
			save_event_target_as = contact_country
			establish_communications_no_message = root
		}
	}
	option = {
		name = mem_surveyor.112.a
		custom_tooltip = mem_surveyor.112.a.tooltip
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}
}

#Probe dispenses science
country_event = {
	id = mem_surveyor.113
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.113.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	option = {
		name = mem_surveyor.113.a
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier4researchreward
			min = @tier4researchmin
			max = @tier4researchmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier4researchreward
			min = @tier4researchmin
			max = @tier4researchmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier4researchreward
			min = @tier4researchmin
			max = @tier4researchmax
		}
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}
}

#Probe gives tech
country_event = {
	id = mem_surveyor.114
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.114.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	immediate = {
		change_variable = {
			which = mem_surveyor_received_techs
			value = 1
		}
	}
	option = {
		name = mem_surveyor.114.a
		locked_random_list = {
			4 = {
				give_technology = {
					tech = tech_lasers_2
				}
				modifier = {
					factor = 0
					has_technology = tech_lasers_2
				}
			}
			4 = {
				give_technology = {
					tech = tech_sensors_2
				}
				modifier = {
					factor = 0
					has_technology = tech_sensors_2
				}
			}
			1 = {
				give_technology = {
					tech = tech_wormhole_stabilization
				}
				modifier = {
					factor = 0
					has_technology = tech_wormhole_stabilization
				}
			}
		}
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}
}

#Probe gives away modifier
country_event = {
	id = mem_surveyor.115
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.115.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	option = {
		name = mem_surveyor.115.a
		add_modifier = {
			modifier = mem_surveyor_star_data
			days = 1800
		}
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}
}

#Probe gives away deposit
country_event = {
	id = mem_surveyor.116
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.116.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	immediate = {
		random_planet_within_border = {
			limit = {
				OR = {
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_frozen
					is_planet_class = pc_molten
					is_planet_class = pc_toxic
					is_planet_class = pc_gas_giant
				}
				is_colonizable = no
				has_deposit = no
			}
			save_event_target_as = target_planet
		}
	}
	option = {
		name = mem_surveyor.116.a
		event_target:target_planet = {
			locked_random_list = {
				1 = {
					add_deposit = d_energy_3
				}
				1 = {
					add_deposit = d_minerals_3
				}
				1 = {
					add_deposit = d_society_3
				}
				1 = {
					add_deposit = d_physics_3
				}
				1 = {
					add_deposit = d_engineering_3
				}
			}
		}
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}
}

# Custom diplomacy mainmenu
country_event = {
	id = mem_surveyor.120
	title = MEM_SURVEYOR_PROBE_HEADER
	#Generic greets
	desc = {
		text = mem_surveyor.120.desc.1
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.2
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.3
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.4
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.5
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.6
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.7
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.8
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.9
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.10
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	desc = {
		text = mem_surveyor.120.desc.11
		trigger = {
			has_country_flag = mem_surveyor_generic_responses
		}
	}
	#Greets when away from the player space
	desc = {
		text = mem_surveyor.120.away.1
		trigger = {
			exists = event_target:mem_surveyor_fleet.solar_system
			mem_surveyor_in_owned_space = no
		}
	}
	#Greets when in player's space
	desc = {
		text = mem_surveyor.120.here.1
		trigger = {
			exists = event_target:mem_surveyor_fleet.solar_system
			mem_surveyor_in_owned_space = yes
		}
	}
	desc = {
		text = mem_surveyor.120.here.2
		trigger = {
			exists = event_target:mem_surveyor_fleet.solar_system
			mem_surveyor_in_owned_space = yes
		}
	}
	#Greets based on ethics, governments etc
	desc = {
		text = mem_surveyor.120.mat
		trigger = {
			is_materialist = yes
		}
	}
	desc = {
		text = mem_surveyor.120.spi
		trigger = {
			is_spiritualist = yes
		}
	}
	desc = {
		text = mem_surveyor.120.machine
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	#Probe relates to its journeys
	desc = {
		text = mem_surveyor.120.journey.1
		trigger = {
			exists = event_target:next_target
		}
	}
	desc = {
		text = mem_surveyor.120.journey.2
		trigger = {
			exists = event_target:visited_system
		}
	}
	#Special origin greetings
	desc = {
		text = mem_surveyor.120.origin.1
		trigger = {
			has_origin = origin_mem_ceaseless_gaze
			NOR = {
				has_country_flag = mem_surveyor_country_green_sentinel_decision
				has_country_flag = mem_surveyor_country_green_berserker_decision
				has_country_flag = mem_surveyor_country_green_nothing_burger
			}
		}
	}
	desc = {
		text = mem_surveyor.120.origin.2
		trigger = {
			has_origin = origin_mem_ceaseless_gaze
			NOR = {
				has_country_flag = mem_surveyor_country_green_sentinel_decision
				has_country_flag = mem_surveyor_country_green_berserker_decision
				has_country_flag = mem_surveyor_country_green_nothing_burger
			}
		}
	}
	desc = {
		text = mem_surveyor.120.origin.3
		trigger = {
			has_origin = origin_mem_ceaseless_gaze
			OR = {
				has_country_flag = mem_surveyor_country_green_sentinel_decision
				has_country_flag = mem_surveyor_country_green_berserker_decision
				has_country_flag = mem_surveyor_country_green_nothing_burger
			}
		}
	}
	desc = {
		text = mem_surveyor.120.origin.4
		trigger = {
			has_origin = origin_mem_ceaseless_gaze
			OR = {
				has_country_flag = mem_surveyor_country_green_sentinel_decision
				has_country_flag = mem_surveyor_country_green_berserker_decision
				has_country_flag = mem_surveyor_country_green_nothing_burger
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	#event_message_type = ENCLAVE_DIPLOMACY
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	immediate = {
		set_country_flag = mem_surveyor_diplomacy_engaged
		random_list = {
			50 = {
			}
			50 = {
				set_country_flag = mem_surveyor_generic_responses
			}
		}
		random_system = {
			limit = {
				has_star_flag = mem_surveyor_next_target
			}
			save_event_target_as = next_target
		}
		random_system = {
			limit = {
				has_star_flag = mem_surveyor_visited
			}
			save_event_target_as = visited_system
		}

		# Script reference in leviathans.507
		# Set costs based on empire size
		# Base of 250 Energy
		set_variable = {
			which = mem_surveyor_insight_cost
			value = 250
		}
		# +1% per Empire Size (same scaling as Edicts)
		# Ergo, 500 Energy at 100 Empire Size
		multiply_variable = {
			which = mem_surveyor_insight_cost
			value = value:edict_size_effect
		}

		# Set costs based on empire size
		# Base of 1000 Energy
		set_variable = {
			which = mem_surveyor_reevaluation_cost
			value = 1000
		}
		# +1% per Empire Size (same scaling as Edicts)
		# Ergo, 2000 Energy at 100 Empire Size
		multiply_variable = {
			which = mem_surveyor_reevaluation_cost
			value = value:edict_size_effect
		}

		if = {
			limit = {
				NOT = {
					is_variable_set = mem_surveyor_reevaluation_planet
				}
			}
			set_variable = {
				which = mem_surveyor_reevaluation_planet
				value = 0
			}
		}
	}

	# About the Probe
	option = {
		name = mem_surveyor.120.a
		hidden_effect = {
			country_event = {
				id = mem_surveyor.121
			}
		}
	}
	
	# How to earn trust
	option = {
		name = mem_surveyor.120.b
		hidden_effect = {
			country_event = {
				id = mem_surveyor.122
			}
		}
	}

	# Galactic Curiosities
	option = {
		name = mem_surveyor.120.c
		hidden_effect = {
			country_event = {
				id = mem_surveyor.123
			}
		}
	}

	# Survey Buff
	option = {
		name = mem_surveyor.120.d
		allow = {
			NOT = {
				has_modifier = mem_surveyor_survey_buff
			}
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_insight_cost|
		}
		add_modifier = {
			modifier = mem_surveyor_survey_buff
			days = 3600
		}
		custom_tooltip = opinion10
		hidden_effect = {
			set_country_flag = mem_surveyor_insight_obtained
			# Ask to renew the deal
			country_event = { id = mem_surveyor.125 days = 3600 }
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
		is_dialog_only = yes
		response_text = mem_surveyor.120.d.response
	}

	# Survey Reevaluation
	option = {
		name = mem_surveyor.120.e
		custom_tooltip = mem_surveyor.120.e.tt
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor.120.e.opinion
				event_target:mem_surveyor_country = {
					trust = {
						who = root
						value >= 50
					}
				}
			}
			custom_tooltip = {
				fail_text = mem_surveyor_reevaluation
				NOT = {
					has_country_flag = mem_surveyor_reevaluation
				}
			}
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_reevaluation_cost|
		}		
		hidden_effect = {
			set_timed_country_flag = {
				flag = mem_surveyor_reevaluation
				days = 3600
			}
			country_event = { id = mem_surveyor.124 days = 120 random = 60 }

			# Chance for additional deposits
			random_list = {
				80 = { country_event = { id = mem_surveyor.124 days = 720 random = 360 } }
				20 = {}
			}

			random_list = {
				50 = { country_event = { id = mem_surveyor.124 days = 1440 random = 360 } }
				50 = {}
			}
			
			# Ask to renew the deal
			country_event = { id = mem_surveyor.126 days = 3600 }
		}
		is_dialog_only = yes
		response_text = mem_surveyor.120.e.response
	}
	
	option = {
		name = MEM_SURVEYOR_EXIT
		default_hide_option = yes
		remove_country_flag = mem_surveyor_generic_responses
		remove_country_flag = mem_surveyor_diplomacy_engaged
	}
}

# Custom diplomacy submenu - Talk about Probe
country_event = {
	id = mem_surveyor.121
	title = MEM_SURVEYOR_PROBE_HEADER
	# Picks one of these descs at random
	desc = mem_surveyor.120.desc.2
	desc = mem_surveyor.120.desc.3
	desc = mem_surveyor.120.desc.4
	desc = mem_surveyor.120.desc.5
	desc = mem_surveyor.120.desc.6
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	# Tell us about the mission
	option = {		
		name = mem_surveyor.121.a
		is_dialog_only = yes
		response_text = mem_surveyor.121.a.answer
	}
	# Tell us about the Alkree
	option = {
		name = mem_surveyor.121.b
		is_dialog_only = yes
		response_text = mem_surveyor.121.b.answer
		trigger = {
			NOT = {
				has_origin = origin_mem_ceaseless_gaze
			}
		}
	}
	# All Alkree are dead
	option = {
		name = mem_surveyor.121.c
		is_dialog_only = yes
		response_text = mem_surveyor.121.c.answer
		trigger = {
			has_country_flag = mem_surveyor_found_alkree_homeworld
		}
	}
	# WE are the Alkree
	option = {
		name = mem_surveyor.121.d
		is_dialog_only = yes
		response_text = mem_surveyor.121.d.answer
		trigger = {
			has_origin = origin_mem_ceaseless_gaze
		}
	}
	# Why do you look like a space whale?
	option = {
		name = mem_surveyor.121.e
		is_dialog_only = yes
		response_text = mem_surveyor.121.e.answer
		trigger = {
			OR = {
				has_established_contact = event_target:crystal_country
				has_established_contact = event_target:crystal_splitter_country
				has_established_contact = event_target:tiyanki_country
				has_established_contact = event_target:tiyanki_garrison_country
			}
		}
	}

	option = {
		name = BACK
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = mem_surveyor.120
			}
		}		
	}
}

# Custom diplomacy submenu - Earn Trust
country_event = {
	id = mem_surveyor.122
	title = MEM_SURVEYOR_PROBE_HEADER
	# Picks one of these descs at random
	desc = {
		text = mem_surveyor.122.desc.1
		trigger = {
			NAND = {
				has_country_flag = mem_surveyor_donated_energy
				has_country_flag = mem_surveyor_donated_minerals
				has_country_flag = mem_surveyor_donated_alloys
			}			
		}
	}
	desc = mem_surveyor.122.desc.2
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	# Donate Energy
	option = {
		name = mem_surveyor.122.a
		is_dialog_only = yes
		response_text = mem_surveyor.122.a.answer
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor_donated_energy
				NOT = {
					has_country_flag = mem_surveyor_donated_energy
				}
			}
			resource_stockpile_compare = {
				resource = energy
				value >= 2500
			}
		}
		custom_tooltip = opinion5
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 5
				}
			}
			set_country_flag = mem_surveyor_donated_energy
		}
		add_resource = {
			energy = -2500 
		}
	}
	# Donate Minerals
	option = {
		name = mem_surveyor.122.b
		is_dialog_only = yes
		response_text = mem_surveyor.122.a.answer
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor_donated_minerals
				NOT = {
					has_country_flag = mem_surveyor_donated_minerals
				}
			}
			resource_stockpile_compare = {
				resource = minerals
				value >= 2500
			}
		}
		custom_tooltip = opinion5
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 5
				}
			}
			set_country_flag = mem_surveyor_donated_minerals
		}
		add_resource = {
			minerals = -2500 
		}
	}
	# Donate Alloys
	option = {
		name = mem_surveyor.122.c
		is_dialog_only = yes
		response_text = mem_surveyor.122.a.answer
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor_donated_alloys
				NOT = {
					has_country_flag = mem_surveyor_donated_alloys
				}
			}			
			resource_stockpile_compare = {
				resource = alloys
				value >= 1250
			}
		}
		custom_tooltip = opinion10
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
			set_country_flag = mem_surveyor_donated_alloys
		}
		add_resource = {
			alloys = -1250 
		}
	}
	# Ask for odd jobs
	option = {
		name = mem_surveyor.122.d
		custom_tooltip = mem_surveyor.122.d.tt
		is_dialog_only = yes
		response_text = mem_surveyor.122.d.answer
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor_odd_jobs
				NOR = {
					has_country_flag = mem_surveyor_collected_reward
					has_country_flag = mem_surveyor_offered_quest
					has_country_flag = mem_surveyor_finished_quest
					has_country_flag = mem_surveyor_asked_for_quest
				}
			}
		}
		hidden_effect = {
			set_timed_country_flag = {
				flag = mem_surveyor_asked_for_quest
				months = 6
			}
			# Start the randomizer event to give a quest
			country_event = {
				id = mem_surveyor.102
				days = 30
				random = 150
			}
		}
	}
	option = {
		name = BACK
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = mem_surveyor.120
			}
		}		
	}
}

# Custom diplomacy submenu - Galactic Curiosities
country_event = {
	id = mem_surveyor.123
	title = MEM_SURVEYOR_PROBE_HEADER
	# Picks one of these descs at random
	desc = {
		trigger = {
			NOR = {
				has_country_flag = mem_surveryor_curio_response		
				has_country_flag = mem_surveyor_precursor_response		
			}
		}
		text = mem_surveyor.123.desc.1
	}
	desc = {
		trigger = {
			NOR = {
				has_country_flag = mem_surveryor_curio_response		
				has_country_flag = mem_surveyor_precursor_response		
			}
		}
		text = mem_surveyor.123.desc.2
	}
	desc = {
		trigger = {
			NOR = {
				has_country_flag = mem_surveryor_curio_response		
				has_country_flag = mem_surveyor_precursor_response		
			}
		}
		text = mem_surveyor.123.desc.3
	}
	# Curio response
	desc = {
		trigger = {
			has_country_flag = mem_surveryor_curio_response
		}
		text = mem_surveyor.123.a.answer
	}
	# Precursor insight response
	desc = {
		trigger = {
			has_country_flag = mem_surveyor_precursor_response
		}
		text = mem_surveyor.123.b.answer
	}
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}

	immediate = {
		# Set costs based on empire size
		# Base of 500 Energy
		set_variable = {
			which = mem_surveyor_curio_cost
			value = 500
		}
		# +1% per Empire Size (same scaling as Edicts)
		# Ergo, 1000 Energy at 100 Empire Size
		multiply_variable = {
			which = mem_surveyor_curio_cost
			value = value:edict_size_effect
		}
		# refund value
		set_variable = {
			which = mem_surveyor_curio_refund
			value = mem_surveyor_curio_cost
		}
		multiply_variable = {
			which = mem_surveyor_curio_refund
			value = -1
		}

		# I want to have multiple different positive answers for the curio handout so I need a little trick for the scripted loc
		remove_country_flag = mem_surveyor_curio_pos_1
		remove_country_flag = mem_surveyor_curio_pos_2
		remove_country_flag = mem_surveyor_curio_pos_3
		random_list = {
			1 = {
				set_country_flag = mem_surveyor_curio_pos_1
			}
			1 = {
				set_country_flag = mem_surveyor_curio_pos_2
			}
			1 = {
				set_country_flag = mem_surveyor_curio_pos_3
			}
		}
	}

	# Point us to something interesting
	option = {
		name = mem_surveyor.123.a
		custom_tooltip = mem_surveyor.123.a.tt
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor.123.a.opinion
				event_target:mem_surveyor_country = {
					trust = {
						who = root
						value >= 25
					}
				}
			}
			custom_tooltip = {
				fail_text = mem_surveyor_curio_soldout
				NOT = {
					has_country_flag = mem_surveyor_curio_soldout
				}
			}
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_curio_cost|
		}
		custom_tooltip = opinion5
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 5
				}
			}
			set_country_flag = mem_surveryor_curio_response
			remove_country_flag = mem_surveyor_precursor_response
			if = {
				limit = {
					any_system = {
						# Every system that should be available for this needs to have this flag
						has_star_flag = mem_surveyor_curio
						NOT = {
							# This flag is either set, when the curio location is handed out or when the system is visited by the country
							has_star_flag = mem_surveyor_curio_marked_@root
						}
					}
				}
				random_system = {
					limit = {
						has_star_flag = mem_surveyor_curio
						NOT = {
							# This flag is either set, when the curio location is handed out or when the system is visited by the country
							has_star_flag = mem_surveyor_curio_marked_@root
						}
					}
					set_star_flag = mem_surveyor_curio_marked_@root
					switch = {
						trigger = has_star_flag
						mem_surveyor_curio_aevum = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_aevum
							}
						}
						mem_surveyor_curio_broken_clock = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_broken_clock
							}
						}
						mem_surveyor_curio_crucible = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_crucible
							}
						}
						mem_surveyor_curio_descended = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_descended
							}
						}
						mem_surveyor_curio_mountain = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_mountain
							}
						}
						mem_surveyor_curio_magnus = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_magnus
							}
						}
						mem_surveyor_curio_rebel_yell = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_rebel_yell
							}
						}
						mem_surveyor_curio_rubicon = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_rubicon
							}
						}
						mem_surveyor_curio_sadrell = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_sadrell
							}
						}
						mem_surveyor_curio_severance = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_severance
							}
						}
						mem_surveyor_curio_vazuran_event = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_vazuran_event
							}
						}
						mem_surveyor_curio_wargame = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_wargame
							}
						}
						mem_surveyor_curio_wpdr = {
							mem_surveyor_create_curio_poi = {
								POI = mem_surveyor_curio_wpdr
							}
						}
					}
				}
			}
			# Refund and add a permanent flag used for the scripted loc and prevent further attempts
			else = {
				if = {
					limit = {
						NOT = {
							has_country_flag = mem_surveyor_curio_soldout
						}
					}
					set_country_flag = mem_surveyor_curio_soldout
				}				
				add_resource = {
					energy = 1
					mult = mem_surveyor_curio_refund 
				}
			}	
			country_event = {
				id = mem_surveyor.123
			}		
		}
	}

	# WPDR Info
	option = {
		name = mem_surveyor.123.c
		trigger = {
			has_country_flag = mem_wpdr_met_the_thing
		}
		hidden_effect = {
			remove_country_flag = mem_surveryor_curio_response
			remove_country_flag = mem_surveyor_precursor_response
			country_event = {
				id = mem_surveyor.127
			}
		}
	}

	# Buy Precursor Insights
	option = {
		name = mem_surveyor.123.b
		trigger = {
			OR = {
				AND = {
					has_event_chain = "vultaum_chain"
					NOT = {
						has_completed_event_chain_counter = {
							event_chain = vultaum_chain
							counter = vultaum_artifacts
						}
					}
				}
				AND = {
					has_event_chain = "yuht_chain"
					NOT = {
						has_completed_event_chain_counter = {
							event_chain = yuht_chain
							counter = yuht_artifacts
						}
					}
				}
				AND = {
					has_event_chain = "first_league_chain"
					NOT = {
						has_completed_event_chain_counter = {
							event_chain = first_league_chain
							counter = first_league_artifacts
						}
					}
				}
				AND = {
					has_event_chain = "irassian_chain"
					NOT = {
						has_completed_event_chain_counter = {
							event_chain = irassian_chain
							counter = irassian_artifacts
						}
					}
				}
				AND = {
					has_event_chain = "cybrex_chain"
					NOT = {
						has_completed_event_chain_counter = {
							event_chain = cybrex_chain
							counter = cybrex_artifacts
						}
					}
				}
			}
		}
		allow = {
			NOT = {
				has_modifier = mem_surveyor_precursor_insight
			}
			custom_tooltip = {
				fail_text = mem_surveyor.123.a.opinion
				event_target:mem_surveyor_country = {
					trust = {
						who = root
						value >= 25
					}
				}
			}			
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_curio_cost|
		}
		add_modifier = {
			modifier = mem_surveyor_precursor_insight
			days = 3600
		}
		custom_tooltip = opinion5
		hidden_effect = {
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 5
				}
			}
			remove_country_flag = mem_surveryor_curio_response
			set_country_flag = mem_surveyor_precursor_response
			country_event = {
				id = mem_surveyor.123
			}
		}
		# This vanilla effect adds one to the player's precursor counter
		collector_surrenders_artifact = yes
	}

	option = {
		name = BACK
		default_hide_option = yes
		hidden_effect = {
			remove_country_flag = mem_surveryor_curio_response
			remove_country_flag = mem_surveyor_precursor_response
			country_event = {
				id = mem_surveyor.120
			}
		}		
	}
}

# Survey Reevaluation
country_event = {
	id = mem_surveyor.124
	title = MEM_SURVEYOR_PROBE_HEADER
	# Picks one of these descs at random	TODO - Add some more as this will popup often 		TODO - ADD MOOOOOORE
	desc = mem_surveyor.124.desc.1
	desc = mem_surveyor.124.desc.2
	desc = mem_surveyor.124.desc.3
	desc = mem_surveyor.124.desc.4
	desc = mem_surveyor.124.desc.5
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	location = event_target:chosen_planet
	trigger = {
		exists = event_target:mem_surveyor_country
		event_target:mem_surveyor_country = {
			is_country_type = mem_surveyor_country_green
		}
		NOT = {
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		# Choose a target planet and give it a flag for the two special outcomes
		random_list = {
			# Add a normal deposite somewhere
			# can happen unlimited
			85 = {
				random_planet_within_border = {
					limit = {
						habitable_planet = no
						is_artificial = no
						NOR = {
							is_planet_class = pc_ringworld_habitable_damaged
							is_planet_class = pc_ringworld_tech_damaged
							is_planet_class = pc_ringworld_tech
							is_planet_class = pc_ringworld_seam
							is_planet_class = pc_ringworld_seam_damaged
							is_planet_class = pc_astral_scar
						}
						# check that the random list won't come up empty
						OR = {
							energy_candidate = yes
							mineral_candidate = yes
							research_candidate = yes
							alloy_candidate = yes
							exotic_gas_candidate = yes
							rare_crystal_candidate = yes
							volatile_motes_candidate = yes
							ROOT = { is_gestalt = no }
						}
					}
					save_event_target_as = chosen_planet
				}
			}
			# Add a planetary feature somewhere
			# each planet can only get one additional feature
			10 = {
				modifier = {
					check_variable = {
						which = mem_surveyor_reevaluation_planet
						value = 3
					}
					add = 5
				}
				modifier = {
					NOT = {
						any_planet_within_border = {
							OR = {
								is_colonizable = yes
								is_colony = yes
							}
							is_artificial = no
							NOT = {
								has_planet_flag = mem_surveyor_reevaluation
							}
						}						
					}
					factor = 0
				}
				random_planet_within_border = {
					limit = {
						OR = {
							is_colonizable = yes
							is_colony = yes
						}
						is_artificial = no
						NOT = {
							has_planet_flag = mem_surveyor_reevaluation
						}
					}
					save_event_target_as = chosen_planet
					set_planet_flag = mem_surveyor_reevaluation
				}
			}
			# Add terraforming modifier to applicable planet
			5 = {
				modifier = {
					check_variable = {
						which = mem_surveyor_reevaluation_planet
						value = 3
					}
					factor = 0
				}
				modifier = {
					NOT = {
						any_planet_within_border = {
							OR = {
								is_planet_class = pc_barren
								is_planet_class = pc_barren_cold
							}
							NOT = {
								has_modifier = terraforming_candidate
							}
							planet_size >= 15
							planet_size <= 25
						}
					}
				}
				change_variable = {
					which = mem_surveyor_reevaluation_planet
					value = 1
				}
				random_planet_within_border = {
					limit = {
						OR = {
							is_planet_class = pc_barren
							is_planet_class = pc_barren_cold
						}
						NOT = {
							has_modifier = terraforming_candidate
						}
						planet_size >= 15
						planet_size <= 25
					}
					save_event_target_as = chosen_planet
					set_planet_flag = mem_surveyor_reevaluation
				}
			}
		}
	}
	option = {
		name = Great
		event_target:chosen_planet = {
			# normal planet deposits
			if = {
				limit = {
					NOT = {
						has_planet_flag = mem_surveyor_reevaluation
					}
				}
				locked_random_list = {

					# Energy
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { energy_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_energy_5 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { energy_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_energy_7 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { energy_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_energy_9 }
					}
		
					# Minerals
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { mineral_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_minerals_5 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { mineral_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_minerals_7 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { mineral_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_minerals_9 }
					}
		
					# Physics
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_physics_5 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_physics_7 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_physics_9 }
					}
		
					# Society
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_society_5 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_society_7 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_society_9 }
					}
		
					# Engineering
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_engineering_5 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_engineering_7 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { research_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_engineering_9 }
					}
					
					# Had one in my game but it does not seem to be collected, disabling for now
					# Trade
					# 10 = {
					# 	event_target:chosen_planet = { add_deposit = d_trade_value_5 }
					# }
					# 10 = {
					# 	event_target:chosen_planet = { add_deposit = d_trade_value_7 }
					# }
					# 10 = {
					# 	event_target:chosen_planet = { add_deposit = d_trade_value_9 }
					# }
		
					# Alloys
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { alloy_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_alloys_3 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { alloy_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_alloys_4 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { alloy_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_alloys_5 }
					}
		
					# Exotic Gas
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { exotic_gas_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_exotic_gases_1 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { exotic_gas_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_exotic_gases_2 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { exotic_gas_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_exotic_gases_3 }
					}
		
					# Rare Crystals
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { rare_crystal_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_rare_crystals_1 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { rare_crystal_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_rare_crystals_2 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { rare_crystal_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_rare_crystals_3 }
					}
		
					# Volatile Motes
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { volatile_motes_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_volatile_motes_1 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { volatile_motes_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_volatile_motes_2 }
					}
					10 = {
						modifier = {
							factor = 0
							event_target:chosen_planet = { volatile_motes_candidate = no }
						}
						event_target:chosen_planet = { add_deposit = d_volatile_motes_3 }
					}
				}
			}
			# habitable planet features
			else_if = {
				limit = {
					habitable_planet = yes
				}
				# Add planet features
				locked_random_list = {
					# Mineral districts
					10 = {
						add_deposit = d_ore_rich_caverns
					}
					10 = {
						add_deposit = d_rich_mountain
					}

					# Agricultural districts
					10 = {
						add_deposit = d_fungal_caves
					}
					10 = {
						add_deposit = d_black_soil
					}

					# Energy
					20 = {
						add_deposit = d_betharian_deposit
					}
					
					# Motes
					10 = {
						add_deposit = d_dust_caverns
					}
					
					# Gasses
					10 = {
						add_deposit = d_bubbling_swamp
					}
					
					# Crystals
					10 = {
						add_deposit = d_crystalline_caverns
					}			

					# Special
					10 = {
						add_deposit = d_alien_pets_deposit
					}
				}
			}
			# Terraforming Candidate
			else = {
				add_modifier = {
					modifier = terraforming_candidate
				}
			}
		}
	}
}

# Renew Survey Buff
country_event = {
	id = mem_surveyor.125
	title = MEM_SURVEYOR_PROBE_HEADER
	# Picks one of these descs at random
	desc = mem_surveyor.125.desc_1
	desc = mem_surveyor.125.desc_2
	desc = mem_surveyor.125.desc_3
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	trigger = {
		exists = event_target:mem_surveyor_country
		event_target:mem_surveyor_country = {
			is_country_type = mem_surveyor_country_green
		}
		NOT = {
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		# Set costs based on empire size
		# Base of 250 Energy
		set_variable = {
			which = mem_surveyor_insight_cost
			value = 250
		}
		# +1% per Empire Size (same scaling as Edicts)
		# Ergo, 500 Energy at 100 Empire Size
		multiply_variable = {
			which = mem_surveyor_insight_cost
			value = value:edict_size_effect
		}
	}

	# Survey Buff
	option = {
		name = mem_surveyor.125.a
		allow = {
			NOT = {
				has_modifier = mem_surveyor_survey_buff
			}
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_insight_cost|
		}
		add_modifier = {
			modifier = mem_surveyor_survey_buff
			days = 3600
		}
		custom_tooltip = opinion10
		hidden_effect = {
			set_country_flag = mem_surveyor_insight_obtained
			# Ask to renew the deal
			country_event = { id = mem_surveyor.125 days = 3600 }
			event_target:mem_surveyor_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
		}
	}

	option = {
		name = mem_surveyor.125.b
		default_hide_option = yes
	}
}

# Renew Survey Reevaluation
country_event = {
	id = mem_surveyor.126
	title = MEM_SURVEYOR_PROBE_HEADER
	# Picks one of these descs at random
	desc = mem_surveyor.125.desc_1
	desc = mem_surveyor.125.desc_2
	desc = mem_surveyor.125.desc_3
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	trigger = {
		exists = event_target:mem_surveyor_country
		event_target:mem_surveyor_country = {
			is_country_type = mem_surveyor_country_green
		}
		NOT = {
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		# Set costs based on empire size
		# Base of 1000 Energy
		set_variable = {
			which = mem_surveyor_reevaluation_cost
			value = 1000
		}
		# +1% per Empire Size (same scaling as Edicts)
		# Ergo, 2000 Energy at 100 Empire Size
		multiply_variable = {
			which = mem_surveyor_reevaluation_cost
			value = value:edict_size_effect
		}
	}

	# Survey Reevaluation
	option = {
		name = mem_surveyor.125.a
		custom_tooltip = mem_surveyor.120.e.tt
		allow = {
			custom_tooltip = {
				fail_text = mem_surveyor.120.e.opinion
				event_target:mem_surveyor_country = {
					trust = {
						who = root
						value >= 50
					}
				}
			}
			custom_tooltip = {
				fail_text = mem_surveyor_reevaluation
				NOT = {
					has_country_flag = mem_surveyor_reevaluation
				}
			}
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_reevaluation_cost|
		}		
		hidden_effect = {
			set_timed_country_flag = {
				flag = mem_surveyor_reevaluation
				days = 3600
			}
			country_event = { id = mem_surveyor.124 days = 120 random = 60 }

			# Chance for additional deposits
			random_list = {
				80 = { country_event = { id = mem_surveyor.124 days = 720 random = 360 } }
				20 = {}
			}

			random_list = {
				50 = { country_event = { id = mem_surveyor.124 days = 1440 random = 360 } }
				50 = {}
			}
			
			# Ask to renew the deal
			country_event = { id = mem_surveyor.126 days = 3600 }
		}
	}

	option = {
		name = mem_surveyor.125.b
		default_hide_option = yes
	}
}

# Custom diplomacy submenu - WPDR Info
country_event = {
	id = mem_surveyor.127
	title = MEM_SURVEYOR_PROBE_HEADER
	desc = mem_surveyor.127.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = event_target:mem_surveyor_country
	}
	trigger = {
		exists = event_target:mem_surveyor_country
		event_target:mem_surveyor_country = {
			is_country_type = mem_surveyor_country_green
		}
		NOT = {
			has_country_flag = mem_surveyor_attacked_surveyor
		}
	}
	immediate = {
		# Set costs based on empire size
		# Base of 1000 Energy
		set_variable = {
			which = mem_surveyor_wpdr_info_cost
			value = 1000
		}
		# +1% per Empire Size (same scaling as Edicts)
		# Ergo, 2000 Energy at 100 Empire Size
		multiply_variable = {
			which = mem_surveyor_wpdr_info_cost
			value = value:edict_size_effect
		}
	}

	# Give us the Info
	option = {
		name = mem_surveyor.127.a
		allow = {
			NOT = {
				has_modifier = mem_wpdr_weakpoint_exploitation
			}
		}
		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:curator_purchase_cost|COST|mem_surveyor_wpdr_info_cost|
		}
		add_modifier = {
			modifier = mem_wpdr_weakpoint_exploitation
		}
	}

	option = {
		name = BACK
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = mem_surveyor.123
			}
		}		
	}
}

######################
### Probe flips    ###
######################
#Midgame start - decide if flippage should occur (Can also be rewritten to trigger event)
event = {
	id = mem_surveyor.200
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		any_country = {
			is_country_type = mem_surveyor_country_green
		}
	}
	immediate = {
		random_country = {
			limit = {
				is_country_type = mem_surveyor_country_green
			}
			set_country_flag = mem_surveyor_country_green_decided
			random_list = {
				30 = {
					# sentinel mode
					country_event = {
						id = mem_surveyor.1001
						days = 1800
						random = 1800
					}
					modifier = {
						factor = 0
						OR = {
							has_country_flag = mem_surveyor_country_green_berserker_decision
							has_country_flag = mem_surveyor_country_green_nothing_burger
						}
					}
				}
				30 = {
					# berserker mode
					#set_country_flag = mem_surveyor_will_go_berserk
					country_event = {
						id = mem_surveyor.201
						days = 1800
						random = 1800
					}
					modifier = {
						factor = 0
						OR = {
							has_country_flag = mem_surveyor_country_green_sentinel_decision
							has_country_flag = mem_surveyor_country_green_nothing_burger
						}
					}
					# country_event = {
					#     id = mem_surveyor.5000
					#     days = 3600
					# }
				}
				30 = {
					# nothing
					modifier = {
						factor = 0
						OR = {
							has_country_flag = mem_surveyor_country_green_berserker_decision
							has_country_flag = mem_surveyor_country_green_sentinel_decision
						}
					}
				}
			}
		}
	}
}

# Probe decides to flip 
# can only happen if not in player space
country_event = {
	id = mem_surveyor.201
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		#is_country_type = mem_surveyor_country_green
		#has_country_flag = mem_surveyor_will_go_berserk        
		any_owned_fleet = {
			exists = solar_system
			OR = {
				NOT = {
					exists = space_owner
				}
				space_owner = {
					is_ai = yes
				}
			}
		}
	}
	immediate = {
		every_system = {
			remove_star_flag = mem_surveyor_next_target
		}
		set_country_flag = mem_surveyor_will_go_berserk
		set_country_type = mem_surveyor_country_red
		set_global_flag = mem_surveyor_went_berserk
		set_name = "Berserker Probe"
		change_country_flag = {
			icon = {
				category = "mem"
				file = "mem_radar_2.dds"
			}
			background = {
				category = "backgrounds"
				file = "circle.dds"
			}
			colors = {
				"red"
				"red_orange"
				"null"
				"null"
			}
		}
		change_dominant_species = {
			species = event_target:mem_surveyor_robotomite_species
		}
		set_variable = {
			which = mem_surveyor_attrition_counter
			value = 150
		}
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.202
			}
			#Players get notified
		}
		every_country = {
			limit = {
				is_fallen_empire = yes
			}
			set_faction_hostility = {
				set_neutral = yes
				set_hostile = no
				set_friendly = no
			}
		}
		create_ship_design = {
			design = "NAME_MEM_Surveyor_Outpost"
		}
		add_ship_design = last_created_design
		random_owned_fleet = {
			set_name = "Berserker Probe"
			queue_actions = {
				wait = {
					duration = 10
				}
				effect = {
					id = mem_surveyor.berserker.trigger.init
					while = {
						count = 9
						create_ship = {
							name = ""
							design = NAME_MEM_Surveyor_Support
						}
					}
					while = {
						count = 3
						create_ship = {
							name = ""
							design = NAME_MEM_Surveyor_Escort
						}
					}
					every_system = {
						remove_star_flag = mem_surveyor_next_target
					}
					fleet_event = {
						id = mem_surveyor.210
					}
				}
			}
		}
		country_event = {
			id = mem_surveyor.223
			days = 360
		}
	}
}

# Diplomatic event to notify player 
country_event = {
	id = mem_surveyor.202
	title = MEM_SURVEYOR_BERSERK_HEADER
	desc = mem_surveyor.202.desc
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		room = mem_surveyor_red_room
		portrait = mem_surveyor_red
	}
	option = {
		name = MEM_SURVEYOR_EXIT
	}
	after = {
		hidden_effect = {
			country_event = {
				id = mem_surveyor.260
				days = 360
				random = 1800
			}
		}
	}
}

# Custom diplomacy with the berserker
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.203
	title = MEM_SURVEYOR_BERSERK_HEADER
	desc = mem_surveyor.203.desc.1
	desc = mem_surveyor.203.desc.2
	desc = mem_surveyor.203.desc.3
	desc = mem_surveyor.203.desc.4
	desc = mem_surveyor.203.desc.5
	desc = {
		text = mem_surveyor.desc.agg.1
		trigger = {
			has_country_flag = mem_surveyor_terrorize_this_country
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_country_red
			NOT = {
				has_country_flag = mem_surveyor_out_of_comission
			}
		}
		NOT = {
			has_country_flag = mem_surveyor_diplomacy_engaged
		}
	}
	picture_event_data = {
		room = mem_surveyor_red_room
		portrait = mem_surveyor_red
	}
	immediate = {
		set_country_flag = mem_surveyor_diplomacy_engaged
	}
	option = {
		#All Alkree are dead
		name = mem_surveyor.203.a
		is_dialog_only = yes
		response_text = mem_surveyor.203.a.answer
		trigger = {
			has_country_flag = mem_surveyor_found_alkree_homeworld
		}
	}
	option = {
		name = MEM_SURVEYOR_EXIT
		default_hide_option = yes
		remove_country_flag = mem_surveyor_generic_responses
		remove_country_flag = mem_surveyor_diplomacy_engaged
	}
}

# Berserker Probe first contact? Seems unlikely to not have seen it before it goes berserk
country_event = {
	id = mem_surveyor.204
	title = mem_surveyor.204.name
	desc = mem_surveyor.204.desc
	is_triggered_only = yes
	picture = GFX_evt_unknown_ships
	show_sound = event_radio_chatter
	trigger = {
		NOT = {
			has_communications = event_target:mem_surveyor_country
		}
	}
	immediate = {
		establish_communications_no_message = event_target:mem_surveyor_country
	}
	option = {
		name = ONSCREEN
		hidden_effect = {
			country_event = {
				id = mem_surveyor.202
			}
		}
	}
}

# Probe decision making - main cycle
fleet_event = {
	id = mem_surveyor.210
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		owner = {
			is_country_type = mem_surveyor_country_red
			NOT = {
				has_country_flag = mem_surveyor_out_of_comission
			}
		}
	}
	immediate = {
		# log = ".210 loop"
		# IF = {
		#     limit = { has_fleet_flag = mem_surveyor_day_of_the_order }
		#     # log = "Recent order flag is still present"
		# }
		solar_system = {
			remove_star_flag = mem_surveyor_next_target
			IF = {
				limit = {
					# If probe touched the star, starbase is likely disabled by third party. Remove it.
					exists = starbase
					starbase = {
						owner = {
							NOT = {
								is_same_value = root.owner
							}
						}
					}
					prev = {
						NOT = {
							has_fleet_flag = mem_surveyor_order_from_planet
						}
					}
				}
				starbase.fleet = {
					delete_fleet = this
				}
			}
			IF = {
				limit = {
					prev = {
						NOT = {
							has_fleet_flag = mem_surveyor_order_from_planet
						}
						# Ship should not construct an outpost unless it just tourched the star
					}
					NOR = {
						any_ship_in_system = {
							exists = owner
							owner = {
								NOT = {
									is_country_type = mem_surveyor_country_red
								}
							}
						}
						any_system_planet = {
							exists = owner
							owner = {
								NOT = {
									is_country_type = mem_surveyor_country_red
								}
							}
						}
						exists = starbase
					}
					any_neighbor_system = {
						exists = space_owner
						space_owner = {
							is_same_value = root.owner
						}
					}
				}
				random_list = {
					50 = {
						modifier = {
							factor = 0
							any_neighbor_system = {
								any_system_planet = {
									exists = owner
									owner = {
										is_same_value = root.owner
									}
								}
							}
						}
					}
					50 = {
						root = {
							random_owned_ship = {
								limit = {
									is_ship_size = mem_surveyor_primary
								}
								#Is ship class
								mem_surveyor_berserker_mode_attrition_ship_debuff_add = {
									AMOUNT = -1
								}
							}
							owner = {
								mem_surveyor_berserker_mode_attrition_add = {
									AMOUNT = -1
								}
								# log = "Attrition: [This.mem_surveyor_attrition_counter]"
							}
						}
						create_starbase = {
							size = mem_surveyor_outpost
							owner = event_target:mem_surveyor_country
						}
					}
				}
			}
		}
		# IF = {
		#     limit = { is_in_combat = yes }
		#     fleet_event = { id = mem_surveyor.210 days = 30 }
		# }
		IF = {
			limit = {
				# Attack nearest planet if any in the system
				solar_system = {
					any_system_planet = {
						NOT = {
							has_planet_flag = mem_surveyor_is_being_attacked
						}
						exists = owner
						owner = {
							OR = {
								is_country_type = default
								is_country_type = primitive
								is_country_type = awakened_marauders
							}
						}
					}
				}
			}
			# log = "Targeting things!!!"
			solar_system = {
				random_system_planet = {
					limit = {
						NOT = {
							has_planet_flag = mem_surveyor_is_being_attacked
						}
						exists = owner
						owner = {
							OR = {
								is_country_type = default
								is_country_type = primitive
								is_country_type = awakened_marauders
							}
						}
					}
					# log = "[This.GetName] targeted"
					set_planet_flag = mem_surveyor_next_target_planet
				}
			}
			clear_fleet_actions = this
			queue_actions = {
				find_random_planet = {
					#Find a planet to attack
					trigger = {
						id = mem_surveyor.berserker.trigger.1.1
						has_planet_flag = mem_surveyor_next_target_planet
					}
					found_planet = {
						orbit_planet = this
						effect = {
							# Begin the invasion
							id = mem_surveyor.berserker.trigger.1.2
							remove_planet_flag = mem_surveyor_next_target_planet
							planet_event = {
								id = mem_surveyor.211
							}
							#Notification that war has began
						}
						wait = {
							duration = 90
						}
						effect = {
							# Reset the loop
							id = mem_surveyor.berserker.trigger.1.3
							root = {
								set_timed_fleet_flag = {
									flag = mem_surveyor_order_from_planet
									days = 1
								}
								fleet_event = {
									id = mem_surveyor.210
								}
							}
						}
					}
				}
			}
		}
		ELSE = {
			# Go find another system
			# This selector picks viable targets
			# IF = {
			#     limit = {
			#         NOT = {  
			#             any_country = { has_country_flag = mem_surveyor_terrorize_this_country }
			#         }
			#     }
			#     random_country = {
			#         limit = {
			#             is_country_type = default
			#         }
			#         country_event = { id = mem_surveyor.204 } #Contacting the player
			#         set_timed_country_flag = { flag = mem_surveyor_terrorize_this_country days = 1800 }
			#     }
			# }
			closest_system = {
				limit = {
					OR = {
						AND = {
							exists = space_owner
							NOT = {
								space_owner = {
									is_same_value = root.owner
								}
								# Should not loop
							}
							OR = {
								space_owner = {
									is_country_type = default
								}
								space_owner = {
									is_country_type = awakened_marauders
								}
								ROOT = {
									has_fleet_flag = mem_surveyor_day_of_the_order
								}
							}
						}
						# This one targets primitives, not sure if I want it
						any_system_planet = {
							exists = owner
							owner = {
								is_country_type = primitive
							}
						}
					}
				}
				min_steps = 1				#Apparently, landing in the same system breaks the AI
				# log = "[This.GetName] is the next target."
				set_star_flag = mem_surveyor_next_target
				every_playable_country = {
					remove_country_flag = mem_surveyor_terrorize_this_country
				}
				IF = {
					limit = {
						exists = space_owner
					}
					space_owner = {
						set_country_flag = mem_surveyor_terrorize_this_country
						country_event = {
							id = mem_surveyor.204
						}
					}
				}
			}
		}
		set_timed_fleet_flag = {
			flag = mem_surveyor_day_of_the_order
			days = 2
		}
		# If fleet receives events in rapid succession, it probably can't path. Make it so it can.
		queue_actions = {
			repeat = {
				# Probe shouldn't leave system if there's unconqered planet - I don't fully trust this code, but it should keep it standing.
				while = {
					id = mem_surveyor.berserker.trigger.2.0
					root = {
						exists = solar_system
						solar_system = {
							any_system_planet = {
								exists = owner
								owner = {
									NOT = {
										is_country_type = mem_surveyor_country_red
									}
								}
								has_ground_combat = yes
							}
						}
					}
				}
				wait = {
					duration = 20
				}
				# This might conceivably cause lags, so increase number later if people complain
			}
			find_closest_system = {
				trigger = {
					id = mem_surveyor.berserker.trigger.2.1
					has_star_flag = mem_surveyor_next_target
				}
				found_system = {
					move_to = this
					effect = {
						id = mem_surveyor.berserker.trigger.2.2
						root = {
							fleet_event = {
								id = mem_surveyor.210
							}
						}
					}
				}
			}
		}
	}
}

# Player is informed about invasion
planet_event = {
	id = mem_surveyor.211
	title = mem_surveyor.211.name
	desc = mem_surveyor.211.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_ancient_robots_attack_01
	location = ROOT
	show_sound = event_air_raid_siren
	immediate = {
		set_timed_planet_flag = {
			flag = mem_surveyor_is_being_attacked
			days = 360
		}
		from = {
			random_owned_ship = {
				limit = {
					is_ship_size = mem_surveyor_primary
				}
				#Is ship class
				mem_surveyor_berserker_mode_attrition_ship_debuff_add = {
					AMOUNT = -1
				}
			}
			owner = {
				mem_surveyor_berserker_mode_attrition_add = {
					AMOUNT = -1
				}
				# log = "Attrition: [This.mem_surveyor_attrition_counter]"
			}
		}
		while = {
			count = 5
			create_army = {
				name = "Berserkoid Invasion Force"
				owner = from.owner
				type = mem_surveyor_invaders
			}
		}
	}
	option = {
		name = mem_surveyor.211.a
	}
}

# Planet changes ownership to surveyor (On planet defenders lose)
country_event = {
	id = mem_surveyor.212
	title = mem_surveyor.212.name
	desc = {
		text = mem_surveyor.212.desc.no_survivors
		trigger = {
			FROMFROM = {
				pop_amount < 1
			}
		}
	}
	desc = {
		text = mem_surveyor.212.desc.survivors
		trigger = {
			FROMFROM = {
				pop_amount > 0
			}
		}
	}
	is_triggered_only = yes
	picture = GFX_evt_mem_ancient_robots_attack_01
	location = FROMFROM
	show_sound = event_ground_battle
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_country_red
		}
	}
	immediate = {
		# log = "[From.GetName] won"
		set_global_flag = mem_surveyor_probe_took_a_planet
		FROMFROM = {
			set_planet_flag = mem_surveyor_former_owner@root
			remove_modifier = land_appropriation
			every_owned_pop_group = {
				# Second pass, clear all the flags, edit the species
				# species = { remove_species_flag = mem_surveyor_species_sampled }
				IF = {
					limit = {
						OR = {
							has_trait = trait_machine_unit
							has_trait = trait_mechanical
						}
					}
					kill_all_pop = yes
				}
				ELSE = {
					random_list = {
						33 = {
							change_species = event_target:mem_surveyor_country
							prev = {
								while = {
									count = 1
									create_army = {
										name = "Robotomite Garrison"
										owner = FROM
										species = this
										type = mem_surveyor_robotomites
									}
								}
							}
						}
						66 = {
							random_list = {
								1 = {
									# Rembered to change this!!!
									species = {
										save_event_target_as = escapee_species
									}
									FROMFROM = {
										save_event_target_as = conquered_planet
									}
									random_country = {
										limit = {
											is_country_type = dormant_marauders
											OR = {
												has_country_flag = marauder_1
												has_country_flag = marauder_2
												has_country_flag = marauder_3
											}
										}
										# log = "Avenger initiated"
										country_event = {
											id = mem_surveyor.240
											days = 180
											random = 360
										}
										# Change timer here
									}
									kill_all_pop = yes
									modifier = {
										factor = 0
										has_trait = trait_hive_mind
									}
								}
								15 = {
									pop_group_event = {
										id = mem_surveyor.234
									}
									# Trying to escape
								}
								84 = {
									kill_all_pop = yes
								}
							}
						}
					}
				}
			}
			IF = {
				limit = {
					is_under_colonization = yes
				}
				destroy_colony = yes
			}
			ELSE_IF = {
				limit = {
					pop_amount > 0
				}
				# Apparently ownership is sometimes passed like this
				set_owner = event_target:mem_surveyor_country
			}
			planet_event = {
				id = mem_surveyor.217
				days = 5
			}
			#Construct outpost after conquered
			planet_event = {
				id = mem_surveyor.218
				days = 60
			}
			#Construct defense fleet
		}
		IF = {
			limit = {
				NOT = {
					has_authority = auth_machine_intelligence
				}
			}
			FROM = {
				copy_techs_from = {
					target = root
					except = {
						# Horizon Signal
						tech_akx_worm_1
						tech_akx_worm_2
						tech_akx_worm_3
					}
				}
			}
		}
	}
	option = {
		name = mem_surveyor.212.a
	}
}

# Invaders are beaten
country_event = {
	id = mem_surveyor.213
	title = mem_surveyor.213.name
	desc = mem_surveyor.213.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_victory
	location = FROMFROM
	show_sound = event_ground_battle
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_country_red
		}
	}
	option = {
		name = EXCELLENT
	}
}

# Successfully retaking the planet
country_event = {
	id = mem_surveyor.214
	title = mem_surveyor.214.name
	desc = mem_surveyor.214.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_victory
	location = FROMFROM
	show_sound = event_ground_battle
	trigger = {
		FROM.owner = {
			is_country_type = mem_surveyor_country_red
		}
	}
	immediate = {
		# log = "[From.GetName] lost"
		FROMFROM = {
			set_owner = ROOT
		}
	}
	option = {
		name = EXCELLENT
	}
}

# Surveyor construct outpost if they own a planet, but nobody else does
event = {
	id = mem_surveyor.215
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:mem_surveyor_country
		event_target:mem_surveyor_country = {
			is_country_type = mem_surveyor_country_red
			any_owned_planet = {
				NOT = {
					exists = starbase
				}
			}
		}
	}
	immediate = {
		event_target:mem_surveyor_country = {
			every_owned_planet = {
				solar_system = {
					IF = {
						limit = {
							NOR = {
								any_ship_in_system = {
									exists = owner
									owner = {
										NOT = {
											is_country_type = mem_surveyor_country_red
										}
									}
								}
								any_system_planet = {
									exists = owner
									owner = {
										NOT = {
											is_country_type = mem_surveyor_country_red
										}
									}
								}
							}
						}
						create_starbase = {
							size = mem_surveyor_outpost
							owner = event_target:mem_surveyor_country
						}
					}
				}
			}
		}
	}
}

# MTTH replacer for event below
# ye this does not work as intended, just ignore this and belows events
# who needs reinforcments? am i right
# country_event = {
#     id = mem_surveyor.5000
#     is_triggered_only = yes
#     hide_window = yes
#     trigger = {
#         exists = root
#     }
#     immediate = {
#         every_owned_fleet = {
#             fleet_event = {
#                 id = mem_surveyor.216
#             }
#         }
#         country_event = {
#             id = mem_surveyor.5000
#             days = 1800
#         }
#     }
# }
# # Reinforcement
# fleet_event = {
# 	id = mem_surveyor.216
# 	hide_window = yes
#     is_triggered_only =  yes
# 	trigger = {
# 		has_fleet_flag = mem_surveyor_fleet
# 		is_in_combat = no
# 		any_owned_ship = {
# 			is_ship_size = mem_surveyor_primary
# 		}
# 		fleet_size < 47
# 		owner = {
# 			OR = {
# 				is_country_type = mem_surveyor_country_red
# 				is_country_type = mem_surveyor_country_yellow
# 			}
# 			check_variable = {
# 				which = mem_surveyor_attrition_counter
# 				value > 0
# 			}
# 		}
# 	}
# 	immediate = {
# 		IF = {
# 			limit = {
# 				count_owned_ship = {
# 					limit = {
# 						is_ship_size = mem_surveyor_support
# 					}
# 					count < 17
# 				}
# 			}
# 			while = {
# 				count = 3
# 				create_ship = {
# 					name = ""
# 					design = NAME_MEM_Surveyor_Support
# 				}
# 			}
# 		}
# 		IF = {
# 			limit = {
# 				count_owned_ship = {
# 					limit = {
# 						is_ship_size = mem_surveyor_escort
# 					}
# 					count < 9
# 				}
# 			}
# 			create_ship = {
# 				name = ""
# 				design = NAME_MEM_Surveyor_Escort
# 			}
# 		}
# 	}
# }

# Planet constructs outpost after conquest
planet_event = {
	id = mem_surveyor.217
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = owner
		owner = {
			is_country_type = mem_surveyor_country_red
		}
		NOT = {
			exists = starbase
		}
		solar_system = {
			NOR = {
				any_ship_in_system = {
					exists = owner
					owner = {
						NOT = {
							is_country_type = mem_surveyor_country_red
						}
					}
				}
				any_system_planet = {
					exists = owner
					owner = {
						NOT = {
							is_country_type = mem_surveyor_country_red
						}
					}
				}
			}
		}
	}
	immediate = {
		solar_system = {
			create_starbase = {
				size = mem_surveyor_outpost
				owner = event_target:mem_surveyor_country
			}
		}
	}
}

# Planet constructs defensive fleets
planet_event = {
	id = mem_surveyor.218
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_ground_combat = no
		is_occupied_flag = no
	}
	trigger = {
		exists = owner
		exists = event_target:mem_surveyor_country
		owner = {
			is_country_type = mem_surveyor_country_red
		}
		# NAND = {
		#     exists = space_owner
		#     space_owner = {
		#         NOT = { is_same_value = root.owner }
		#     }
		#     exists = starbase
		#     starbase = { is_disabled = no }
		# }
		NOT = {
			has_planet_flag = mem_surveyor_spawned_garrison
		}
	}
	immediate = {
		set_planet_flag = mem_surveyor_spawned_garrison
		event_target:mem_surveyor_country = {
			create_fleet = {
				name = {
					key = "NAME_MEM_Surveyor_Robotomite_Flotilla"
					variable_string = "[Root.GetName]"
				}
				settings = {
					can_upgrade = no
					can_change_composition = no
					can_disband = no
				}
				effect = {
					set_owner = prev
					while = {
						count = 8
						create_ship = {
							#name = ""
							design = NAME_MEM_Surveyor_Support
						}
					}
					while = {
						count = 3
						create_ship = {
							#name = ""
							design = NAME_MEM_Surveyor_Escort
						}
					}
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 500
					add_modifier = {
						modifier = mem_surveyor_crappy_flunkies
						days = -1
					}
					set_location = root
					set_fleet_flag = mem_surveyor_garrison_fleet
					set_fleet_flag = mem_surveyor_fleet_of@root					# Setting relations, would help on transition, maybe
				}
			}
		}
	}
}

# Probe siezes activity due to high attrition
country_event = {
	id = mem_surveyor.219
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = mem_surveyor_country_red
		#NOT = { has_country_flag = mem_surveyor_out_of_comission }
		exists = event_target:mem_surveyor_fleet.solar_system
		any_owned_ship = {
			has_ship_flag = mem_surveyor_probe_ship
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_out_of_comission
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.220
			}
		}
		every_owned_army = {
			remove_army = yes
		}
		if = {
			limit = {
				exists = event_target:mem_surveyor_fleet.solar_system
				event_target:mem_surveyor_fleet.solar_system = {
					any_system_planet = {
						uninhabitable_regular_planet = yes
						has_anomaly = no
						OR = {
							has_deposit_for = shipclass_research_station
							has_deposit = no
						}
					}
				}
			}
			event_target:mem_surveyor_fleet = {
				clear_fleet_actions = this
				queue_actions = {
					find_closest_system = {
						trigger = {
							id = mem_surveyor.berserker.trigger.3.0
							NOT = {
								exists = space_owner
							}
							any_system_planet = {
								uninhabitable_regular_planet = yes
								has_anomaly = no
								OR = {
									has_deposit_for = shipclass_research_station
									has_deposit = no
								}
							}
						}
						found_system = {
							move_to = this
							find_random_planet = {
								trigger = {
									id = mem_surveyor.berserker.trigger.3.1
									uninhabitable_regular_planet = yes
									has_anomaly = no
									OR = {
										has_deposit_for = shipclass_research_station
										has_deposit = no
									}
								}
								found_planet = {
									orbit_planet = this
									effect = {
										id = mem_surveyor.berserker.trigger.3.1
										prevent_anomaly = yes
										set_planet_flag = mem_surveyor_resting_place
										add_deposit = d_physics_4
										add_deposit = d_engineering_4
										add_modifier = {
											modifier = mem_surveyor_resting_place
											days = -1
										}
										root = {
											country_event = {
												id = mem_surveyor.221
												days = 720
												random = 360
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		else = {
			country_event = {
				id = mem_surveyor.221
				days = 720
				random = 360
			}
		}
	}
}

# Player is notified of Probe stoppinge offensive
country_event = {
	id = mem_surveyor.220
	title = mem_surveyor.220.name
	desc = mem_surveyor.220.desc
	is_triggered_only = yes
	picture = GFX_evt_unknown_ships
	location = event_target:mem_surveyor_fleet
	show_sound = event_airlock
	option = {
		name = mem_surveyor.220.a
	}
}

# Probe completely loses control
country_event = {
	id = mem_surveyor.221
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_owned_ship = {
			has_ship_flag = mem_surveyor_probe_ship
		}
		has_global_flag = mem_surveyor_probe_took_a_planet
		NOT = {
			has_country_flag = mem_surveyor_already_attritioned
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_already_attritioned
		mem_surveyor_create_robotomite_countries = yes
		every_owned_fleet = {
			limit = {
				NOT = {
					has_fleet_flag = mem_surveyor_fleet
				}
			}
			destroy_fleet = this
		}
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.222
			}
		}
	}
}

# Player is notified of Freebotomites being born
country_event = {
	id = mem_surveyor.222
	title = mem_surveyor.222.name
	desc = {
		text = mem_surveyor.222.desc
		exclusive_trigger = {
			any_country = {
				has_country_flag = mem_surveyor_freebotomite_country
			}
		}
	}
	desc = mem_surveyor.222.desc.no_freebs
	# desc = {
	#     text = mem_surveyor.222.desc.no_planet_taken_ever
	#     exclusive_trigger = {
	#         NOT = { has_global_flag = mem_surveyor_probe_took_a_planet }
	#     }
	# }
	is_triggered_only = yes
	picture = GFX_evt_mining_station
	location = event_target:mem_surveyor_fleet
	show_sound = event_airlock
	option = {
		name = mem_surveyor.222.a
	}
}

# Increase probe attrition yearly
@attrition_yearly_increase = 5
country_event = {
	id = mem_surveyor.223
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = mem_surveyor_country_red
		check_variable = {
			which = mem_surveyor_attrition_counter
			value > 0
		}
	}
	immediate = {
		mem_surveyor_berserker_mode_attrition_add = {
			AMOUNT = @attrition_yearly_increase
		}
		# log = "Attrition: [This.mem_surveyor_attrition_counter]"
		random_owned_ship = {
			limit = {
				has_ship_flag = mem_surveyor_probe_ship
			}
			mem_surveyor_berserker_mode_attrition_ship_debuff_add = {
				AMOUNT = -5
			}
		}
		country_event = {
			id = mem_surveyor.223
			days = 360
		}
	}
}

# Berserker probe is killed
country_event = {
	id = mem_surveyor.230
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = mem_surveyor_country_red
		FROMFROM = {
			has_ship_flag = mem_surveyor_probe_ship
		}
	}
	immediate = {
		# log = "Berserker Probe is killed by [From.GetName]"
		FROM = {
			save_event_target_as = probe_killers
			set_country_flag = mem_surveyor_probe_killers
			country_event = {
				id = mem_surveyor.233
			}
		}
		FROMFROM.fleet = {
			clear_fleet_actions = this
		}
		every_owned_army = {
			remove_army = yes
		}
		IF = {
			limit = {
				NOT = {
					has_country_flag = mem_surveyor_already_attritioned
				}
			}
			mem_surveyor_create_robotomite_countries = yes
			every_playable_country = {
				limit = {
					NOT = {
						is_same_value = FROM
					}
					has_communications = ROOT
				}
				country_event = {
					id = mem_surveyor.231
				}
				# Tell everyone what happened
			}
		}
		ELSE = {
			every_playable_country = {
				limit = {
					NOT = {
						is_same_value = FROM
					}
					has_communications = ROOT
				}
				country_event = {
					id = mem_surveyor.232
				}
				# Tell everyone probe is dead, but no mention of attrition
			}
		}
		random_country = {
			limit = {
				is_country_type = mem_surveyor_avengers
			}
			country_event = {
				id = mem_surveyor.248
				days = 7
			}
		}
		random_country = {
			limit = {
				is_country_type = mem_surveyor_titanic_effort
			}
			country_event = {
				id = mem_surveyor.269
				days = 7
			}
		}
		destroy_country = yes
	}
}

# Inform player of probe being destroyed + robotomites
country_event = {
	id = mem_surveyor.231
	title = mem_surveyor.231.name
	desc = {
		text = mem_surveyor.231.desc
		exclusive_trigger = {
			has_global_flag = mem_surveyor_freebotomite_country_spawned
		}
	}
	desc = {
		text = mem_surveyor.231.desc.no_freebs
		exclusive_trigger = {
			NOT = {
				has_global_flag = mem_surveyor_freebotomite_country_spawned
			}
		}
	}
	desc = {
		text = mem_surveyor.231.desc.no_planet_taken_ever
		exclusive_trigger = {
			NOT = {
				has_global_flag = mem_surveyor_probe_took_a_planet
			}
		}
	}
	is_triggered_only = yes
	picture = GFX_evt_debris
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.231.a
	}
	option = {
		name = mem_surveyor.231.fallen_empire
		exclusive_trigger = {
			event_target:probe_killers = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
					is_guardian_country = yes
					is_country_type = guardian_scavenger_bot
					is_country_type = guardian_elderly_tiyanki
					is_country_type = guardian_hatchling
				}
			}
		}
	}
	option = {
		name = mem_surveyor.231.probe_hunter
		exclusive_trigger = {
			event_target:probe_killers = {
				is_country_type = mem_surveyor_avengers
			}
		}
	}
	option = {
		name = mem_surveyor.231.titan
		exclusive_trigger = {
			event_target:probe_killers = {
				is_country_type = mem_surveyor_titanic_effort
			}
		}
	}
}

# Inform player of probe being destroyed
country_event = {
	id = mem_surveyor.232
	title = mem_surveyor.232.name
	desc = mem_surveyor.232.desc
	is_triggered_only = yes
	picture = GFX_evt_debris
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.232.a
	}
}

# You have killed berserker probe
country_event = {
	id = mem_surveyor.233
	title = mem_surveyor.233.name
	desc = {
		text = mem_surveyor.233.desc
		exclusive_trigger = {
			any_country = {
				has_country_flag = mem_surveyor_freebotomite_country
			}
			NOT = {
				FROM = {
					has_country_flag = mem_surveyor_already_attritioned
				}
			}
		}
	}
	desc = mem_surveyor.233.desc.no_freebs
	desc = {
		text = mem_surveyor.233.desc.no_planet_taken_ever
		exclusive_trigger = {
			NOT = {
				has_global_flag = mem_surveyor_probe_took_a_planet
			}
			NOT = {
				FROM = {
					has_country_flag = mem_surveyor_already_attritioned
				}
			}
		}
	}
	desc = {
		text = mem_surveyor.233.desc.already_attritioned
		exclusive_trigger = {
			FROM = {
				has_country_flag = mem_surveyor_already_attritioned
			}
		}
	}
	is_triggered_only = yes
	picture = GFX_evt_debris
	location = FROMFROMFROM.Solar_System
	show_sound = event_space_battle
	# trigger = {
	#     FROM = {
	#         is_country_type = mem_surveyor_country_red
	#     }
	#     FROMFROMFROM = {
	#         has_ship_flag = mem_surveyor_probe_ship
	#     }
	# }
	after = {
		IF = {
			limit = {
				is_country_type = default
				NOR = {
					has_valid_civic = civic_fanatic_purifiers
					has_valid_civic = civic_hive_devouring_swarm
					has_valid_civic = civic_machine_terminator
					has_valid_civic = civic_machine_assimilator
				}
			}
			custom_tooltip = mem_surveyor.233.tooltip.opinion_increase
			hidden_effect = {
				every_playable_country = {
					limit = {
						has_communications = FROM
						has_communications = ROOT
					}
					add_opinion_modifier = {
						who = root
						modifier = mem_surveyor_destroyed_probe_red
					}
				}
			}
		}
		mem_surveyor_killing_reward = yes
	}
	option = {
		name = mem_surveyor.233.a
	}
}

# Pop event to try and escape
pop_group_event = {
	id = mem_surveyor.234
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# log = "Evaluation for refugees: [This.GetSpeciesName] on [Planet.GetName]"
		IF = {
			limit = {
				is_valid_refugee_pop = yes
			}
			save_event_target_as = refugee_pop			#Must be saved for refugee_pop_effect to work
			mem_surveyor_refugee_pop_effect = yes
		}
		ELSE = {
			# log = "Refugee dead"
			kill_all_pop = yes
		}
	}
}

# Refugees arrive
pop_group_event = {
	id = mem_surveyor.235
	title = mem_surveyor.235.name
	desc = mem_surveyor.235.desc
	is_triggered_only = yes
	picture = GFX_evt_unknown_ships
	location = root.planet
	immediate = {
		# log = "[Planet.GetName] received refugees"
	}
	option = {
		name = mem_surveyor.235.a
	}
}

# Marauders receive event to spawn probe hunters
country_event = {
	id = mem_surveyor.240
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_country_type = dormant_marauders
		NOT = {
			has_global_flag = mem_surveyor_survivor_spawned
		}
		any_system = {
			exists = space_owner
			space_owner = {
				is_same_value = root
			}
		}
		any_country = {
			is_country_type = mem_surveyor_country_red
		}
	}
	immediate = {
		# log = "Spawning hunters"
		random_system = {
			limit = {
				exists = space_owner
				space_owner = {
					is_same_value = root
				}
			}
			# log = "[This.GetName] is the starting system."
			save_event_target_as = starting_system
		}
		set_global_flag = mem_surveyor_survivor_spawned
		create_country = {
			name = "NAME_Probe_Hunters"
			name_list = "PRT1"
			type = mem_surveyor_avengers
			species = event_target:escapee_species
			flag = {
				icon = {
					category = ornate
					file = flag_ornate_21.dds
				}
				background = {
					category = backgrounds
					file = triangle_split.dds
				}
				colors = {
					"red"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				set_graphical_culture = pirate_01
				set_country_flag = mem_surveyor_avengers_country
				randomize_flag_symbol = "domination"
				create_leader = {
					CLASS = commander
					traits = {
						trait = leader_trait_mem_surveyor_avenger
						trait = leader_trait_arrested_development
					}
					skill = 3
					effect = {
						save_global_event_target_as = mem_surveyor_avengers_leader
						set_age = 21
						set_leader_flag = mem_surveyor_avengers_leader
					}
				}
				save_event_target_as = avengers_country
				IF = {
					limit = {
						root = {
							has_country_flag = marauder_1
						}
					}
					set_country_flag = mem_surveyor_avenger_1
				}
				ELSE_IF = {
					limit = {
						root = {
							has_country_flag = marauder_2
						}
					}
					set_country_flag = mem_surveyor_avenger_2
				}
				ELSE = {
					set_country_flag = mem_surveyor_avenger_3
				}
			}
		}
		set_faction_hostility = {
			target = event_target:avengers_country
			set_hostile = no
			set_neutral = yes
			set_friendly = no
		}
		create_fleet = {
			name = "NAME_Probe_Hunters"
			effect = {
				set_owner = event_target:avengers_country
				while = {
					count = 1
					create_ship = {
						name = "NAME_Vindicator"
						design = "NAME_Ancestral_Glory"
						prefix = no
						graphical_culture = "pirate_01"
					}
				}
				while = {
					count = 18
					create_ship = {
						name = random
						design = "NAME_Outrider"
						prefix = no
						graphical_culture = "pirate_01"
					}
				}
				while = {
					count = 12
					create_ship = {
						name = random
						design = "NAME_Lancer"
						prefix = no
						graphical_culture = "pirate_01"
					}
				}
				while = {
					count = 6
					create_ship = {
						name = random
						design = "NAME_Void_Champion"
						prefix = no
						graphical_culture = "pirate_01"
					}
				}
				set_location = event_target:starting_system.star
				set_leader = event_target:mem_surveyor_avengers_leader
				auto_follow_fleet = {
					target = event_target:mem_surveyor_fleet
					attack_fleet = yes
				}
			}
		}
		every_playable_country = {
			limit = {
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.241
			}
		}
	}
}

# Establishing contact with the avengers
country_event = {
	id = mem_surveyor.241
	title = mem_surveyor.241.name
	desc = mem_surveyor.241.desc
	is_triggered_only = yes
	picture = GFX_evt_pirate_armada
	show_sound = event_space_battle
	immediate = {
		establish_communications_no_message = event_target:avengers_country
	}
	option = {
		name = ONSCREEN
		hidden_effect = {
			country_event = {
				id = mem_surveyor.242
			}
		}
	}
}

# Diplomatic event from the avengers
country_event = {
	id = mem_surveyor.242
	title = TRANSMISSION
	desc = {
		# Warriors
		text = mem_surveyor.242.desc.1
		trigger = {
			event_target:avengers_country = {
				has_country_flag = mem_surveyor_avenger_1
			}
		}
	}
	desc = {
		# Dwamaks
		text = mem_surveyor.242.desc.2
		trigger = {
			event_target:avengers_country = {
				has_country_flag = mem_surveyor_avenger_2
			}
		}
	}
	desc = {
		# She of the Void
		text = mem_surveyor.242.desc.3
		trigger = {
			event_target:avengers_country = {
				has_country_flag = mem_surveyor_avenger_3
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:mem_surveyor_avengers_leader
		room = ethic_spaceship_room
	}
	option = {
		name = mem_surveyor.242.a
	}
	option = {
		name = mem_surveyor.242.purifier
		exclusive_trigger = {
			OR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_hive_devouring_swarm
				has_valid_civic = civic_machine_terminator
			}
		}
	}
}

# Custom diplomacy with the avengers
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.243
	title = TRANSMISSION
	# Status update on the probe: It's moving to system
	desc = {
		# Warriors
		text = mem_surveyor.243.desc.1.1
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_1
			}
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target
		}
	}
	desc = {
		# Dwamaks
		text = mem_surveyor.243.desc.1.2
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_2
			}
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target
		}
	}
	desc = {
		# She of the Void
		text = mem_surveyor.243.desc.1.3
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target
		}
	}
	# Status update on probe: It's targeting a planet
	desc = {
		# Warriors
		text = mem_surveyor.243.desc.2.1
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_1
			}
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target_planet
		}
	}
	desc = {
		# Dwamaks
		text = mem_surveyor.243.desc.2.2
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_2
			}
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target_planet
		}
	}
	desc = {
		# She of the Void
		text = mem_surveyor.243.desc.2.3
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target_planet
		}
	}
	# Player is being targeted
	desc = {
		# Warriors
		text = mem_surveyor.243.desc.3.1
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_1
			}
			has_country_flag = mem_surveyor_terrorize_this_country
		}
	}
	desc = {
		# Dwamaks
		text = mem_surveyor.243.desc.3.2
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_2
			}
			has_country_flag = mem_surveyor_terrorize_this_country
		}
	}
	desc = {
		# She of the Void
		text = mem_surveyor.243.desc.3.3
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			has_country_flag = mem_surveyor_terrorize_this_country
		}
	}
	# Probe is idling
	desc = {
		# Warriors
		text = mem_surveyor.243.desc.4.1
		exclusive_trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_1
			}
			OR = {
				NOR = {
					has_country_flag = mem_surveyor_terrorize_this_country
					exists = event_target:next_target
					exists = event_target:next_target_planet
				}
				event_target:mem_surveyor_fleet = {
					is_fleet_idle = yes
				}
			}
		}
	}
	desc = {
		# Dwamaks
		text = mem_surveyor.243.desc.4.2
		exclusive_trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_2
			}
			OR = {
				NOR = {
					has_country_flag = mem_surveyor_terrorize_this_country
					exists = event_target:next_target
					exists = event_target:next_target_planet
				}
				event_target:mem_surveyor_fleet = {
					is_fleet_idle = yes
				}
			}
		}
	}
	desc = {
		# She of the Void
		text = mem_surveyor.243.desc.4.3
		exclusive_trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			OR = {
				NOR = {
					has_country_flag = mem_surveyor_terrorize_this_country
					exists = event_target:next_target
					exists = event_target:next_target_planet
				}
				event_target:mem_surveyor_fleet = {
					is_fleet_idle = yes
				}
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:mem_surveyor_avengers_leader
		room = ethic_spaceship_room
	}
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_avengers
		}
		any_country = {
			is_country_type = mem_surveyor_country_red
			any_owned_ship = {
				is_ship_size = mem_surveyor_primary
			}
		}
		NOT = {
			has_country_flag = mem_surveyor_avengers_diplomacy
		}
		exists = event_target:mem_surveyor_avengers_leader
		NOT = {
			has_country_flag = mem_surveyor_attacked_avengers
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_avengers_diplomacy
		random_system = {
			limit = {
				has_star_flag = mem_surveyor_next_target
			}
			save_event_target_as = next_target
		}
		random_galaxy_planet = {
			limit = {
				has_planet_flag = mem_surveyor_next_target_planet
			}
			save_event_target_as = next_target_planet
		}
	}
	# Talking about duty
	option = {
		name = mem_surveyor.243.1.a
		is_dialog_only = yes
		response_text = mem_surveyor.243.1.a.response
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_1
			}
			NAND = {
				event_target:mem_surveyor_avengers_leader = {
					is_same_species = root
				}
				is_militarist = yes
			}
		}
	}
	# Militarists accuse him of desertion
	option = {
		name = mem_surveyor.243.1.b
		is_dialog_only = yes
		response_text = mem_surveyor.243.1.b.response
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_1
			}
			event_target:mem_surveyor_avengers_leader = {
				is_same_species = root
			}
			OR = {
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_militarist
			}
		}
	}
	# Telling him to stop screeching
	option = {
		name = mem_surveyor.243.2.a
		is_dialog_only = yes
		response_text = mem_surveyor.243.2.a.response
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_2
			}
			# event_target:mem_surveyor_avengers_leader = { is_same_species = root }
		}
	}
	# Generic disapproval of Void worshippers
	option = {
		name = mem_surveyor.243.3.a
		is_dialog_only = yes
		response_text = mem_surveyor.243.3.a.response
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			OR = {
				NOT = {
					event_target:mem_surveyor_avengers_leader = {
						is_same_species = root
					}
				}
				NOR = {
					is_materialist = yes
					is_spiritualist = yes
				}
			}
		}
	}
	# Materialists question his conversion
	option = {
		name = mem_surveyor.243.3.b
		is_dialog_only = yes
		response_text = mem_surveyor.243.3.b.response
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			event_target:mem_surveyor_avengers_leader = {
				is_same_species = root
			}
			OR = {
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_materialist
			}
		}
	}
	# Spiritualist accuse him of heresy
	option = {
		name = mem_surveyor.243.3.c
		is_dialog_only = yes
		response_text = mem_surveyor.243.3.c.response
		trigger = {
			FROM = {
				has_country_flag = mem_surveyor_avenger_3
			}
			event_target:mem_surveyor_avengers_leader = {
				is_same_species = root
			}
			OR = {
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_spiritualist
			}
		}
	}
	option = {
		name = MEM_SURVEYOR_EXIT
		default_hide_option = yes
		remove_country_flag = mem_surveyor_avengers_diplomacy
	}
	option = {
		name = mem_surveyor.242.purifier
		default_hide_option = yes
		remove_country_flag = mem_surveyor_avengers_diplomacy
		exclusive_trigger = {
			OR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_hive_devouring_swarm
				has_valid_civic = civic_machine_terminator
			}
			NOT = {
				event_target:mem_surveyor_avengers_leader = {
					is_same_species = root
				}
			}
		}
	}
}

# The avengers fleet is defeated
country_event = {
	id = mem_surveyor.244
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = mem_surveyor_avengers
	}
	immediate = {
		# log = "[From.GetName] killed avengers."
		FROM = {
			save_event_target_as = avengers_killers
		}
		FROMFROM.solar_system = {
			save_event_target_as = battle_system
		}
		IF = {
			limit = {
				FROM = {
					NOT = {
						is_country_type = mem_surveyor_country_red
					}
				}
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = root
					NOT = {
						is_same_value = FROM
					}
				}
				country_event = {
					id = mem_surveyor.245
				}
			}
		}
		ELSE_IF = {
			limit = {
				FROMFROMFROM = {
					NOT = {
						has_fleet_flag = mem_surveyor_fleet
					}
				}
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = root
				}
				country_event = {
					id = mem_surveyor.246
				}
			}
		}
		ELSE_IF = {
			limit = {
				FROMFROMFROM = {
					any_owned_ship = {
						is_ship_size = mem_surveyor_primary
					}
				}
			}
			while = {
				count = 30
				limit = {
					FROM = {
						check_variable = {
							which = mem_surveyor_attrition_counter
							value > 1
						}
					}
				}
				FROMFROMFROM = {
					random_owned_ship = {
						limit = {
							is_ship_size = mem_surveyor_primary
						}
						#Is ship class
						mem_surveyor_berserker_mode_attrition_ship_debuff_add = {
							AMOUNT = -1
						}
					}
				}
				FROM = {
					mem_surveyor_berserker_mode_attrition_add = {
						AMOUNT = -1
					}
					# log = "Attrition: [This.mem_surveyor_attrition_counter]"
				}
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = root
				}
				country_event = {
					id = mem_surveyor.247
				}
			}
		}
	}
}

# Inform player that avengers are killed by 3rd party
country_event = {
	id = mem_surveyor.245
	title = mem_surveyor.245.name
	desc = mem_surveyor.245.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.245.a
	}
}

# Inform player that avengers are killed by the Aux Probe Fleet
country_event = {
	id = mem_surveyor.246
	title = mem_surveyor.246.name
	desc = mem_surveyor.246.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.246.a
	}
}

# Inform player that avengers are killed by the probe itself
country_event = {
	id = mem_surveyor.247
	title = mem_surveyor.247.name
	desc = mem_surveyor.247.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.247.a
	}
}

# Disband avengers
country_event = {
	id = mem_surveyor.248
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.249
			}
		}
		random_owned_fleet = {
			delete_fleet = this
		}
	}
}

# Inform player that avengers disbanded
country_event = {
	id = mem_surveyor.249
	title = mem_surveyor.249.name
	desc = mem_surveyor.249.desc
	is_triggered_only = yes
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	option = {
		name = OK
	}
}

# Player destroyed avengers
country_event = {
	id = mem_surveyor.250
	title = mem_surveyor.250.name
	desc = mem_surveyor.250.desc
	is_triggered_only = yes
	show_sound = event_space_battle
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_avengers
		}
	}
	picture = GFX_evt_mem_space_battle
	option = {
		name = mem_surveyor.250.a
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
	}
}

# Player enters combat with the avengers
country_event = {
	id = mem_surveyor.251
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_avengers
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_attacked_avengers
	}
}

# Unable to contact avengers
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.252
	title = mem_surveyor.252.name
	desc = mem_surveyor.252.desc
	is_triggered_only = yes
	picture = GFX_evt_unknown_ships
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_avengers
		}
		NAND = {
			any_country = {
				is_country_type = mem_surveyor_country_red
				any_owned_ship = {
					is_ship_size = mem_surveyor_primary
				}
			}
			exists = event_target:mem_surveyor_avengers_leader
			NOT = {
				has_country_flag = mem_surveyor_attacked_avengers
			}
		}
		NOT = {
			has_country_flag = mem_surveyor_avengers_diplomacy
		}
	}
	option = {
		name = OK
	}
}

# Somehow, leader dies
country_event = {
	id = mem_surveyor.253
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			has_leader_flag = mem_surveyor_avengers_leader
		}
	}
	immediate = {
		country_event = {
			id = mem_surveyor.254
			days = 5
		}
	}
}

# Disband fleet when leader dies
country_event = {
	id = mem_surveyor.254
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.255
			}
		}
		destroy_country = yes
	}
}

# Inform player that avengers disbanded after leader's death
country_event = {
	id = mem_surveyor.255
	title = mem_surveyor.255.name
	desc = mem_surveyor.255.desc
	is_triggered_only = yes
	picture = GFX_evt_space_funeral
	show_sound = event_life_support_fail
	option = {
		name = OK
	}
}

# Country spots avengers they know nothing about
country_event = {
	id = mem_surveyor.256
	title = mem_surveyor.256.name
	desc = mem_surveyor.256.desc
	is_triggered_only = yes
	picture = GFX_evt_unknown_ships
	show_sound = event_radio_chatter
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_avengers
		}
	}
	immediate = {
		FROM = {
			save_event_target_as = avengers_country
			country_event = {
				id = mem_surveyor.257
				days = 30
			}
		}
	}
	option = {
		name = INTERESTING
	}
}

# Avengers bounce back to player
country_event = {
	id = mem_surveyor.257
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
	}
	immediate = {
		FROM = {
			country_event = {
				id = mem_surveyor.258
			}
		}
	}
}

# Contact with avengers
country_event = {
	id = mem_surveyor.258
	title = mem_surveyor.258.name
	desc = mem_surveyor.258.desc
	is_triggered_only = yes
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	immediate = {
		establish_communications_no_message = event_target:avengers_country
	}
	option = {
		name = ONSCREEN
		hidden_effect = {
			country_event = {
				id = mem_surveyor.242
			}
		}
	}
}

# Curators pop up offering data
country_event = {
	id = mem_surveyor.260
	title = TRANSMISSION
	desc = mem_surveyor.260.desc
	diplomatic = yes
	is_triggered_only = yes
	custom_gui = "enclave_curator_window"
	custom_gui_option = "enclave_curator_option"
	picture_event_data = {
		portrait = event_target:curators
		room = enclave_curator_room
	}
	trigger = {
		any_country = {
			is_country_type = mem_surveyor_country_red
			NOT = {
				has_country_flag = mem_surveyor_already_attritioned
			}
		}
		any_country = {
			is_country_type = enclave
			has_country_flag = curator_enclave_country
			has_communications = root
		}
		NOR = {
			has_country_flag = attacked_curators
			is_homicidal = yes
		}
	}
	immediate = {
		# set_country_flag = curator_enclave_diplomacy_engaged # Don't think it's needed, although if it pops up during another conversation - might be weird
		set_country_flag = mem_surveyor_curator_offer
		random_country = {
			limit = {
				is_country_type = enclave
				has_country_flag = curator_enclave_country
				has_communications = root
			}
			save_event_target_as = curators
		}
	}
	option = {
		name = mem_surveyor.260.a
		custom_gui = "enclave_curator_option"
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 2500
			}
		}
		ai_chance = {
			factor = 3
		}
		add_modifier = {
			modifier = mem_surveyor_how_to_kill
			days = -1
		}
		add_resource = {
			energy = -2500
		}
	}
	option = {
		name = mem_surveyor.260.b
		custom_gui = "enclave_curator_option"
		is_dialog_only = yes
		response_text = mem_surveyor.260.b.response
	}
	option = {
		name = mem_surveyor.260.c
		custom_gui = "enclave_curator_option"
		default_hide_option = yes
	}
}

# When enclave is destroyed by the probe, trigger Titanic Effort
country_event = {
	id = mem_surveyor.261
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = enclave
		FROM = {
			is_country_type = mem_surveyor_country_red
		}
	}
	immediate = {
		random_country = {
			limit = {
				has_country_flag = trader_enclave_country
				NOT = {
					is_same_value = root
				}
			}
			random_list = {
				66 = {
				}
				33 = {
					# Change weights for something better
					# log = "Triggered Titanic Effort for [This.GetName]"
					country_event = {
						id = mem_surveyor.262
						days = 360
					}
				}
			}
		}
	}
}

# Titanic Effort
country_event = {
	id = mem_surveyor.262
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		NOT = {
			has_global_flag = mem_surveyor_titanic_effort
		}
		any_country = {
			is_country_type = mem_surveyor_country_red
			NOT = {
				has_country_flag = mem_surveyor_out_of_comission
			}
		}
	}
	immediate = {
		set_global_flag = mem_surveyor_titanic_effort
		switch = {
			trigger = has_country_flag
			trader_enclave_country_1 = {
				# log = "Xura Sponsored Titan"
				set_global_flag = mem_surveyor_xura_sponsored_titan
			}
			trader_enclave_country_2 = {
				# log = "Rigga Sponsored Titan"
				set_global_flag = mem_surveyor_riggan_sponsored_titan
			}
			trader_enclave_country_3 = {
				# log = "Muutra Sponsored Titan"
				set_global_flag = mem_surveyor_muutra_sponsored_titan
			}
		}
		random_owned_ship = {
			save_event_target_as = spawn_site
		}
		random_country = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = enclave
					is_country_type = dormant_marauders
				}
				NOT = {
					has_ethic = ethic_gestalt_consciousness
				}
			}
			save_event_target_as = captain_origin
		}
		create_country = {
			name = "NAME_Titanic_Effort"
			species = event_target:captain_origin
			type = mem_surveyor_titanic_effort
			flag = {
				icon = {
					category = ornate
					file = flag_ornate_21.dds
				}
				background = {
					category = backgrounds
					file = triangle_split.dds
				}
				colors = {
					"blue"
					"orange"
					"null"
					"null"
				}
			}
			effect = {
				save_event_target_as = titanic_country
				randomize_flag_symbol = "ornate"
				give_technology = {
					tech = tech_mass_drivers_5
				}
				give_technology = {
					tech = tech_lasers_5
				}
				give_technology = {
					tech = tech_titans
				}
				give_technology = {
					tech = tech_shields_4
				}
				give_technology = {
					tech = tech_ship_armor_4
				}
				give_technology = {
					tech = tech_regenerative_hull_tissue
				}
				give_technology = {
					tech = tech_zero_point_power
				}
				give_technology = {
					tech = tech_thrusters_4
				}
				give_technology = {
					tech = tech_sensors_3
				}
				give_technology = {
					tech = tech_combat_computers_3
				}
				give_technology = {
					tech = tech_hyper_drive_3
				}
				create_leader = {
					CLASS = commander
					skill = 5
					traits = {
						trait = leader_trait_mem_surveyor_mercenary
					}
					effect = {
						set_leader_flag = mem_surveyor_mercenary_leader
						save_global_event_target_as = mem_surveyor_mercenary_leader
					}
				}
			}
		}
		create_fleet = {
			name = "Titan Fleet"
			settings = {
				spawn_debris = no
			}
			effect = {
				set_owner = event_target:titanic_country
				set_location = event_target:spawn_site
				create_ship = {
					name = ""
					prefix = no
					random_existing_design = titan
					effect = {
						add_modifier = {
							modifier = mem_surveyor_titanic_effort
							days = -1
						}
						IF = {
							limit = {
								has_global_flag = mem_surveyor_xura_sponsored_titan
							}
							set_name = "XCS Princess Xuri"
						}
						ELSE_IF = {
							limit = {
								has_global_flag = mem_surveyor_riggan_sponsored_titan
							}
							set_name = "RCES Spice Marine"
						}
						ELSE = {
							set_name = "MMS Crystal Clear"
						}
						save_event_target_as = the_ship
					}
				}
				set_leader = event_target:mem_surveyor_mercenary_leader
				set_name = event_target:the_ship
				auto_follow_fleet = {
					target = event_target:mem_surveyor_fleet
					attack_fleet = yes
				}
			}
		}
		event_target:titanic_country = {
			set_name = event_target:the_ship
		}
		every_playable_country = {
			limit = {
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.263
			}
		}
	}
}

# Player is notified about titanic effort
country_event = {
	id = mem_surveyor.263
	title = mem_surveyor.263.name
	desc = mem_surveyor.263.desc
	is_triggered_only = yes
	picture = GFX_evt_automated_dreadnought
	location = event_target:the_ship
	show_sound = event_ship_thrusters
	immediate = {
		establish_communications_no_message = event_target:titanic_country
	}
	option = {
		name = mem_surveyor.263
	}
}

# Custom diplomacy with Titan
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.264
	title = TRANSMISSION
	desc = {
		text = mem_surveyor.264.desc.1
		trigger = {
			has_country_flag = mem_surveyor_terrorize_this_country
		}
	}
	desc = {
		text = mem_surveyor.264.desc.2
		trigger = {
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target
		}
	}
	desc = {
		text = mem_surveyor.264.desc.3
		trigger = {
			NOT = {
				has_country_flag = mem_surveyor_terrorize_this_country
			}
			exists = event_target:next_target_planet
		}
	}
	desc = {
		text = mem_surveyor.264.desc.4
		exclusive_trigger = {
			OR = {
				NOR = {
					has_country_flag = mem_surveyor_terrorize_this_country
					exists = event_target:next_target
					exists = event_target:next_target_planet
				}
				event_target:mem_surveyor_fleet = {
					is_fleet_idle = yes
				}
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:mem_surveyor_mercenary_leader
		room = ethic_spaceship_room
	}
	trigger = {
		NOT = {
			has_country_flag = mem_surveyor_mercenary_diplomacy
		}
		FROM = {
			is_country_type = mem_surveyor_titanic_effort
		}
		exists = event_target:mem_surveyor_mercenary_leader
		any_country = {
			is_country_type = mem_surveyor_country_red
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_mercenary_diplomacy
		random_system = {
			limit = {
				has_star_flag = mem_surveyor_next_target
			}
			save_event_target_as = next_target
		}
		random_galaxy_planet = {
			limit = {
				has_planet_flag = mem_surveyor_next_target_planet
			}
			save_event_target_as = next_target_planet
		}
	}
	option = {
		name = MEM_SURVEYOR_EXIT
		default_hide_option = yes
		remove_country_flag = mem_surveyor_mercenary_diplomacy
	}
	option = {
		name = mem_surveyor.242.purifier
		default_hide_option = yes
		remove_country_flag = mem_surveyor_mercenary_diplomacy
		exclusive_trigger = {
			OR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_hive_devouring_swarm
				has_valid_civic = civic_machine_terminator
			}
			NOT = {
				event_target:mem_surveyor_avengers_leader = {
					is_same_species = root
				}
			}
		}
	}
}

# Mercs are killed
country_event = {
	id = mem_surveyor.265
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = mem_surveyor_titanic_effort
	}
	immediate = {
		# log = "[From.GetName] killed mercs."
		FROM = {
			save_event_target_as = mercs_killers
		}
		FROMFROM.solar_system = {
			save_event_target_as = battle_system
		}
		IF = {
			limit = {
				FROM = {
					NOT = {
						is_country_type = mem_surveyor_country_red
					}
				}
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = root
					NOT = {
						is_same_value = FROM
					}
				}
				country_event = {
					id = mem_surveyor.266
				}
			}
		}
		ELSE_IF = {
			limit = {
				FROMFROMFROM = {
					NOT = {
						has_fleet_flag = mem_surveyor_fleet
					}
				}
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = root
				}
				country_event = {
					id = mem_surveyor.267
				}
			}
		}
		ELSE_IF = {
			limit = {
				FROMFROMFROM = {
					any_owned_ship = {
						is_ship_size = mem_surveyor_primary
					}
				}
			}
			while = {
				count = 30
				limit = {
					FROM = {
						check_variable = {
							which = mem_surveyor_attrition_counter
							value > 1
						}
					}
				}
				FROMFROMFROM = {
					random_owned_ship = {
						limit = {
							is_ship_size = mem_surveyor_primary
						}
						#Is ship class
						mem_surveyor_berserker_mode_attrition_ship_debuff_add = {
							AMOUNT = -1
						}
					}
				}
				FROM = {
					mem_surveyor_berserker_mode_attrition_add = {
						AMOUNT = -1
					}
					# log = "Attrition: [This.mem_surveyor_attrition_counter]"
				}
			}
			every_playable_country = {
				limit = {
					is_ai = no
					has_communications = root
				}
				country_event = {
					id = mem_surveyor.268
				}
			}
		}
	}
}

# Inform player that mercs are killed by 3rd party
country_event = {
	id = mem_surveyor.266
	title = mem_surveyor.266.name
	desc = mem_surveyor.266.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.266.a
	}
}

# Inform player that mercs are killed by the Aux Probe Fleet
country_event = {
	id = mem_surveyor.267
	title = mem_surveyor.267.name
	desc = mem_surveyor.267.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.267.a
	}
}

# Inform player that mercs are killed by the probe itself
country_event = {
	id = mem_surveyor.268
	title = mem_surveyor.268.name
	desc = mem_surveyor.268.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.268.a
	}
}

# Disband titan
country_event = {
	id = mem_surveyor.269
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.270
			}
		}
	}
}

# Player is notified titan was disbanded
country_event = {
	id = mem_surveyor.270
	title = mem_surveyor.270.name
	desc = mem_surveyor.270.desc
	is_triggered_only = yes
	picture = GFX_evt_automated_dreadnought
	show_sound = event_radio_chatter
	option = {
		name = mem_surveyor.270.a
	}
}

# Player destroyed mercs
country_event = {
	id = mem_surveyor.271
	title = mem_surveyor.271.name
	desc = mem_surveyor.271.desc
	is_triggered_only = yes
	trigger = {
		FROM = {
			is_country_type = mem_surveyor_titanic_effort
		}
	}
	picture = GFX_evt_mem_space_battle
	show_sound = event_space_battle
	option = {
		name = mem_surveyor.271.a
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
	}
}

# Quietly replace titan's captain if he dies
country_event = {
	id = mem_surveyor.272
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			has_leader_flag = mem_surveyor_mercenary_leader
		}
	}
	immediate = {
		random_country = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = enclave
					is_country_type = dormant_marauders
					is_country_type = mem_surveyor_titanic_effort
				}
				NOT = {
					has_ethic = ethic_gestalt_consciousness
				}
			}
			save_event_target_as = captain_origin
		}
		create_leader = {
			CLASS = commander
			species = event_target:captain_origin
			skill = 5
			traits = {
				trait = leader_trait_mem_surveyor_mercenary
			}
			effect = {
				set_leader_flag = mem_surveyor_mercenary_leader
				save_global_event_target_as = mem_surveyor_mercenary_leader
			}
		}
		random_owned_fleet = {
			set_leader = last_created_leader
		}
	}
}

# Can't communicate with them
# on_custom_diplomacy
country_event = {
	id = mem_surveyor.273
	title = mem_surveyor.273.name
	desc = mem_surveyor.273.desc
	is_triggered_only = yes
	picture = GFX_evt_automated_dreadnought
	trigger = {
		NOT = {
			has_country_flag = mem_surveyor_mercenary_diplomacy
		}
		FROM = {
			is_country_type = mem_surveyor_titanic_effort
		}
		NAND = {
			exists = event_target:mem_surveyor_mercenary_leader
			any_country = {
				is_country_type = mem_surveyor_country_red
			}
		}
	}
	option = {
		name = OK
	}
}

########################
### ALKREE HOMEWORLD ###
########################
# Anomaly resolution
ship_event = {
	id = mem_surveyor.300
	title = mem_surveyor.300.name
	desc = mem_surveyor.300.desc
	is_triggered_only = yes
	picture = GFX_evt_archaeological_dig
	location = FROM
	show_sound = event_mystic_reveal
	immediate = {
		FROM = {
			add_modifier = {
				modifier = mem_surveyor_alkree_homeworld
				days = -1
			}
			set_deposit = d_society_5
			add_deposit = d_physics_4
			add_deposit = d_engineering_4
		}
	}
	option = {
		name = FASCINATING
		custom_tooltip = mem_surveyor.300.tooltip
		leader = {
			add_experience = 200
			IF = {
				limit = {
					NOR = {
						has_trait = leader_trait_meticulous
						has_trait = leader_trait_meticulous_2
					}
				}
				add_trait = {
					trait = leader_trait_meticulous
				}
			}
		}
	}
	after = {
		hidden_effect = {
			owner = {
				country_event = {
					id = mem_surveyor.301
					scopes = {
						from = FROM
					}
					days = 3600
				}
			}
		}
	}
}

# Bounce off planet to give player valuable info
# Should be little more restrictive but still work as intended
country_event = {
	id = mem_surveyor.301
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = from
		from.owner = {
			is_same_value = root
		}
		from = {
			has_research_station = yes
		}
	}
	immediate = {
		country_event = {
			id = mem_surveyor.302
		}
	}
}

# Receive country event telling story
country_event = {
	id = mem_surveyor.302
	title = mem_surveyor.302.name
	desc = mem_surveyor.302.desc
	is_triggered_only = yes
	picture = GFX_evt_dead_city
	location = FROM
	show_sound = event_mystic_reveal
	option = {
		name = FASCINATING
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier2researchreward
			min = @tier2researchmin
			max = @tier2researchmax
		}
	}
	after = {
		hidden_effect = {
			country_event = {
				id = mem_surveyor.303
				days = 120
				random = 180
			}
		}
	}
}

# Country cross-references surveyor with the ruins
country_event = {
	id = mem_surveyor.303
	title = mem_surveyor.303.name
	desc = mem_surveyor.303.desc
	is_triggered_only = yes
	picture = GFX_evt_dead_city
	location = event_target:mem_surveyor_the_planet
	show_sound = event_mystic_reveal
	trigger = {
		has_country_flag = mem_surveyor_opened_comms
		has_country_flag = mem_surveyor_studied_ruins
		NOT = {
			has_country_flag = mem_surveyor_found_alkree_homeworld
		}
		any_system = {
			has_star_flag = mem_surveyor_home_system
			any_system_planet = {
				has_planet_flag = mem_surveyor_alkree_homeworld
			}
		}
	}
	immediate = {
		set_country_flag = mem_surveyor_found_alkree_homeworld
		random_galaxy_planet = {
			limit = {
				has_planet_flag = mem_surveyor_alkree_homeworld
			}
			save_event_target_as = mem_surveyor_the_planet
		}
	}
	after = {
		add_monthly_resource_mult = {
			resource = unity
			value = @tier3unityreward
			min = @tier3unitymin
			max = @tier3unitymax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
	option = {
		name = mem_surveyor.303.a
		custom_tooltip = mem_surveyor.303.a.tooltip
		trigger = {
			NOT = {
				has_global_flag = mem_surveyor_went_berserk
			}
			any_country = {
				is_country_type = mem_surveyor_country_green
			}
		}
	}
	option = {
		name = mem_surveyor.303.b
		trigger = {
			NOR = {
				has_global_flag = mem_surveyor_went_berserk
				any_country = {
					is_country_type = mem_surveyor_country_green
				}
				has_country_flag = mem_surveyor_probe_killers
			}
		}
	}
	option = {
		name = mem_surveyor.303.c
		trigger = {
			NOT = {
				has_global_flag = mem_surveyor_went_berserk
			}
			has_country_flag = mem_surveyor_probe_killers
		}
	}
	option = {
		name = mem_surveyor.303.d
		custom_tooltip = mem_surveyor.303.d.tooltip
		trigger = {
			has_global_flag = mem_surveyor_went_berserk
			any_country = {
				is_country_type = mem_surveyor_country_red
			}
		}
	}
	option = {
		name = mem_surveyor.303.e
		trigger = {
			has_global_flag = mem_surveyor_went_berserk
			NOR = {
				any_country = {
					is_country_type = mem_surveyor_country_red
				}
				has_country_flag = mem_surveyor_probe_killers
			}
		}
	}
	option = {
		name = mem_surveyor.303.f
		trigger = {
			has_global_flag = mem_surveyor_went_berserk
			has_country_flag = mem_surveyor_probe_killers
		}
	}
}

#Personality matrix activation effect
country_event = {
	id = mem_surveyor.400
	title = mem_surveyor.400.name
	desc = mem_surveyor.400.desc
	is_triggered_only = yes
	picture = GFX_evt_mem_strange_apparatus
	immediate = {
		IF = {
			limit = {
				NOT = {
					exists = event_target:mem_surveyor_ceaseless_species
				}
			}
			create_species = {
				name = "Personality Construct"
				class = AI
				namelist = human1
				traits = {
					trait = trait_machine_unit
				}
			}
			last_created_species = {
				save_event_target_as = mem_surveyor_ceaseless_species
			}
		}
	}
	option = {
		name = mem_surveyor.400.a
		custom_tooltip = mem_surveyor.400.a.tooltip
		hidden_effect = {
			create_leader = {
				name = "Ceaseless Gaze"
				species = event_target:mem_surveyor_ceaseless_species
				class = scientist
				skill = 5
				effect = {
					set_age = 1
					set_leader_flag = mem_surveyor_summoned_leader
				}
			}
		}
	}
	option = {
		name = mem_surveyor.400.b
		custom_tooltip = mem_surveyor.400.b.tooltip
		hidden_effect = {
			create_leader = {
				name = "Ceaseless Gaze"
				species = event_target:mem_surveyor_ceaseless_species
				CLASS = commander
				skill = 5
				effect = {
					set_age = 1
					set_leader_flag = mem_surveyor_summoned_leader
				}
			}
		}
		ai_chance = {
			factor = 1000
		}
	}
}

########### cpoied from _2

# Origin event
country_event = {
    id = mem_surveyor.500
    hide_window = yes
    is_triggered_only = yes
	
	trigger = {
		has_origin = origin_mem_ceaseless_gaze
	}

	immediate = {
		log = "[This.GetName] has Surveyor Origin" 
		set_global_flag = mem_surveyor_origin_happened
		capital_scope = {
			random_system = {
				limit = {
					distance = {
						source = prev
						min_jumps >= 1
						max_jumps <= 5
					}
				}
				random_system_planet = {
					mem_surveyor_create_the_probe = yes
				}
			}
		}
		event_target:mem_surveyor_fleet = {
			fleet_event = { id = mem_surveyor.2 }
		}
		set_country_flag = mem_surveyor_spotted_probe
		set_country_flag = mem_surveyor_opened_comms
		establish_communications_no_message = event_target:mem_surveyor_country
	}
}

#First contact I guess?
first_contact_event = {
	id = mem_surveyor.600
	hide_window = yes
	
	is_triggered_only = yes
	first_contact = yes

	trigger = {
		owner = {
			NOT = {
				has_origin = origin_mem_ceaseless_gaze
			}			
		}
		
		contact_country = {
			is_country_type = mem_surveyor_country_green
		}
	}

	immediate = {
		set_first_contact_stage = mem_surveyor_stage_1
	}
}

# The stage?
first_contact_event = {
	id = mem_surveyor.601
	title = mem_surveyor.601.name
	desc = mem_surveyor.601.desc

	show_sound = event_alien_signal
	picture = GFX_evt_unidentified_ship

	is_triggered_only = yes
	first_contact = yes

	trigger = {
		owner = {
			NOT = {
				has_origin = origin_mem_ceaseless_gaze
			}			
		}
		
		contact_country = {
			is_country_type = mem_surveyor_country_green
		}
	}

	immediate = {
		set_site_progress_locked = yes
	}

	after = {
		set_site_progress_locked = no
	}

	option = {
		name = PROCEED
		set_first_contact_stage = mem_surveyor_stage_2
	}
}

# Contact established
first_contact_event = {
	id = mem_surveyor.602
	title = mem_surveyor.602.name
	desc = mem_surveyor.602.desc

	show_sound = event_alien_signal
	picture = GFX_evt_unidentified_ship

	is_triggered_only = yes
	first_contact = yes

	trigger = {
		owner = {
			NOT = {
				has_origin = origin_mem_ceaseless_gaze
			}			
		}
		
		contact_country = {
			is_country_type = mem_surveyor_country_green
		}
	}

	immediate = {
		set_site_progress_locked = yes
	}

	after = {
		set_site_progress_locked = no
		finish_first_contact_effect = yes
		hidden_effect = {
			owner = {
				set_country_flag = mem_surveyor_opened_comms
				set_country_flag = mem_surveyor_solved_fc
				establish_communications_no_message = root.contact_country
				country_event = { id = mem_surveyor.303 days = 120 random = 180 }
				country_event = { id = mem_surveyor.5 }
			}
		}
	}

	option = {
		name = ON_SCREEN
	}
}

############ new events

# Probe decides to flip but good
country_event = {
	id = mem_surveyor.1001
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# any_owned_fleet = {
		# 	exists = solar_system
		# 	OR = {
		# 		NOT = {
		# 			exists = space_owner
		# 		}
		# 		space_owner = {
		# 			is_ai = yes
		# 		}
		# 	}
		# }
	}
	immediate = {
		every_system = {
			remove_star_flag = mem_surveyor_next_target
		}
		#set_country_flag = mem_surveyor_will_go_berserk
		#set_country_type = mem_surveyor_country_red
		#set_global_flag = mem_surveyor_went_berserk
		set_name = "NAME_MEM_Surveyor_Sentinel"
		change_country_flag = {
			icon = {
				category = "mem"
				file = "mem_radar_2.dds"
			}
			background = {
				category = "backgrounds"
				file = "circle.dds"
			}
			colors = {
				"green"
				"black"
				"null"
				"null"
			}
		}
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = {
				id = mem_surveyor.1005
			}
			#Players get notified
		}
		# every_country = {
		# 	limit = {
		# 		is_fallen_empire = yes
		# 	}
		# 	set_faction_hostility = {
		# 		set_neutral = yes
		# 		set_hostile = no
		# 		set_friendly = no
		# 	}
		# }
		# TODO find out how to send probe somehwere remote
		random_owned_fleet = {
			set_name = "NAME_MEM_Surveyor_Sentinel"
			#set_mia = mia_emergency_ftl # this does not work
			delete_fleet = this
			# queue_actions = {
			# 	wait = {
			# 		duration = 10
			# 	}
			# 	effect = {
			# 		id = mem_surveyor.sentinel.trigger.init
			# 		# fleet_event = {
			# 		# 	id = mem_surveyor.210
			# 		# }
			# 	}
			# }
		}
		every_system = {
			remove_star_flag = mem_surveyor_next_target
		}
		country_event = {
			id = mem_surveyor.1010
			days = 7200
			random = 1800
		}
	}
}

# Notify player 
country_event = {
	id = mem_surveyor.1005
	title = mem_surveyor.1005.title
	desc = mem_surveyor.1005.desc
	is_triggered_only = yes
	picture = GFX_evt_ship_travel
	#diplomatic = yes
	option = {
		name = FASCINATING
	}
	# option = {
	# 	name = mem_surveyor.1005.ega
	# 	trigger = {
	# 		OR = {
	# 			has_ethic = ethic_egalitarian
	# 			has_ethic = ethic_fanatic_egalitarian
	# 		}
	# 	}
	# }
	# option = {
	# 	name = mem_surveyor.1005.aut
	# 	trigger = {
	# 		OR = {
	# 			has_ethic = ethic_authoritarian
	# 			has_ethic = ethic_fanatic_authoritarian
	# 		}
	# 	}
	# }
	option = {
		name = mem_surveyor.1005.mat
		trigger = {
			OR = {
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
			}
		}
	}
	option = {
		name = mem_surveyor.1005.spi
		trigger = {
			OR = {
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
			}
		}
	}
	option = {
		name = mem_surveyor.1005.pac
		trigger = {
			OR = {
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
			}
		}
	}
	option = {
		name = mem_surveyor.1005.mil
		trigger = {
			OR = {
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
			}
		}
	}
	option = {
		name = mem_surveyor.1005.phile
		trigger = {
			OR = {
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
	}
	option = {
		name = mem_surveyor.1005.phobe
		trigger = {
			OR = {
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
	option = {
		name = ACKNOWLEDGED
		trigger = {
			has_authority = auth_hive_mind
		}
	}
	option = {
		name = ACKNOWLEDGED
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	option = {
		name = mem_surveyor.1005.purifier
		exclusive_trigger = {
			has_valid_civic = civic_fanatic_purifiers
		}
	}
	option = {
		name = mem_surveyor.1005.terminator
		exclusive_trigger = {
			has_valid_civic = civic_machine_terminator
		}
	}
	option = {
		name = mem_surveyor.1005.swarm
		exclusive_trigger = {
			has_valid_civic = civic_hive_devouring_swarm
		}
	}
	after = {
		add_monthly_resource_mult = {
			resource = physics_research
			value = 6
		}
	}
}

# Setup probe country and destroy old event country
country_event = {
	id = mem_surveyor.1010
	hide_window = yes
	is_triggered_only = yes
	#diplomatic = yes
	immediate = {
		#no_scope = {
		create_species = {
			name = Robotomite
			adjective = Robotomite
			plural = Robotomites
			class = FUN
			portrait = fun13
			homeworld = this
			# pops_can_be_colonizers = no #Regular robotomites should not do this, but still maintain functional
			# pops_can_reproduce = no
			# pops_can_migrate = no
			traits = {
				trait = trait_cybernetic
				#trait = trait_nerve_stapled
				trait = trait_mem_surveyor_robotomites
				trait = trait_venerable
				trait = trait_repugnant
				trait = trait_slow_learners
			}
			effect = {
				save_global_event_target_as = mem_surveyor_robotomite_species
			}
		}

		create_country = {
			name = "Sentinel Probe"
			type = default
			species = last_created_species
			flag = {
				icon = {
					category = "mem"
					file = "mem_radar_2.dds"
				}
				background = {
					category = "backgrounds"
					file = "circle.dds"
				}
				colors = {
					"blue"
					"green"
					"null"
					"null"
				}
			}
			ethos = {
				ethic = ethic_fanatic_pacifist
				ethic = ethic_xenophile
			}
			ignore_initial_colony_error = yes
			origin = origin_mem_surveyor_sentinel
			authority = auth_oligarchic
			effect = {
				save_global_event_target_as = mem_surveyor_country
				set_country_flag = mem_surveyor_country
				set_country_flag = mem_surveyor_country_sentinel_personality
				add_modifier = {
					modifier = mem_surveyor_probe_bonus
					days = -1
				}
				
				set_country_type = default
				add_resource = {
					alloys = 5000
					minerals = 5000
					food = 5000
					energy = 10000
					unity = 55000
				}
				add_tradition = tr_unyielding_adopt
				add_tradition = tr_unyielding_bulwark_of_harmony
				add_tradition = tr_unyielding_defensive_zeal
				add_tradition = tr_unyielding_fortress_doctrine
				add_tradition = tr_unyielding_never_surrender
				add_tradition = tr_unyielding_resistance_is_frugal
				add_tradition = tr_unyielding_finish
				give_technology = {
					tech = tech_integrated_cybernetics
				}
				add_tradition = tr_cybernetics_adopt
				add_tradition = tr_cybernetics_augmentation_overload
				add_tradition = tr_cybernetics_integrated_anatomy
				add_tradition = tr_cybernetics_metabolic_reprocessing
				add_tradition = tr_cybernetics_modular_cybernetics
				add_tradition = tr_cybernetics_transubstantiation_synthesis
				add_tradition = tr_cybernetics_finish
				add_modifier = {
					modifier = mem_surveyor_defender
				}
				set_graphical_culture = fungoid_01
				unlock_council_slots = 4
				add_awakened_fallen_empire_resources = yes
				set_ai_personality = mem_surveyor_country_yellow_personality
				ruler = {
					set_immortal = yes
					change_leader_class = scientist
					change_leader_portrait = mem_surveyor_yellow
					add_skill = 10
					set_name = "Sentinel Probe"
				}
				create_leader = {
					class = scientist
				}
				every_country = {
					establish_communications_no_message = prev
				}
				# lets punish players for tech rushing
				random_country = {
					limit = {
						is_ai = no
					}
					save_event_target_as = mem_surveyor_is_player_country
				}
				if = {
					limit = {
						exists = event_target:mem_surveyor_is_player_country
					}
					copy_techs_from = {
						target = event_target:mem_surveyor_is_player_country
					}
				}
			}
		}
		#civics = random
		random_system = {
			limit = {
				# no owner or ai
				OR = {
					AND = {
						exists = owner
						owner = {
							is_ai = yes
						}
					}
					NOT = {
						exists = owner
					}
				}
			}
			spawn_system = {
				initializer = mem_surveyor_sentinel_home_system
				max_distance = 40
				min_distance = 10
			}
			last_created_system = {
				create_starbase = {
					size = starbase_citadel
					effect = {
						set_owner = event_target:mem_surveyor_country
					}
				}
				save_event_target_as = mem_surveyor_sentinel_home_system
				random_system_planet = {
					limit = {
						is_planet_class = pc_machine
					}
					create_colony = {
						owner = event_target:mem_surveyor_country
					}
					set_name = "NAME_mem_surveyor_sentinel_home_system_planet"
					clear_blockers = yes
					while = {
						count = 10
						add_district = district_generator_uncapped
						add_district = district_mining_uncapped
						add_district = district_city
					}
					# lets go wild
					while = {
						count = 65
						create_pop_group = {
							species = event_target:mem_surveyor_robotomite_species
						}
					}
				}
			}
		}
		every_country = {
			limit = {
				is_ai = no
			}
			country_event = {
				id = mem_surveyor.1015
			}
		}
		destroy_country = yes
	}
}

# Diplomatic event to notify player, probe returned
country_event = {
	id = mem_surveyor.1015
	title = mem_surveyor.1015.title
	desc = mem_surveyor.1015.desc
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		room = mem_surveyor_yellow_room
		portrait = mem_surveyor_yellow
	}
	option = {
		name = mem_surveyor.1015.a
	}
	option = {
		name = mem_surveyor.1015.ega
		trigger = {
			OR = {
				has_ethic = ethic_egalitarian
				has_ethic = ethic_fanatic_egalitarian
			}
		}
	}
	option = {
		name = mem_surveyor.1015.aut
		trigger = {
			OR = {
				has_ethic = ethic_authoritarian
				has_ethic = ethic_fanatic_authoritarian
			}
		}
	}
	option = {
		name = mem_surveyor.1015.mat
		trigger = {
			OR = {
				has_ethic = ethic_materialist
				has_ethic = ethic_fanatic_materialist
			}
		}
	}
	option = {
		name = mem_surveyor.1015.spi
		trigger = {
			OR = {
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_spiritualist
			}
		}
	}
	option = {
		name = mem_surveyor.1015.pac
		trigger = {
			OR = {
				has_ethic = ethic_pacifist
				has_ethic = ethic_fanatic_pacifist
			}
		}
	}
	option = {
		name = mem_surveyor.1015.mil
		trigger = {
			OR = {
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_militarist
			}
		}
	}
	option = {
		name = mem_surveyor.1015.phile
		trigger = {
			OR = {
				has_ethic = ethic_xenophile
				has_ethic = ethic_fanatic_xenophile
			}
		}
	}
	option = {
		name = mem_surveyor.1015.phobe
		trigger = {
			OR = {
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_xenophobe
			}
		}
	}
	option = {
		name = mem_surveyor.1015.hive
		trigger = {
			has_authority = auth_hive_mind
		}
	}
	option = {
		name = mem_surveyor.1015.machine
		trigger = {
			has_authority = auth_machine_intelligence
		}
	}
	option = {
		name = mem_surveyor.1015.purifier
		exclusive_trigger = {
		 is_homicidal = yes
		}
	}
	after = {
	}
}

# Origin player makes decision
country_event = {
	id = mem_surveyor.1020
	title = mem_surveyor.1020.title
	desc = mem_surveyor.1020.desc
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		room = mem_surveyor_green_room
		portrait = mem_surveyor_green
	}
	trigger = {
		any_country = {
			is_country_type = mem_surveyor_country_green
			NOT = {
				has_country_flag = mem_surveyor_country_green_decided
			}
		}
	}
	immediate = {
		random_country = {
			limit = {
				is_country_type = mem_surveyor_country_green
				
			}
			save_event_target_as = mem_surveyor_country_green
		}
	}
	option = {
		name = mem_surveyor.1020.a
		hidden_effect = {
			event_target:mem_surveyor_country_green = {
				set_country_flag = mem_surveyor_country_green_sentinel_decision
			}
		}
	}

	option = {
		name = mem_surveyor.1020.b
		hidden_effect = {
			event_target:mem_surveyor_country_green = {
				set_country_flag = mem_surveyor_country_green_berserker_decision
			}
		}
	}
	option = {
		name = mem_surveyor.1020.c
		hidden_effect = {
			event_target:mem_surveyor_country_green = {
				set_country_flag = mem_surveyor_country_green_nothing_burger
			}
		}
	}
}


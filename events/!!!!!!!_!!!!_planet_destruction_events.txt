namespace = planet_destruction

#planet_event = {
#	id = planet_destruction.1
#	is_triggered_only = yes
#	hide_window = yes
#
#	immediate = {
#		remove_planet = yes
#	}
#}

# Add static war exhaustion for these planet destruction events with:
# add_static_war_exhaustion = {
#				attacker = <country>						# attacker in this battle
#				location = <planet>							# location for battle
#				value_for_planet_destruction = <0.0-1.0>	# scale amount of WE added to this battle
#			}

# Cracked
planet_event = {
	id = planet_destruction.100
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				is_planet_class = pc_frozen
			}
			from.owner = { country_event = { id = planet_destruction.102 } }
		}
		else_if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
			}
			from.owner = { country_event = { id = planet_destruction.101 } }
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_cracked
			planet_event = { id = crisis.2040 }
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_cracked
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
		}

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_reverence_for_life"
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_reverence_for_life"
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_cracker days = 3600 }
			}
		}

		# Exterminatus Achievement
		if = {
			limit = { is_capital = yes }
			from.owner = { set_country_flag = exterminatus }
		}
		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			if = {
				limit = {
					is_colony = yes
				}
				add_threat = { who = from.owner amount = 3 }
				# modifier for allies + those upset by genocide
				every_country = {
					limit = {
						NOR = {
							is_same_value = from.owner
							is_same_value = root.owner
							AND = {
								has_federation = yes
								is_in_federation_with = from.owner
							}
						}
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							AND = {
								has_federation = yes
								is_in_federation_with = root.owner
							}
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								OR = {
									is_egalitarian = yes
									is_xenophile = yes
								}
							}
						}
					}
					if = {
						limit = { root = { is_colony = no } }
						add_opinion_modifier = {
							modifier = opinion_cracked_an_uninhabited_world
							who = from.owner
						}
					}
					else = {
						add_opinion_modifier = {
							modifier = opinion_cracked_a_world
							who = from.owner
						}
					}
				}
			}
			else = {
				add_threat = { who = from.owner amount = 1 }
			}
			# modifiers for victim
			owner = {
				if = {
					limit = { root = { is_colony = no } }
					add_opinion_modifier = {
						modifier = opinion_cracked_my_uninhabited_world
						who = from.owner
					}
				}
				else = {
					add_opinion_modifier = {
						modifier = opinion_cracked_my_world
						who = from.owner
					}
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			if = {
				limit = {
					exists = owner
					owner = { is_country_type = primitive }
				}
				# modifier for allies + those upset by genocide
				every_country = {
					limit = {
						NOT = { is_same_value = from.owner }
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								NOR = {
									is_xenophobe = yes
									is_homicidal = yes
									is_xenophile = yes
								}
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_cracked_a_primitive_world
						who = from.owner
					}
				}
				every_country = {
					limit = {
						NOT = { is_same_value = from.owner }
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								is_xenophile = yes
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_cracked_a_primitive_world_phile
						who = from.owner
					}
				}
			}
		}
		# Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}
		every_owned_pop = {
			kill_pop = yes
		}
		if = {
			limit = {
				exists = orbital_defence
			}
			destroy_fleet = orbital_defence
		}
		remove_all_buildings = yes
		# destroy habitats and ringworlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_cracker_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			spawn_lathe_cracker_effect = yes
		}
		else_if = {
			limit = {
				is_ringworld = yes
			}
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_habitable_damaged
		}
		else_if = {
			limit = { habitable_planet = yes }
			change_pc = pc_shattered
			clear_deposits = yes
			random_list = {
				1 = {
					add_deposit = d_minerals_10
					add_deposit = d_minerals_6
				}
				1 = {
					add_deposit = d_minerals_10
					add_deposit = d_minerals_2
				}
				1 = {
					add_deposit = d_minerals_8
				}
				1 = {
					add_deposit = d_minerals_4
				}
			}
		}
		else = {
			change_pc = pc_shattered
			clear_deposits = yes
		}
	}
}

# Neutron Beam
planet_event = {
	id = planet_destruction.300
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = planet_destruction.301 }
			}
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
		}

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_neutron days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							OR = {
								is_egalitarian = yes
								is_xenophile = yes
								is_spiritualist = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_swept_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_swept_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOT = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_swept_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOT = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_swept_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		owner = {
			if = {
				limit = { #isn't the case when the crisis bombards planets, for instance
					is_at_war_with = from.fleet.owner
				}
				add_static_war_exhaustion = {
					attacker = from.fleet.owner
					location = root
					value_for_planet_destruction = 1.0
				}
			}
		}
		every_owned_pop = {
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		destroy_colony = yes
		add_modifier = {
			modifier = neutron_bombarded
			days = 3600
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_neutron_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			spawn_lathe_neutron_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_neutron_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_cosmogenesis_world
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}
		# For Infested worlds
		if = {
			limit = { is_planet_class = pc_infested }
			random_list = {
				50 = { change_pc = pc_barren }
				50 = { change_pc = pc_barren_cold }
			}
			add_modifier = { modifier = "terraforming_candidate" days = -1 }
		}
	}
}

# God Ray
planet_event = {
	id = planet_destruction.400
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = planet_destruction.401 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				play_animation_once = yes
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				play_animation_once = yes
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_godray days = 3600 }
			}
		}

		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by conversion
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_materialist
						AND = {
							is_country_type = default
							OR = {
								is_materialist = yes
								is_egalitarian = yes
								is_machine_empire = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_converted_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_converted_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			# Add war exhaustion to planet owner
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
					has_living_standard = { # Bio-trophies die without care
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
					has_living_standard = {
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}
			pop_change_ethic = ethic_spiritualist
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_divine_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			spawn_lathe_divine_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_divine_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_cosmogenesis_world
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}
		add_modifier = {
			modifier = god_rayed
			days = 3600
		}
		# self-raying
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			add_modifier = {
				modifier = uneasy_faith
				days = 3600
			}
		}
	}
}

# Nanobot Assimilation
planet_event = {
	id = planet_destruction.500
	hide_window = yes

	is_triggered_only = yes

	immediate = { # remove hive mind?
		from.owner = { country_event = { id = planet_destruction.501 } }

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_assimilator days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_spiritualist
						AND = {
							is_country_type = default
							OR = {
								is_egalitarian = yes
								is_spiritualist = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_assimilated_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		owner = {
			if = {
				limit = { #isn't the case when the crisis bombards planets, for instance
					is_at_war_with = from.fleet.owner
				}
				add_static_war_exhaustion = {
					attacker = from.fleet.owner
					location = root
					value_for_planet_destruction = 1.0
				}
			}
		}
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			# already owned
		}
		else = {
			set_owner = from.owner
		}
		every_owned_pop = {
			limit = {
				is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
			}
			modify_species = {
				species = this
				add_trait = trait_cybernetic
				add_traits_at_start_of_list = yes
				change_scoped_species = yes
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_hive_mind
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
			kill_pop = yes
		}
		every_owned_pop = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
		every_owned_pop = {
			set_citizenship_type = {
				type = citizenship_full_machine
				cooldown = yes
			}
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			spawn_lathe_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_nanobot_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_cosmogenesis_world
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}
	}
}

# Deluge
planet_event = {
	id = planet_destruction.700
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
			}
			from.owner = { country_event = { id = planet_destruction.701 } }
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			#set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_drenched
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				play_animation_once = yes
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			#set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_drenched
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				play_animation_once = yes
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
			destroy_colony = yes
		}

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							NOT = { is_same_value = from.owner }
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_deluge days = 3600 }
			}
		}
		if = { #you've basically shortcutted terraforming. Yep, that's a breach
			limit = {
				exists = space_owner
				space_owner = {
					is_same_value = from.owner
				}
				OR = {
					NOT = { exists = owner }
					owner = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_ecology_environmental_control_board"
					is_active_resolution = "resolution_ecology_paradise_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_drenched_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.owner
					}
					add_static_war_exhaustion = {
						attacker = from.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}

		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_aquatic
					has_trait = trait_robot_aquatic
				}
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		if = {
			limit = { #were there any Aquatic pops? If so, the ownership needs to be flipped
				any_owned_pop = {
					is_scope_valid = yes
					exists = this
				}
				owner = {
					NOT = { is_same_value = from.owner }
				}
			}
			set_owner = from.owner
		}
		if = {
			limit = {
				NOT = { is_planet_class = pc_broken }
			}
			change_pc = pc_ocean
		}

		# from = { #feedback suggests this isn't fun, but leaving it here in case we need it
		# 	ice_mining_depletion_effect = yes

		# 	if = {
		# 		limit = {
		# 			root = { has_planet_flag = temp_ice_mine_exhausted_flag }
		# 		}
		# 		event_target:mined_system.starbase = {
		# 			remove_starbase_building = {
		# 				building = ice_mining_station
		# 			}
		# 		}
		# 		create_message = {
		# 			type = DELUGE_EXHAUSTED_ICE
		# 			localization = DELUGE_EXHAUSTED_ICE_DESC
		# 			days = 20
		# 			target = root
		# 			variable = {
		# 				type = name
		# 				localization = SYSTEM
		# 				scope = event_target:mined_system
		# 			}
		# 		}
		# 	}
		# }
	}
}

# Toxified
planet_event = {
	id = planet_destruction.800
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				colonizable_planet = yes
				is_artificial = no
			}
			set_planet_flag = toxic_candidate
		}
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
			}
			from.owner = { country_event = { id = planet_destruction.801 } }
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_cracked #doesn't matter
			planet_event = { id = crisis.2040 }
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_cracked
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
		}

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_ttoxifierr days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			if = {
				limit = {
					is_colony = yes
				}
				add_threat = { who = from.owner amount = 3 }
				# modifier for allies + those upset by genocide
				every_country = {
					limit = {
						NOR = {
							is_same_value = from.owner
							is_same_value = root.owner
							AND = {
								has_federation = yes
								is_in_federation_with = from.owner
							}
						}
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							AND = {
								has_federation = yes
								is_in_federation_with = root.owner
							}
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								OR = {
									is_egalitarian = yes
									is_xenophile = yes
								}
							}
						}
					}
					if = {
						limit = { root = { is_colony = no } }
						add_opinion_modifier = {
							modifier = opinion_toxified_an_uninhabited_world
							who = from.owner
						}
					}
					else = {
						add_opinion_modifier = {
							modifier = opinion_toxified_a_world
							who = from.owner
						}
					}
				}
			}
			else = {
				add_threat = { who = from.owner amount = 1 }
			}
			# modifiers for victim
			owner = {
				if = {
					limit = { root = { is_colony = no } }
					add_opinion_modifier = {
						modifier = opinion_toxified_my_uninhabited_world
						who = from.owner
					}
				}
				else = {
					add_opinion_modifier = {
						modifier = opinion_toxified_my_world
						who = from.owner
					}
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			if = {
				limit = {
					exists = owner
					owner = { is_country_type = primitive }
				}
				# modifier for allies + those upset by genocide
				every_country = {
					limit = {
						NOT = { is_same_value = from.owner }
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								NOR = {
									is_xenophobe = yes
									is_homicidal = yes
									is_xenophile = yes
								}
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_toxified_a_primitive_world
						who = from.owner
					}
				}
				every_country = {
					limit = {
						NOT = { is_same_value = from.owner }
						OR = {
							has_communications = from.owner
							has_communications = root.owner
						}
						OR = {
							has_ai_personality = awakened_fallen_empire_xenophile
							AND = {
								is_country_type = default
								is_xenophile = yes
							}
						}
					}
					add_opinion_modifier = {
						modifier = opinion_toxified_a_primitive_world_phile
						who = from.owner
					}
				}
			}
		}
		# Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}
		every_owned_pop = {
			kill_pop = yes
		}
		if = {
			limit = {
				exists = orbital_defence
			}
			destroy_fleet = orbital_defence
		}
		remove_all_buildings = yes

		change_pc = pc_toxic
		clear_deposits = yes

		if = {
			limit = { has_modifier = holy_planet }
			remove_modifier = holy_planet
		}

		if = {
			limit = {
				has_planet_flag = toxic_candidate
			}
			add_modifier = { modifier = toxic_terraforming_candidate }
			remove_planet_flag = toxic_candidate
		}
	}
}

# Devolving Beam
planet_event = {
	id = planet_destruction.900
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = planet_destruction.901 }
			}
		}

		# Contingency Machine World ### Maybe block these if no AP
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
				from.owner = {
					has_ascension_perk = ap_archaeoengineers
				}
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_devolved
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				play_animation_once = yes
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
				from.owner = {
					has_ascension_perk = ap_archaeoengineers
				}
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_devolved
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				play_animation_once = yes
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		if = {
			limit = {
				OR = {
					AND = {
						NOT = { exists = owner }
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
					AND = {
						exists = owner
						owner = {
							is_crisis_faction = no
							NOT = { has_crisis_level = crisis_level_5 }
							NOT = { has_crisis_level = crisis_cosmogenesis_level_5 }
							NOT = { has_country_flag = declared_crisis }
						}
						OR = {
							is_active_resolution = "resolution_rulesofwar_independent_tribunals"
							is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
							is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
						}
					}
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_devolution_beam days = 3600 }
			}
		}

		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by conversion
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_spiritualist
						AND = {
							is_country_type = default
							OR = {
								is_spiritualist = yes
								is_xenophile = yes
								is_hive_empire = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_devolved_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_devolved_my_world
					who = from.owner
				}
				if = {
					limit = {
						NOT = { has_ethic = ethic_gestalt_consciousness }
					}
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			# Add war exhaustion to planet owner
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}
		every_owned_pop = {
			limit = {
				from.owner = {
					has_ascension_perk = ap_archaeoengineers
				}
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		if = {
			limit = {
				from.owner = {
					has_ascension_perk = ap_archaeoengineers
				}
			}
			planet = {
				every_planet_army = {
					limit = {
						OR = {
							army_type = occupation_army
							army_type = cybrex_warform
							army_type = care_defensive_protocols
							army_type = gray_army
							army_type = robot_uprising_army
							army_type = robotic_army
							army_type = machine_assault_1
							army_type = machine_assault_2
							army_type = machine_assault_3
							army_type = robotic_defense_army
							army_type = machine_defense
							army_type = robotic_occupation_army
							army_type = machine_occupation_army
						}
					}
					remove_army = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					NOR = {
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
					is_sapient = yes
				}
			}
			random_owned_pop = {
				limit = {
					NOR = {
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
					is_sapient = yes
				}
				species = { save_event_target_as = species_target }
				create_devolved_species = yes
			}
			every_owned_pop = {
				limit = {
					NOR = {
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
					is_same_species = event_target:species_target
					is_sapient = yes
				}
				change_species = event_target:devolved_species_target
			}
		}

		random_owned_pop = {
			change_species = event_target:species_target
		}
		random_list = {
			33 = {}
			33 = {
				random_owned_pop = {
					change_species = event_target:species_target
				}
			}
			33 = {
				random_owned_pop = {
					change_species = event_target:species_target
				}
				random_owned_pop = {
					change_species = event_target:species_target
				}
			}
		}
		planet = {
			every_planet_army = {
				limit = {
					OR = {
						army_type = occupation_army
						army_type = offspring_defense
						army_type = undead_defense_army
						army_type = fanatic_guardian
						army_type = defense_army
						army_type = assault_army
						army_type = slave_army
						army_type = clone_army
						army_type = psionic_army
						army_type = xenomorph_army
						army_type = gene_warrior_army
						army_type = undead_army
						army_type = rebel_army
						army_type = rebel_slave_defense_army
						army_type = primitive_army
						army_type = primitive_additional_army
						army_type = industrial_army
						army_type = postatomic_army
						army_type = subterranean_industrial_army
						army_type = subterranean_postatomic_army
						army_type = mutant_army
						army_type = swarm_army
						army_type = tree_army
						army_type = enraged_army
						army_type = ketling_army
						army_type = titanic_assault_army
						army_type = titanic_azizian_assault_army
						army_type = titanic_guardian_army
						army_type = imperial_legion
						army_type = giant_undead_army
						army_type = ice_army
						army_type = mercenary_army
						army_type = mecha_army
						army_type = subterranean_defense_army
						army_type = new_world_order_defensive_army
						army_type = new_world_order_offensive_army
						army_type = warpling_army
						army_type = flamestorm_troopers_army
					}
				}
				remove_army = yes
			}
			check_planet_employment = yes
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_neutron_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_cosmogenesis_world
			}
			spawn_lathe_neutron_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_neutron_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_cosmogenesis_world
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}
		set_timed_planet_flag = {
			flag = devolved_planet
			days = 360
		}
	}
}

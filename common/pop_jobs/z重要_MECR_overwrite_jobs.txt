bureaucrat = {
	category = specialist

	swappable_data = {
		default = {
			condition_string = SPECIALIST_JOB_TRIGGER
			building_icon = building_bureaucratic_1
		}
		swap_type = {	# SWAP: Imperial Official
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			name = imperial_official
			desc = imperial_official
			icon = imperial_official
			building_icon = building_imperial_government
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 99999
		}
		swap_type = {
			trigger = {
				bureaucrat_is_manager = yes
			}
			name = manager
			desc = manager
			icon = manager
			building_icon = building_bureaucratic_1
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 2
		}
		swap_type = {
			trigger = {
				bureaucrat_is_priest = yes
			}
			name = priest
			desc = priest
			icon = priest
			building_icon = building_temple
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 5
		}
		swap_type = {
			trigger = {
				bureaucrat_is_steward = yes
			}
			name = steward
			desc = steward
			icon = manager
			building_icon = building_bureaucratic_1
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 10
		}
		swap_type = {
			trigger = {
				bureaucrat_is_preacher = yes
			}
			name = preacher
			desc = preacher
			icon = numistic_priest
			building_icon = building_temple
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 15
		}
		swap_type = {
			trigger = {
				bureaucrat_is_numistic_priest = yes
			}
			name = numistic_priest
			desc = numistic_priest
			icon = numistic_priest
			building_icon = building_nuumismatic_shrine
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 20
		}
		swap_type = {
			trigger = {
				bureaucrat_is_unifier = yes
			}
			name = unifier
			desc = unifier
			icon = overlord_propagandist
			building_icon = building_capital
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 25
		}
		swap_type = {
			trigger = {
				bureaucrat_is_culture_worker = yes
			}
			name = culture_worker
			desc = culture_worker
			icon = culture_worker
			building_icon = building_artist_patron
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 30
		}
		swap_type = {
			trigger = {
				bureaucrat_is_death_priest = yes
			}
			name = death_priest
			desc = death_priest
			icon = death_priest
			building_icon = building_sacrificial_temple_1
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 35
		}
		swap_type = {
			trigger = {
				bureaucrat_is_low_tech = yes
			}
			name = low_tech_bureaucrat
			desc = low_tech_bureaucrat
			icon = low_tech_bureaucrat
			building_icon = building_low_tech_admin_hub
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 40
		}
		swap_type = {
			trigger = {
				bureaucrat_is_low_tech_manager = yes
			}
			name = low_tech_manager
			desc = low_tech_manager
			icon = manager
			building_icon = building_low_tech_admin_hub
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 45
		}
		swap_type = {
			trigger = {
				bureaucrat_is_low_tech_priest = yes
			}
			name = low_tech_priest
			desc = low_tech_priest
			icon = low_tech_priest
			building_icon = building_low_tech_admin_hub
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 50
		}
		swap_type = {
			trigger = {
				bureaucrat_is_memorialist = yes
			}
			name = memorialist
			desc = memorialist
			icon = death_chronicler
			building_icon = building_galactic_memorial_1
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 200
		}
		swap_type = {
			trigger = {
				bureaucrat_is_death_priest = yes
				bureaucrat_is_manager = yes
			}
			name = death_manager
			desc = death_manager
			icon = manager
			building_icon = building_temple
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 300
		}
		swap_type = {
			trigger = {
				bureaucrat_is_haruspex = yes
			}
			name = haruspex
			desc = haruspex
			icon = haruspex
			building_icon = building_the_sanctum_of_augmentation
			condition_string = SPECIALIST_JOB_TRIGGER
			weight = 500
		}
	}
	tags = { unity }

	possible_pre_triggers = {
		has_owner = yes
		is_being_purged = no
		is_being_assimilated = no
		is_sapient = yes
	}

	possible_precalc = can_fill_specialist_job
	possible = {
		complex_specialist_job_check_trigger = yes
	}

	resources = {
		category = planet_bureaucrats
		# PRODUCES
		produces = {
			unity = 4
		}
		upkeep = {
			consumer_goods = 2
		}
		##Government Swaps
		produces = {
			trigger = {
				bureaucrat_is_manager = yes
			}
			trade = 2
		}
		produces = {
			trigger = {
				bureaucrat_is_steward = yes
			}
			trade = 1
		}
		produces = {
			trigger = {
				bureaucrat_is_preacher = yes
			}
			unity = -1
			trade = 2
		}
		produces = {
			trigger = {
				bureaucrat_is_death_priest = yes
			}
			unity = -1
			society_research = 1
		}
		produces = {
			trigger = {
				bureaucrat_is_death_priest = yes
				exists = owner
				owner = { has_sacrificial_edict = yes }
			}
			unity = 3
		}
		produces = {
			trigger = {
				bureaucrat_is_haruspex = yes
			}
			unity = -1
			engineering_research = 2
		}
		##Broken Shackles
		produces = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_low_tech = yes
				}
			}
			unity = -2
		}
		upkeep = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_low_tech = yes
				}
			}
			consumer_goods = -1
		}
		produces = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_low_tech_manager = yes
				}
			}
			unity = -2
			trade = 2
		}
		upkeep = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_low_tech_manager = yes
				}
			}
			consumer_goods = -1
		}
		produces = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_low_tech_priest = yes
				}
			}
			unity = -2
		}
		upkeep = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_low_tech_priest = yes
				}
			}
			consumer_goods = -1
		}
		##Event Swaps
		upkeep = {
			trigger = {
				bureaucrat_is_unifier = yes
			}
			consumer_goods = -1
		}
		# Job Swap - Numistic Priests
		produces = {
			trigger = {
				exists = planet
				planet = {
					bureaucrat_is_numistic_priest = yes
				}
			}
			unity = -2
			trade = 6
		}
		# SWAP: Imperial Official: clear the unity produces
		produces = {
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			unity = -4
		}
		produces = { # produces changes from modifiers
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			unity = -1
			mult = modifier:planet_bureaucrats_unity_produces_add
		}
		produces = { # produces changes from job swaps
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			unity = -1
			mult = value:imperial_official_additional_produces_from_swaps
		}
		produces = { # Provincial bureaucrats work for imperium
			trigger = {
				provincial_bureaucrats_work_for_imperium = yes
			}
			unity = -1
		}
	}
	
	# SWAP: Imperial Official: produces imperial governance cap
	triggered_country_modifier = {
		potential = { bureaucrat_is_imperial_official = yes }
		imperial_governance_capacity = 6
		mult = planet.value:imperial_official_imperial_governance_produces
	}
	triggered_country_modifier = { # Provincial bureaucrats work for imperium
		potential = { provincial_bureaucrats_work_for_imperium = yes }
		imperial_governance_capacity = 6
		mult = planet.value:holding_imperial_governance_produces
	}

	## Amenities
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_priest = yes
		}
		planet_amenities_add = 200
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_steward = yes
		}
		planet_amenities_add = 100
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_steward = yes
			has_councilor = { COUNCILOR = councilor_worker_coop }
		}
		planet_amenities_add = 25
		mult = value:scripted_modifier_councilor_level_mult|MODIFIER|pop_job_amenities_mult|TYPE|councilor_worker_coop|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_preacher = yes
		}
		planet_amenities_add = 200
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_death_priest = yes
		}
		planet_amenities_add = 200
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_unifier = yes
		}
		planet_amenities_add = 300
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_low_tech_priest = yes
		}
		planet_amenities_add = 200
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_numistic_priest = yes
		}
		planet_amenities_add = 200
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_haruspex = yes
		}
		planet_amenities_add = 200
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_culture_worker = yes
		}
		planet_amenities_add = 300
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}

	inline_script = "jobs/ethic_job_modifiers_memorialist"

	##Stability
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_memorialist = yes
		}
		planet_stability_add = 0.5
	}

	triggered_planet_modifier = {
		potential = {
			exists = planet
			planet = {
				check_modifier_value = {
					modifier = planet_bureaucrats_stability_produces_add
					value > 0
				}
			}
		}
		planet_stability_add = 1
		mult = planet.modifier:planet_bureaucrats_stability_produces_add
	}

	## Ethics Attraction
	triggered_planet_modifier = {
		potential = {
			bureaucrat_is_culture_worker = yes
		}
		pop_government_ethic_attraction = 0.10
	}

	triggered_planet_modifier = {
		potential = {
			planet = {
				has_active_building = building_league_offices
			}
		}
		planet_amenities_add = 100
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}

	triggered_country_modifier = {
		potential = {
			exists = owner
			owner = { has_valid_civic = civic_efficient_bureaucracy }
		}
		country_edict_fund_add = 2
		mult = value:job_total_output_modifier|JOB|bureaucrat|RESOURCE|unity|
	}

	triggered_planet_modifier = {
		potential = {
			planet = {
				exists = owner
				owner = {
					has_tradition = tr_modularity_4
				}
			}
		}
		planet_jobs_worker_produces_mult = 0.02
	}

	weight = {
		weight = @specialist_job_weight
		mult = value:job_weights_modifier|JOB|bureaucrat|RESOURCE|unity|
		mult = value:scripted_modifier_job_weight_mult|MODIFIER|pop_job_amenities_mult|
		modifier = {
			factor = 0.2
			has_citizenship_rights = no
			NOT = { has_trait = trait_mechanical }
		}
		modifier = {
			factor = 2
			exists = owner
			owner = { has_civic = civic_exalted_priesthood }
		}
		modifier = {
			factor = 0.1
			can_take_servant_job = yes
		}
		modifier = {
			factor = 0.1
			is_enslaved = yes
			has_slavery_type = { type = slavery_indentured }
		}
	}

	inline_script = "jobs/automodding_priority_unity"

	promotion = {
		time = @standard_promotion_time
		effect = {
			pop_amount_change_category = {
				CATEGORY = specialist
				AMOUNT = local_pop_amount
			}
		}
	}
}
coordinator = {
	category = complex_drone

	swappable_data = {
		default = {
			condition_string = DRONE_JOB_TRIGGER
			building_icon = building_machine_capital
			icon = coordinator
		}
		swap_type = {	# SWAP: Imperial Administrative Drone
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			name = imperial_administrative_drone
			desc = imperial_administrative_drone
			icon = imperial_official
			building_icon = building_imperial_government
			condition_string = DRONE_JOB_TRIGGER
			weight = 99999
		}
		# Synpase Drone - auth_hive_mind
		swap_type = {
			trigger = {
				exists = owner
				owner = {
					is_hive_empire = yes
					is_wilderness_empire = no
				}
			}
			name = synapse_drone
			desc = synapse_drone
			icon = synapse_drone
			building_icon = building_hive_capital
			condition_string = DRONE_JOB_TRIGGER
			weight = 2
		}
		# Chronicle Drone
		swap_type = {
			trigger = {
				exists = owner
				owner = {
					is_memorialist_empire = yes
				}
			}
			name = chronicle_drone
			desc = chronicle_drone
			icon = chronicle_drone
			building_icon = building_galactic_memorial_1
			condition_string = DRONE_JOB_TRIGGER
			weight = 3
		}
		swap_type = {
			trigger = {
				exists = owner
				owner = {
					is_wilderness_empire = yes
				}
			}
			name = choirsymbiont
			desc = choirsymbiont
			icon = choirsymbiont
			building_icon = building_commensal_clearing_3
			condition_string = DRONE_JOB_TRIGGER
			weight = 10
		}
	}

	possible_pre_triggers = {
		has_owner = yes
		is_enslaved = no
		is_being_purged = no
		is_being_assimilated = no
		is_sapient = yes
	}

	possible_precalc = can_fill_drone_job

	possible = { can_think = yes }

	resources = {
		category = planet_bureaucrats
		produces = {
			unity = 4
		}
		produces = {
			trigger = {
				exists = owner
				owner = {
					is_memorialist_empire = yes
				}
			}
			unity = 1
		}
		upkeep = {
			trigger = {
				exists = owner
				owner = {
					is_hive_empire = yes
					is_lithoid = no
				}
			}
			food = 2
			energy = 2
		}
		upkeep = {
			trigger = {
				exists = owner
				owner = {
					is_hive_empire = yes
					is_lithoid = yes
				}
			}
			minerals = 2
			energy = 2
		}
		upkeep = {
			trigger = {
				exists = owner
				owner = {
					is_hive_empire = no
				}
			}
			energy = 4
		}
		# SWAP: Imperial Administrative Drone: clear the unity produces
		produces = {
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			unity = -4
		}
		produces = { # produces changes from modifiers
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			unity = -1
			mult = modifier:planet_bureaucrats_unity_produces_add
		}
		produces = { # produces changes from job swaps
			trigger = {
				bureaucrat_is_imperial_official = yes
			}
			unity = -1
			mult = value:imperial_administrative_drone_additional_produces_from_swaps
		}
		produces = { # Provincial bureaucrats work for imperium
			trigger = {
				provincial_bureaucrats_work_for_imperium = yes
			}
			unity = -1
		}
	}
	
	# SWAP: Imperial Administrative Drone: produces imperial governance cap
	triggered_country_modifier = {
		potential = { bureaucrat_is_imperial_official = yes }
		imperial_governance_capacity = 6
		mult = planet.value:imperial_administrative_drone_imperial_governance_produces
	}
	triggered_country_modifier = { # Provincial bureaucrats work for imperium
		potential = { provincial_bureaucrats_work_for_imperium = yes }
		imperial_governance_capacity = 6
		mult = planet.value:holding_imperial_governance_produces
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				is_memorialist_empire = yes
			}
		}
		modifier = {
			planet_stability_add = 0.5
		}
	}

	triggered_planet_modifier = {
		potential = {
			planet = {
				has_active_building = building_league_offices
			}
		}
		planet_amenities_no_happiness_add = 100
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
	}

	triggered_planet_modifier = {
		potential = {
			OR = {
					has_modifier = planet_artifact_relays_machine
					has_modifier = planet_artifact_relays_hivemind
				}
		}
		modifier = {
			planet_stability_add = 2
			planet_jobs_simple_drone_produces_mult = 0.01
		}
	}

	triggered_planet_modifier = {
		potential = {
			planet = {
				exists = owner
				owner = {
					has_tradition = tr_modularity_4
				}
			}
		}
		planet_jobs_simple_drone_produces_mult = 0.02
	}

	weight = {
		weight = @synapse_drone_job_weight
		mult = value:job_weights_modifier|JOB|coordinator|RESOURCE|unity|
		modifier = {
			factor = 0.9
			exists = owner
			years_passed < 1
			owner = { has_valid_civic = civic_machine_assimilator }
			has_trait = trait_cybernetic
		}
	}

	inline_script = "jobs/automodding_priority_unity"

	promotion = {
		time = @standard_promotion_time
		effect = {
			pop_amount_change_category = {
				CATEGORY = complex_drone
				AMOUNT = local_pop_amount
			}
		}
	}
}

#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

gpm_leader_level_value = {
	base = 1
	modifier = {
		set = 1
		root.leader = {
			has_level = 1
		}
	}
	modifier = {
		set = 2
		root.leader = {
			has_level = 2
		}
	}
	modifier = {
		set = 3
		root.leader = {
			has_level = 3
		}
	}
	modifier = {
		set = 4
		root.leader = {
			has_level = 4
		}
	}
	modifier = {
		set = 5
		root.leader = {
			has_level = 5
		}
	}
	modifier = {
		set = 6
		root.leader = {
			has_level = 6
		}
	}
	modifier = {
		set = 7
		root.leader = {
			has_level = 7
		}
	}
	modifier = {
		set = 8
		root.leader = {
			has_level = 8
		}
	}
	modifier = {
		set = 9
		root.leader = {
			has_level = 9
		}
	}
	modifier = {
		set = 10
		root.leader = {
			has_level >= 10
		}
	}
}

gpm_scientist_trait_boost = {
	base = 1
	modifier = { factor = 1.25 this.leader = { has_trait = leader_trait_archaeologist } }
	modifier = { factor = 1.5 this.leader = { has_trait = leader_trait_archaeologist_2 } }
	modifier = { factor = 1.2 this.leader = { has_trait = leader_trait_curator } }
	modifier = { factor = 1.2 this.leader = { has_trait = gpm_leader_trait_collector } }
	modifier = { factor = 1.5 this.leader = { has_trait = leader_trait_expertise_archaeostudies } }
	modifier = { factor = 1.5 this.leader = { has_trait = leader_trait_gpm_precursor_expert } }
}

gpm_base_num_relics = {
	base = 0
	add = $PLUS|0$

	# gigastructures
	inline_script = { 
		script = mod_support/gpm_giga_present 
		code = "modifier = { add = 1 has_relic = r_giga_ai_savings }"
	}
}

gpm_num_owned_relics = {
	base = 0
	add = trigger:num_owned_relics

	# gigastructures
	inline_script = { 
		script = mod_support/gpm_giga_present 
		code = "modifier = { add = -1 has_relic = r_giga_ai_savings }"
	}
}

gpm_relic_weight = {
	base = 1
	[[megacorp]
	modifier = {
		is_megacorp = yes
		factor = value:gpm_relic_weight_$TYPE$_$megacorp$_country_category
	}]
	[[hive]
	modifier = {
		is_hive_empire = yes
		factor = value:gpm_relic_weight_$TYPE$_$hive$_country_category
	}]
	[[machine]
	modifier = {
		is_machine_empire = yes
		factor = value:gpm_relic_weight_$TYPE$_$machine$_country_category
	}]
	[[militarist]
	modifier = {
		has_ethic = ethic_militarist
		factor = value:gpm_relic_weight_$TYPE$_$militarist$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_militarist
		factor = value:gpm_relic_weight_$TYPE$_$militarist$_ethic_fanatic
	}]
	[[pacifist]
	modifier = {
		has_ethic = ethic_pacifist
		factor = value:gpm_relic_weight_$TYPE$_$pacifist$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_pacifist
		factor = value:gpm_relic_weight_$TYPE$_$pacifist$_ethic_fanatic
	}]
	[[xenophobe]
	modifier = {
		has_ethic = ethic_xenophobe
		factor = value:gpm_relic_weight_$TYPE$_$xenophobe$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_xenophobe
		factor = value:gpm_relic_weight_$TYPE$_$xenophobe$_ethic_fanatic
	}]
	[[xenophile]
	modifier = {
		has_ethic = ethic_xenophile
		factor = value:gpm_relic_weight_$TYPE$_$xenophile$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_xenophile
		factor = value:gpm_relic_weight_$TYPE$_$xenophile$_ethic_fanatic
	}]
	[[authoritarian]
	modifier = {
		has_ethic = ethic_authoritarian
		factor = value:gpm_relic_weight_$TYPE$_$authoritarian$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_authoritarian
		factor = value:gpm_relic_weight_$TYPE$_$authoritarian$_ethic_fanatic
	}]
	[[egalitarian]
	modifier = {
		has_ethic = ethic_egalitarian
		factor = value:gpm_relic_weight_$TYPE$_$egalitarian$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_egalitarian
		factor = value:gpm_relic_weight_$TYPE$_$egalitarian$_ethic_fanatic
	}]
	[[spiritualist]
	modifier = {
		has_ethic = ethic_spiritualist
		factor = value:gpm_relic_weight_$TYPE$_$spiritualist$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_spiritualist
		factor = value:gpm_relic_weight_$TYPE$_$spiritualist$_ethic_fanatic
	}]
	[[materialist]
	modifier = {
		has_ethic = ethic_materialist
		factor = value:gpm_relic_weight_$TYPE$_$materialist$_ethic
	}
	modifier = {
		has_ethic = ethic_fanatic_materialist
		factor = value:gpm_relic_weight_$TYPE$_$materialist$_ethic_fanatic
	}]
}

gpm_relic_weight_TRADE_P_ethic_fanatic = { base = @gpm_relic_weight_TRADE_P_ethic_fanatic }
gpm_relic_weight_TRADE_P_ethic = { base = @gpm_relic_weight_TRADE_P_ethic }
gpm_relic_weight_TRADE_N_ethic = { base = @gpm_relic_weight_TRADE_N_ethic }
gpm_relic_weight_TRADE_N_ethic_fanatic = { base = @gpm_relic_weight_TRADE_N_ethic_fanatic }

gpm_relic_weight_TRADE_P_country_category = { base = @gpm_relic_weight_TRADE_P_country_category }
gpm_relic_weight_TRADE_N_country_category = { base = @gpm_relic_weight_TRADE_N_country_category }

gpm_relic_weight_WAR_P_ethic_fanatic = { base = @gpm_relic_weight_WAR_P_ethic_fanatic }
gpm_relic_weight_WAR_P_ethic = { base = @gpm_relic_weight_WAR_P_ethic }
gpm_relic_weight_WAR_N_ethic = { base = @gpm_relic_weight_WAR_N_ethic }
gpm_relic_weight_WAR_N_ethic_fanatic = { base = @gpm_relic_weight_WAR_N_ethic_fanatic }

gpm_relic_weight_WAR_P_country_category = { base = @gpm_relic_weight_WAR_P_country_category }
gpm_relic_weight_WAR_N_country_category = { base = @gpm_relic_weight_WAR_N_country_category }
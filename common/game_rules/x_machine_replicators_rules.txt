# Checks if a pop can be assembled
# this = species
# root = planet
can_species_be_assembled = {
	is_sapient = yes
	NOR = {
		has_trait = trait_hive_mind_overlord
		has_trait = trait_holodrone
	}
	OR = {
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
			}
		}
		AND = {
			is_organic_species = yes
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				has_trait = trait_hive_mind
			}
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			### Lithoid supremacy Content
			else_if = {
				limit = { 
					OR = {
					has_trait = trait_pearl_born_drone 
					has_trait = trait_pearl_born_royal
				} 
			}
				root = {
					any_owned_species = { 
						OR = {
							has_trait = trait_pearl_born_drone 
							has_trait = trait_pearl_born_royal
						}
					}
				}
			}
			###
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					root.owner = {
						has_tradition = tr_cybernetics_assembly_standards
						has_policy_flag = roboticist_output_build_cyborgs
					}
				}
				has_trait = trait_cybernetic
			}
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					has_building = building_clone_army_clone_vat
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			else = {
				root = {
					OR = {
						has_building = building_clone_vats
						root = { has_building = building_crystallization_facilities }
						root = { has_building = building_ocean_spawning_pool }
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
				}
			}
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
	NAND = {
		root = { owner = { has_valid_civic = civic_machine_replicators } }
		has_trait = trait_machine_central
	}
}
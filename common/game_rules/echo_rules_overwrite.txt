# this = ship
# root = country that kills ship
##Overwrite to stop normal FEs to drop Debris
can_spawn_debris = {	
	root = { is_country_type = default }
	exists = owner
	owner = { 
		NOR = { 
			has_ascension_perk = ap_enigmatic_engineering 
            is_country_type = fallen_empire
            has_civic = civic_hive_strong_connection
		} 
	}
}

# This = country
can_support_branch_offices = {
	is_country_type = default
	OR = {
	is_regular_empire = yes
		NOT = { this = { is_same_empire = prev } }
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }

			# allow branch offices in subsidiaries and vice versa
			root = {
				is_subject = yes
				is_subject_type = subsidiary
				overlord = { is_same_value = owner }
			}
			owner = {
				is_subject = yes
				is_subject_type = subsidiary
				overlord = { is_same_value = root }
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
		NOT = { owner = { is_same_empire = root } }
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}
}

species_can_live_on_planet = {
	exists = root
	NAND = {
		root = { is_planet_class = pc_machine }
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					has_authority = auth_machine_intelligence
					has_civic = civic_machine_assimilator # Assimilator empire
				}
			}
		}
	}
	NAND = {
		root = { is_planet_class = pc_hive }
		NOT = { has_trait = trait_hive_mind }
	}
	if = {
		limit = {
			root = { is_planet_class = pc_hive }
		}
		OR = {
			has_trait = trait_hive_mind
			AND = { #Necrophage Hive Mind can have Necrophytes
				exists = root.owner
				root.owner = {
					is_hive_empire = yes
					has_origin = origin_necrophage
					prev = { species_can_be_necrophaged = yes }
				}
			}
		}
	}
	NAND = {
		root = { is_planet_class = pc_shrouded_paradise }
		NOR = {
			has_trait = trait_psionic
			has_trait = trait_holy_machines
			has_trait = trait_pc_shrouded_paradise_preference
		}
    }
	NAND = {
		root = { NOT = { is_planet_class = pc_matryoshka } }
		has_trait = trait_machine_digital
	}	
}

# THIS = Fleet
fleet_uses_templates = {
	is_ship_class = shipclass_military
	is_designable = yes
	is_alliance_fleet = yes
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster
		NOT = { has_star_flag = lcluster }
	}
	custom_tooltip = {
		fail_text = jump_jammer_online
		this = {
			NOT = { starbase = { has_starbase_building = echo_cyno_jammer } }
		}
	}
	#NOT = { root = { has_policy_flag = jump_drive_disabled  } }
}

#This = country, suject
#Root = country, overlord
#From = target solar system
#This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
subject_can_expand = {
	OR = {
		root = { has_valid_civic = civic_feudal_realm }
		this = { is_subject_type = protectorate }
	}
}

# This = planet
can_crossbreed_species_on_planet = {
	OR = {
		AND = {
			exists = owner
    OR = {
        has_building = building_brothel_house
        has_building = building_brothel_house_branch_office 
        owner = { has_ascension_perk = ap_xeno_compatibility }
    }
		count_species = {
			limit = { 
				is_crossbreeding_possible = yes
			}
			count >= 2
			}
		}
	}
}
# This = species one
# Root = species two
can_crossbreed_species = {
	OR = {
	AND = {
		is_crossbreeding_possible = yes
		root = { is_crossbreeding_possible = yes }
	}
	
	AND = {
		owner = { 	has_ascension_perk = ap_life_masters	}
		has_trait = trait_hive_mind
		root = { has_trait = trait_hive_mind }
	}
	
	}
	NOR = {
			is_subspecies = root
			root = { is_subspecies = prev }
		}
	}


# This = Planet
can_resettle_planet = {
	owner = {
		OR = {
			has_policy_flag = resettlement_allowed
			is_gestalt = yes
			country_has_shackled_robots = yes
			any_owned_planet = {
				OR = {
					has_modifier = doomsday_1
					has_modifier = doomsday_2
					has_modifier = doomsday_3
					has_modifier = doomsday_4
					has_modifier = doomsday_5
				}
				NOT = { is_planet_class = pc_matryoshka }
			}
		}
	}
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}
}

# This = pop
can_resettle_pop = {
	NOT = { has_trait = trait_machine_digital }
	# Self-modified Pops won't leave
	custom_tooltip = {
		fail_text = "self_modified_refuse"
		NOT = { has_trait = trait_self_modified }
	}
	if = { #Done as an IF/ELSE so the tooltip isn't hideous and unreadable
		limit = { is_shackled_robot = yes }
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				OR = {
					has_modifier = doomsday_1
					has_modifier = doomsday_2
					has_modifier = doomsday_3
					has_modifier = doomsday_4
					has_modifier = doomsday_5
				}
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_gestalt = yes
			}
		}
		always = yes
	}
	else = {
		custom_tooltip = {
			fail_text = RESETTLEMENT_POLICY_FAIL
			owner = {
				has_policy_flag = resettlement_allowed
			}
		}
	}
}

# ROOT = country
# THIS = pop
can_be_sold_on_slave_market = {
	exists = owner
	NOR = {
		has_trait = trait_holy_machines
		has_trait = trait_vb_psi_soul_eater
	}
	OR = {
		is_enslaved = yes
		is_non_sapient_robot = yes
		is_shackled_robot = yes
	}
	OR ={
		ROOT = { is_ai = no }
		has_citizenship_rights = no
		AND = {
			is_unemployed = yes
			planet = {
				num_unemployed > 3
			}
		}
	}
	if = {
		limit = {
			has_global_flag = organic_slave_trade_banned_flag
		}
		is_organic_species = no
	}
	if = {
		limit = {
			has_global_flag = sentient_slave_trade_banned_flag
		}
		is_sapient = no
	}
	NOR = {
		# Since they can't reproduce, they die out too fast for anyone to want to buy them.
		has_trait = trait_clone_soldier_infertile
		has_trait = trait_clone_soldier_infertile_full_potential
	}
}

# THIS = Fleet
can_jump_drive = {
	#always = yes	# Moved cooldown to code
	this = {
		NOT = {
			has_fleet_flag = echo_jump_cooldown
		}
	}
}

## If this returns true, the species will be set to decline even if it is not being purged
# This = species
# From = planet
## Note: success text tooltips are shown in alert_pops_declining alert.
should_force_decline_species = {
	# Infertile Clone Army pops should decline if in foreign country or Vat shortage.
	OR = {
		custom_tooltip = {
		success_text = CLONE_ARMY_FORCE_DECLINE
		OR = {
			has_trait = trait_clone_soldier_infertile
			has_trait = trait_clone_soldier_infertile_full_potential
		}
		from = {
			OR = {
				AND = {
					exists = owner
					owner = { NOT = { has_origin = origin_clone_army } }
				}
				check_variable = { which = clone_pops_missing value < 0 }
			}
		}
	}
		custom_tooltip = {
		success_text = SOUL_CRYSTAL_SHORTAGE
			has_trait = trait_vb_psi_soul_eater
				from = {
				exists = owner
				owner = { has_deficit = soul_crystals }
			}
		}
	}
}
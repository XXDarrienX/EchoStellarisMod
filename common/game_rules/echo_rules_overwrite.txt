# this = ship
# root = country that kills ship
##Overwrite to stop normal FEs to drop Debris
can_spawn_debris = {	
	root = { is_country_type = default }
	exists = owner
	owner = { 
		NOR = { 
			has_ascension_perk = ap_enigmatic_engineering 
            is_country_type = fallen_empire
            has_civic = civic_hive_strong_connection
		} 
	}
}

# This = country
can_support_branch_offices = {
	exists = this
	THIS = {
		is_country_type = default
		is_regular_empire = yes
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ADVANCED_PRE_FTL
		if = {
			limit = {
				is_primitive = yes
				is_gestalt = no
			}
			OR = {
				has_pre_ftl_age = atomic_age
				has_pre_ftl_age = early_space_age
			}
		}
	}
}

# Check if full sensor range in entire galaxy
# root: country
has_full_sensor_range = {
	always = no
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	NOT = { owner = { is_same_empire = root } }
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
		if = {
			limit = {
				root = { is_criminal_syndicate = yes }
				owner = { is_primitive = yes }
			}
			has_observation_outpost = yes
			observation_outpost_owner = {
				is_same_value = root
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			AND = {
				has_observation_outpost = yes
				observation_outpost = {
					has_modifier = preftl_action_trade_pact
				}
			}

			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			root = {
				is_subject = yes
				OR = {
					has_authority = auth_corporate
					has_civic = civic_galactic_sovereign_megacorp
				}
				overlord = {
					OR = {
						is_same_value = prevprev.owner
						is_same_value = prevprev.owner.overlord
					}
				}
			}
			owner = {
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						has_authority = auth_corporate
						has_civic = civic_galactic_sovereign_megacorp
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}
}

species_can_live_on_planet = {
	exists = root
	NAND = {
		root = { is_planet_class = pc_machine }
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					has_authority = auth_machine_intelligence
					has_civic = civic_machine_assimilator # Assimilator empire
				}
			}
		}
	}
	NAND = {
		root = { is_planet_class = pc_hive }
		NOT = { has_trait = trait_hive_mind }
	}
	NAND = {
		root = { is_planet_class = pc_shrouded_paradise }
		NOR = {
			has_trait = trait_psionic
			has_trait = trait_holy_machines
			has_trait = trait_pc_shrouded_paradise_preference
		}
    }
	NAND = {
		root = { NOT = { is_planet_class = pc_matryoshka } }
		has_trait = trait_machine_digital
	}	
}

# THIS = Fleet
fleet_uses_templates = {
	is_ship_class = shipclass_military
	#is_designable = yes
	is_alliance_fleet = yes
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster
		NOT = { has_star_flag = lcluster }
	}
	custom_tooltip = {
		fail_text = jump_jammer_online
		this = {
			NOT = { starbase = { has_starbase_building = echo_cyno_jammer } }
		}
	}
	#NOT = { root = { has_policy_flag = jump_drive_disabled  } }
}

# This = planet
can_crossbreed_species_on_planet = {
	OR = {
		AND = {
			exists = owner
			owner = {
				has_ascension_perk = ap_xeno_compatibility
			}
		}
		this = {
			has_building = building_brothel_house
			has_holding = {
				owner = planet_owner
				holding = building_brothel_house_branch_office
			}
		}
	}
	count_species = {
		limit = {
			is_crossbreeding_possible = yes
		}
		count >= 2
	}
}

# This = Planet
can_resettle_planet = {
	NOT = { is_planet_class = pc_matryoshka }
	owner = {
		OR = {
			has_policy_flag = resettlement_allowed
			is_gestalt = yes
			country_has_shackled_robots = yes
			any_owned_planet = {
				is_doomsday_planet = yes
			}
		}
	}
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}
}

# This = pop
can_resettle_pop = {
	NOT = { has_trait = trait_machine_digital }
	# Self-modified Pops won't leave
	custom_tooltip = {
		fail_text = "self_modified_refuse"
		NOT = { has_trait = trait_self_modified }
	}
	if = { #Done as an IF/ELSE so the tooltip isn't hideous and unreadable
		limit = { is_shackled_robot = yes }
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				is_doomsday_planet = yes
			}
		}
		always = yes
	}
	else_if = {
		limit = {
			planet = {
				has_modifier = planet_culture_shock
			}
		}
		OR = {
			is_same_species = planet.owner
			planet = {
				NOT = { has_modifier = planet_culture_shock }
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_gestalt = yes
			}
		}
		always = yes
	}
	else = {
		custom_tooltip = {
			fail_text = RESETTLEMENT_POLICY_FAIL
			owner = {
				has_policy_flag = resettlement_allowed
			}
		}
	}
}

# ROOT = country
# THIS = pop
can_be_sold_on_slave_market = {
	exists = owner
	NOR = {
		has_trait = trait_holy_machines
		has_trait = trait_vb_psi_soul_eater
	}
	OR = {
		is_enslaved = yes
		is_non_sapient_robot = yes
		is_shackled_robot = yes
	}
	OR ={
		ROOT = { is_ai = no }
		has_citizenship_rights = no
		AND = {
			is_unemployed = yes
			planet = {
				count_owned_pop = {
					count > 3
					limit = { is_unemployed = yes }
				}
			}
		}
	}
	if = {
		limit = {
			has_global_flag = organic_slave_trade_banned_flag
		}
		is_organic_species = no
	}
	if = {
		limit = {
			has_global_flag = sentient_slave_trade_banned_flag
		}
		is_sapient = no
	}
}

# THIS = Fleet
can_jump_drive = {
	#always = yes	# Moved cooldown to code
	this = {
		NOT = {
			has_fleet_flag = echo_jump_cooldown
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else_if = {
		limit = {
			exists = owner
			owner = {
				is_gestalt = no
				has_origin = origin_holofrixit
				has_trait = trait_holofrixit
			}
		}
		can_fill_holosphere_ruler_job = yes
	}
	else = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
			NOT = { has_trait = trait_syncretic_proles }
			can_think = yes
			### Lithoid Supremacy Content
			NOT = { has_trait = trait_pearl_born_drone }
			###
			OR = {
				NOT = { has_trait = trait_mechanical }
				owner = {
					has_technology = tech_synthetic_workers
					has_policy_flag = ai_full_rights
				}
				AND = { #EMEX - Machinarchy change
				owner = { has_policy_flag = artificial_aristocracy }
				owner = { has_technology = tech_droid_workers }
			}
			}
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			if = {
				limit = { divinity_right_to_work_job_check_trigger_exempt = no }
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	custom_tooltip = WORKER_JOB_TRIGGER
	hidden_trigger = {
		NOT = { has_ethic = ethic_gestalt_consciousness }
		exists = owner
		is_being_purged = no
		is_being_assimilated = no
		NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
		NAND = {
			has_citizenship_type = { type = citizenship_slavery }
			OR = {
				has_slavery_type = { type = slavery_livestock }
				has_slavery_type = { type = slavery_matrix }
			}
		}
		OR = { 
			AND = { 
				has_trait = trait_mechanical
				NOT = { owner = { has_origin = origin_religious_constructs } }
			}
				
			NOT = { has_trait = trait_mechanical }
			AND = { 
				has_trait = trait_mechanical
				owner = { has_origin = origin_religious_constructs }
				owner = { has_technology = tech_synthetic_workers }
			}
		}
		if = {
			limit = {
				divinity_right_to_work_job_check_trigger_exempt = no
			}
			divinity_right_to_work_job_check_trigger_worker = yes
		}
	}
}

## If this returns true, the species will be set to decline even if it is not being purged
# This = species
# From = planet
## Note: success text tooltips are shown in alert_pops_declining alert.
should_force_decline_species = {
	# Infertile Clone Army pops should decline if in Country that can't have Vats, or there is a Vat shortage.
	OR = {
		custom_tooltip = {
			success_text = CLONE_ARMY_FORCE_DECLINE
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
			from = {
				OR = {
					# Check if country is unable to build Vats for this species.
					AND = {
						exists = owner
						owner = {
							OR = {
								NOT = { has_origin = origin_clone_army }					# Can't have Vats.
								has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
								NOT = { owner_main_species = { is_same_species = root } }	# Our Vats can't build this species.
							}
						}
					}
					# Vats check out, but are there more pops than Vats support?
					check_variable = { which = clone_pops_missing value < 0 }
				}
			}
		}
		custom_tooltip = {
			success_text = SOUL_CRYSTAL_SHORTAGE
			this = { has_trait = trait_vb_psi_soul_eater }
			from = {
				exists = owner
				owner = { has_actual_deficit = { RESOURCE = soul_crystals } }
			}
		}
	}
}

can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		OR = {
		has_authority = auth_corporate
		has_civic = civic_galactic_sovereign_megacorp
		has_valid_civic = civic_mutualistic_behavior
		}
	}
}
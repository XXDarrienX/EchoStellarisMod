defined_text = {
	name = GetAstrometeorologistPlural
	text = {
		trigger = {
			is_scope_valid = yes
			is_regular_empire = yes
		}
		localization_key = job_astrometeorologist_plural
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_machine_empire = yes
		}
		localization_key = job_astrometeorologist_machine_plural
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_hive_empire = yes
		}
		localization_key = job_astrometeorologist_hive_plural
	}
	default = job_astrometeorologist_plural
}

defined_text = {
	name = GetStormType
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = electric_storm
		}
		localization_key = electric_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = particle_storm
		}
		localization_key = particle_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = gravity_storm
		}
		localization_key = gravity_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = magnetic_storm
		}
		localization_key = magnetic_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = solar_storm
		}
		localization_key = solar_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = celestial_storm
		}
		localization_key = celestial_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = shroud_storm
		}
		localization_key = shroud_storm
	}
	text = {
		trigger = {
			is_scope_valid = yes
			is_storm_type = nexus_storm
		}
		localization_key = nexus_storm
	}
	default = default_storm
}

# To use if the storm is already gone from the affected planet
defined_text = {
	name = GetAffectedStormType
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_electric_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_electric_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_electric_storm
				}
			}
		}
		localization_key = electric_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_particle_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_particle_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_particle_storm
				}
			}
		}
		localization_key = particle_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_gravity_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_gravity_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_gravity_storm
				}
			}
		}
		localization_key = gravity_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_magnetic_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_magnetic_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_magnetic_storm
				}
			}
		}
		localization_key = magnetic_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_solar_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_solar_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_solar_storm
				}
			}
		}
		localization_key = solar_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_celestial_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_celestial_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_celestial_storm
				}
			}
		}
		localization_key = celestial_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_shroud_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_shroud_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_shroud_storm
				}
			}
		}
		localization_key = shroud_storm
	}
	text = {
		trigger = {
			OR = {
				AND = {
					is_scope_type = planet
					has_planet_flag = affected_by_nexus_storm
				}
				AND = {
					is_scope_type = galactic_object
					has_star_flag = affected_by_nexus_storm
				}
				AND = {
					is_scope_type = country
					has_country_flag = affected_by_nexus_storm
				}
			}
		}
		localization_key = nexus_storm
	}
	default = default_storm
}

# scope: planet giving or receiving the resources
defined_text = {
	name = GetEarnedResources
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_energy
		}
		localization_key = energy_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_exotic_gases
		}
		localization_key = exotic_gases_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_volatile_motes
		}
		localization_key = volatile_motes_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_alloys
		}
		localization_key = alloys_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_minerals
		}
		localization_key = minerals_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_zro
		}
		localization_key = zro_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_living_metal
		}
		localization_key = living_metal_lower
	}
	text = {
		trigger = {
			is_scope_valid = yes
			has_planet_flag = collect_multiple_resources
		}
		localization_key = cstorms.1805.desc.charged_matter
	}
	default = RESOURCES
}

defined_text = {
	name = GetOceansState
	text = {
		trigger = {
			is_scope_valid = yes
			is_cold = yes
		}
		localization_key = GLACIAL_OCEANS
	}
	default = DEFAULT_OCEANS
}

# Situation Log (scope = situation)
defined_text = {
	name = GetGatherStormSuperchargeTTSecond
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_power_plant_4
				NOT = { has_technology = tech_mining_3 }
			}
		}
		localization_key = GATHER_STORM_MAGNETIC_TWO_CHOICE
	}
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_power_plant_4
				has_technology = tech_mining_3
			}
		}
		localization_key = GATHER_STORM_MAGNETIC_THREE_CHOICE
	}
	default = BLANK_STRING
}

defined_text = {
	name = GetGatherStormSuperchargeTTThird
	text = {
		trigger = {
			is_scope_valid = yes
			owner = { has_technology = tech_mining_3 }
		}
		localization_key = GATHER_STORM_ELECTRIC
	}
	default = BLANK_STRING
}

defined_text = {
	name = GetGatherStormOverfeedTTFirst
	random = no
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_basic_science_lab_3
				can_obtain_volatile_motes = yes
			}
		}
		localization_key = GATHER_STORM_PARTICLE
	}
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				NOR = {
					AND = {
						has_technology = tech_basic_science_lab_3
						can_obtain_volatile_motes = yes
					}
					has_technology = tech_mine_dark_matter
					AND = {
						has_technology = tech_hyper_drive_3
						can_obtain_rare_crystals = yes
					}
				}
			}
		}
		localization_key = default_storm
	}
	default = BLANK_STRING
}

defined_text = {
	name = GetGatherStormOverfeedTTSecond
	random = no
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_mine_dark_matter
				has_technology = tech_basic_science_lab_3
				can_obtain_volatile_motes = yes
				has_technology = tech_hyper_drive_3
				can_obtain_rare_crystals = yes
			}
		}
		localization_key = GATHER_STORM_GRAVITY_THREE_CHOICE
	}
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_mine_dark_matter
				has_technology = tech_basic_science_lab_3
				can_obtain_volatile_motes = yes
			}
		}
		localization_key = GATHER_STORM_GRAVITY_SECOND_CHOICE
	}
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_mine_dark_matter
			}
		}
		localization_key = GATHER_STORM_GRAVITY_FIRST_CHOICE
	}
	default = BLANK_STRING
}

defined_text = {
	name = GetGatherStormOverfeedTTThird
	random = no
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_hyper_drive_3
				can_obtain_rare_crystals = yes
				OR = {
					AND = {
						has_technology = tech_basic_science_lab_3
						can_obtain_volatile_motes = yes
					}
					has_technology = tech_mine_dark_matter
				}
			}
		}
		localization_key = GATHER_STORM_CELESTIAL
	}
	text = {
		trigger = {
			is_scope_valid = yes
			owner = {
				has_technology = tech_hyper_drive_3
				can_obtain_rare_crystals = yes
			}
		}
		localization_key = GATHER_STORM_CELESTIAL_ONLY
	}
	default = BLANK_STRING
}

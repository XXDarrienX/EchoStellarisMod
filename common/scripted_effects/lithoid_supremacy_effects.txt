#Lithoid Supremacy Effects

#Pop generation for pearl born
# generate_start_pops = {
# 	if = {
# 		limit = {
# 			owner = {
# 				OR = {
# 					has_origin = origin_syncretic_evolution
# 					has_origin = origin_necrophage
# 					has_valid_civic = civic_machine_servitor
# 					has_valid_civic = civic_machine_assimilator
# 					### Lithoid Supremacy Content
# 					has_origin = origin_pearl_born
# 					###
# 				}
# 			}
# 		}

# 		if = { limit = { last_created_species = { is_species_class = MACHINE } }
# 			modify_species = {
# 				species = last_created_species
# 				add_trait = trait_machine_unit
# 				add_traits_at_start_of_list = yes
# 			}
# 			last_created_species = { save_event_target_as = last_created_species }
# 		}

# 		if = {
# 			limit = {
# 				owner = {
# 					OR = {
# 						has_origin = origin_syncretic_evolution
# 						has_origin = origin_necrophage
# 						### Lithoid Supremacy Content
# 						has_origin = origin_pearl_born
# 						###
# 					}
# 				}
# 			}

# 			last_created_species = {
# 				set_species_flag = syncretic_species@root.owner
# 				if = {
# 					limit = {
# 						prev.owner = {
# 							has_origin = origin_syncretic_evolution
# 						}
# 					}
# 					set_citizenship_type = {
# 						country = root.owner
# 						type = citizenship_slavery
# 					}
# 				}
# 				### Lithoid Supremacy Content
# 				else_if = {
# 					limit = {
# 						prev.owner = {
# 							has_origin = origin_pearl_born
# 						}
# 					}
# 					set_citizenship_type = {
# 						country = root.owner
# 						type = citizenship_full
# 					}
# 				}
# 				###
# 			}
# 			if = {
# 				limit = {
# 					owner = {
# 						has_origin = origin_necrophage
# 						OR = {
# 							has_valid_civic = civic_fanatic_purifiers
# 							has_valid_civic = civic_hive_devouring_swarm
# 							is_gestalt = yes
# 						}
# 					}
# 				}
# 				while = {
# 					count = 6
# 					create_pop = {
# 						species = last_created_species
# 						ethos = random
# 					}
# 				}
# 			}
# 			else_if = {
# 				limit = {
# 					owner = {
# 						has_origin = origin_necrophage
# 						is_gestalt = yes
# 					}
# 				}
# 				while = {
# 					count = 9
# 					create_pop = {
# 						species = last_created_species
# 						ethos = random
# 					}
# 				}
# 			}
# 			### Lithoid Supremacy Content
# 			else_if = {
# 				limit = {
# 					owner = {
# 						has_origin = origin_pearl_born
# 					}
# 				}
# 				#Generates main pops first so they fill specialist jobs
# 				while = {
# 					count = 16
# 					create_pop = {
# 						species = owner_main_species
# 						ethos = random
# 					}
# 				}
# 				#Generates drones to fill worker jobs
# 				while = {
# 					count = 12
# 					create_pop = {
# 						species = last_created_species
# 						ethos = random
# 					}
# 				}
# 			}
# 			###
# 			else = {
# 				while = {
# 					count = 12
# 					create_pop = {
# 						species = last_created_species
# 						ethos = random
# 					}
# 				}
# 			}
# 		}

# 		if = {
# 			limit = {
# 				owner = { has_valid_civic = civic_machine_servitor }
# 			}
# 			last_created_species = {
# 				if = {
# 					limit = {
# 						ROOT = { is_planet_class = pc_shattered_ring_habitable }
# 					}
# 					modify_species = {
# 						species = this
# 						ideal_planet_class = home_planet
# 					}
# 				}
# 				set_citizenship_type = {
# 					country = root.owner
# 					type = citizenship_limited
# 				}
# 				set_living_standard = {
# 					country = root.owner
# 					type = living_standard_organic_trophy
# 				}
# 			}
# 			while = {
# 				count = 5
# 				create_pop = {
# 					species = last_created_species
# 					ethos = random
# 				}
# 				last_created_pop = {
# 					clear_ethos = yes
# 				}
# 			}
# 		}

# 		if = {
# 			limit = {
# 				owner = { has_valid_civic = civic_machine_assimilator }
# 			}
# 			last_created_species = {
# 				if = {
# 					limit = {
# 						ROOT = { is_planet_class = pc_shattered_ring_habitable }
# 					}
# 					modify_species = {
# 						species = this
# 						ideal_planet_class = home_planet
# 					}
# 				}
# 				set_citizenship_type = {
# 					country = root.owner
# 					type = citizenship_full_machine
# 				}
# 				set_living_standard = {
# 					country = root.owner
# 					type = living_standard_hive_mind
# 				}
# 			}
# 			while = {
# 				count = 10
# 				create_pop = {
# 					species = last_created_species
# 					ethos = random
# 				}
# 				last_created_pop = {
# 					clear_ethos = yes
# 				}
# 			}
# 		}
# 	}

# 	if = {
# 		limit = { owner = { has_origin = origin_mechanists } }
# 		owner = { create_built_robot_species = yes }
# 		while = {
# 			count = 8
# 			create_pop = {
# 				species = last_created_species
# 			}
# 		}

# 		add_building = building_robot_assembly_plant
# 		add_district_and_planet_size_if_needed_effect = {
# 			district = district_generator
# 		}
# 		while = {
# 			limit = { num_pops < 27 }
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = {
# 			owner = {
# 				has_origin = origin_necrophage
# 				NOR = { #purges them instead
# 					has_civic = civic_fanatic_purifiers
# 					has_civic = civic_hive_devouring_swarm
# 				}
# 			}
# 		}
# 		if = {
# 			limit = {
# 				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
# 			}
# 			add_district_and_planet_size_if_needed_effect = {
# 				district = district_city
# 			}
# 		}

# 		add_building = building_necrophage_elevation_chamber
# 	}
# 	if = {
# 		limit = {
# 			owner = {
# 				has_origin = origin_necrophage
# 				has_valid_civic = civic_hive_devouring_swarm #purges them instead
# 				is_lithoid_empire = no
# 			}
# 		}
# 		add_building = building_spawning_pool
# 	}
# 	if = {
# 		limit = {
# 			owner = {
# 				has_origin = origin_necrophage
# 				has_valid_civic = civic_hive_devouring_swarm
# 				is_lithoid_empire = yes
# 			}
# 		}
# 		add_district_and_planet_size_if_needed_effect = { district = district_mining }
# 	}
# 	if = {
# 		limit = {
# 			owner = {
# 				has_origin = origin_clone_army
# 			}
# 		}
# 		add_building = building_clone_army_clone_vat
# 		add_building = building_clone_army_clone_vat
# 		planet_event = { id = clones.10 days = 1095 random = 730 }
# 	}
# 	if = {
# 		limit = { owner = { is_hive_empire = yes } }
# 		while = {
# 			limit = { num_pops < 33 }
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = { owner = { has_valid_civic = civic_machine_servitor } }
# 		while = {
# 			limit = { num_pops < 33 }
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = { owner = { is_machine_empire = yes } }
# 		while = {
# 			limit = { num_pops < 29 }
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = { owner = { is_megacorp = yes } }
# 		while = {
# 			limit = { num_pops < 28 }
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = {
# 			owner = {
# 				is_regular_empire = yes
# 			}
# 		}
# 		while = {
# 			limit = { num_pops < 28 }
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
# 			owner = {
# 				has_origin = origin_necrophage
# 				is_homicidal = yes
# 			}
# 		}
# 		while = {
# 			count = 2
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = {
# 			owner = { has_origin = origin_default }
# 		}
# 		while = {
# 			count = 4
# 			create_pop = {
# 				species = owner_main_species
# 				ethos = random
# 			}
# 		}
# 	}
# 	if = {
# 		limit = {
# 			owner = {
# 				has_civic = civic_permanent_employment	
# 			}
# 		}
# 		while = {
# 			count = 4
# 			random_owned_pop = {
# 				limit = {
# 					OR = {
# 						has_job = clerk
# 						has_job = technician
# 						has_job = miner
# 						has_job = farmer
# 					}
# 					is_robotic_species = no
# 				}
# 				modify_species = {
# 					species = this
# 					add_trait = trait_zombie
# 					add_traits_at_start_of_list = yes
# 				}
# 				if = {
# 					limit = {
# 						has_trait = trait_syncretic_proles
# 					}
# 					modify_species = {
# 						species = this
# 						remove_trait = trait_syncretic_proles
# 					}	
# 				}
# 			}
# 		}
# 	}
# }
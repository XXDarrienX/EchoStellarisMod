change_criminal_syndicate_into_megacorp = {
	every_playable_country = {
		limit = {
			any_owned_planet = {
				has_branch_office = yes
				branch_office_owner = { is_same_value = prevprevprev }
			}
		}
		every_owned_planet = {
			limit = {
				has_branch_office = yes
				branch_office_owner = { is_same_value = prevprevprev }
			}
			while = {
				limit = { has_holding = { holding = building_wildcat_miners owner = planet.branch_office_owner } }
				remove_holding = { holding = building_wildcat_miners owner = planet.branch_office_owner }
				add_holding = { holding = building_private_mining_consortium owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_bio_reprocessing_facilities owner = planet.branch_office_owner } }
				remove_holding = { holding = building_bio_reprocessing_facilities owner = planet.branch_office_owner }
				add_holding = { holding = building_food_conglomerate owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_underground_chemists owner = planet.branch_office_owner } }
				remove_holding = { holding = building_underground_chemists owner = planet.branch_office_owner }
				add_holding = { holding = building_virtual_entertainment_studios owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_wrecking_yards owner = planet.branch_office_owner } }
				remove_holding = { holding = building_wrecking_yards owner = planet.branch_office_owner }
				add_holding = { holding = building_private_shipyards owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_pirate_haven owner = planet.branch_office_owner } }
				remove_holding = { holding = building_pirate_haven owner = planet.branch_office_owner }
				add_holding = { holding = building_military_contractors owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_underground_clubs owner = planet.branch_office_owner } }
				remove_holding = { holding = building_underground_clubs owner = planet.branch_office_owner }
				add_holding = { holding = building_amusement_megaplex owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_syndicate_outreach_office owner = planet.branch_office_owner } }
				remove_holding = { holding = building_syndicate_outreach_office owner = planet.branch_office_owner }
				add_holding = { holding = building_public_relations_office owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_illicit_research_labs owner = planet.branch_office_owner } }
				remove_holding = { holding = building_illicit_research_labs owner = planet.branch_office_owner }
				add_holding = { holding = building_private_research_initiative owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_smuggling_rings owner = planet.branch_office_owner } }
				remove_holding = { holding = building_smuggling_rings owner = planet.branch_office_owner }
				add_holding = { holding = building_commercial_forum owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_disinformation_center owner = planet.branch_office_owner } }
				remove_holding = { holding = building_disinformation_center owner = planet.branch_office_owner }
				add_holding = { holding = building_corporate_embassy owner = planet.branch_office_owner }
			}
			while = {
				limit = { has_holding = { holding = building_subversive_shrine owner = planet.branch_office_owner } }
				remove_holding = { holding = building_subversive_shrine owner = planet.branch_office_owner }
				add_holding = { holding = building_temple_of_prosperity owner = planet.branch_office_owner }
			}
		}
	}
}

remove_all_five_year_plans = {
	cancel_resolution = resolution_galactic_focus_five_year_plan_infrastructure_construction
	cancel_resolution = resolution_galactic_focus_five_year_plan_science_research
	cancel_resolution = resolution_galactic_focus_five_year_plan_medical_care
	cancel_resolution = resolution_galactic_focus_five_year_plan_harmonious_diplomacy
	remove_global_flag = galactic_focus_five_year_plan_infrastructure_construction
	remove_global_flag = galactic_focus_five_year_plan_science_research
	remove_global_flag = galactic_focus_five_year_plan_medical_care
	remove_global_flag = galactic_focus_five_year_plan_harmonious_diplomacy
	remove_global_flag = flag_galactic_focus_five_year_plan_cd
	remove_global_flag = flag_galactic_focus_five_year_plan_formulating
	remove_global_flag = flag_galactic_focus_five_year_plan_formulating_timer
	remove_global_flag = flag_five_year_plan_complete
}

multiply_variable_distance_to = {
	subtract_variable = { which = $WHICH$ value = $TARGET$ }
	multiply_variable = { which = $WHICH$ value = $MULT$ }
	change_variable = { which = $WHICH$ value = $TARGET$ }
}

@strengthing_divisor = 60
@undermining_divisor = -20
# diplo_intel_of_imperium:		2:auto strengthen	1:manual strengthen		0:no action		-1:manual undermine		-2:auto undermine
# authority_action_willing:		num of delegate levels engaging action, no higher than community_envoy_skill
imperial_authority_trend_check_part_1 = {
	galactic_emperor = {
		set_variable = { which = var_imperial_authority_monthly_get value = modifier:imperial_authority_monthly_get }
		set_variable = { which = strengthen_authority_number value = 0 }
		set_variable = { which = undermine_authority_number value = 0 }
		every_galcom_member = { #找出有派遣特使的国家
			if = {
				limit = { any_owned_leader = { is_assigned_to_galcom_any_job = yes } }
				random_owned_leader = {
					limit = { is_assigned_to_galcom_any_job = yes }
					prev = { set_variable = { which = community_envoy_skill value = prev.trigger:has_skill } }
				}
			}
			else = {
				clear_variable = community_envoy_skill
			}
		}
		every_galcom_member = { #执行特使行动
			limit = { is_variable_set = community_envoy_skill }
			#计算意愿
			if = { #正在增进的国家
				limit = { any_owned_leader = { is_strengthing_imperial_authority = yes } }
				set_variable = { which = authority_action_type value = 1 }
				set_variable = { which = authority_action_willing value = community_envoy_skill }
			}
			else_if = { #正在削弱的国家
				limit = { any_owned_leader = { is_undermining_imperial_authority = yes } }
				set_variable = { which = authority_action_type value = -1 }
				set_variable = { which = authority_action_willing value = community_envoy_skill }
			}
			else_if = { #AI控制且没有指派特使增进或降低权威的国家，自动设定
				limit = {
					OR = {
						is_ai = yes
						has_country_flag = community_envoy_auto
					}
				}
				if = {
					limit = { is_galactic_emperor = yes }
					set_variable = { which = authority_action_type value = 2 }
					set_variable = { which = authority_action_willing value = 10 }
					if = {
						limit = { check_variable = { which = authority_action_willing value > community_envoy_skill } }
						set_variable = { which = authority_action_willing value = community_envoy_skill }
					}
				}
				else_if = {
					limit = { opinion = { who = galactic_emperor value >= @strengthing_divisor } }
					set_variable = { which = authority_action_type value = 2 }
					export_trigger_value_to_variable = {
						trigger = opinion
						parameters = { who = galactic_emperor }
						variable = authority_action_willing
					}
					divide_variable = { which = authority_action_willing value = @strengthing_divisor }
					floor_variable = authority_action_willing
					if = {
						limit = { check_variable = { which = authority_action_willing value > community_envoy_skill } }
						set_variable = { which = authority_action_willing value = community_envoy_skill }
					}
				}
				else_if = {
					limit = {
						opinion = { who = galactic_emperor value <= @undermining_divisor }
						NOT = { has_modifier = undermining_efforts_stalled } #特使被杀
					}
					set_variable = { which = authority_action_type value = -2 }
					export_trigger_value_to_variable = {
						trigger = opinion
						parameters = { who = galactic_emperor }
						variable = authority_action_willing
					}
					divide_variable = { which = authority_action_willing value = @undermining_divisor }
					floor_variable = authority_action_willing
					if = {
						limit = { check_variable = { which = authority_action_willing value > community_envoy_skill } }
						set_variable = { which = authority_action_willing value = community_envoy_skill }
					}
				}
				else = {
					set_variable = { which = authority_action_type value = 0 }
					set_variable = { which = authority_action_willing value = 0 }
				}
			}
			else = { #其他（手动指定不增进或削弱）
				set_variable = { which = authority_action_type value = 0 }
				set_variable = { which = authority_action_willing value = 0 }
			}
			#投票
			if = {
				limit = { check_variable = { which = authority_action_type value > 0 } }
				galactic_emperor = { change_variable = { which = strengthen_authority_number value = prev.authority_action_willing } }
			}
			else_if = {
				limit = { check_variable = { which = authority_action_type value < 0 } }
				galactic_emperor = { change_variable = { which = undermine_authority_number value = prev.authority_action_willing } }
			}
		}
	}
	every_playable_country = { #设置域外国家对帝国的情报等级
		limit = { is_galactic_community_member = no }
		if = {
			limit = { any_galcom_member = { prev = { has_intel_level = { who = prev category = diplomacy level = 4 } } } }
			set_variable = { which = diplo_intel_of_imperium value = 4 }
		}
		else_if = {
			limit = { any_galcom_member = { prev = { has_intel_level = { who = prev category = diplomacy level = 3 } } } }
			set_variable = { which = diplo_intel_of_imperium value = 3 }
		}
		else_if = {
			limit = { any_galcom_member = { prev = { has_intel_level = { who = prev category = diplomacy level = 2 } } } }
			set_variable = { which = diplo_intel_of_imperium value = 2 }
		}
		else_if = {
			limit = { any_galcom_member = { prev = { has_intel_level = { who = prev category = diplomacy level = 1 } } } }
			set_variable = { which = diplo_intel_of_imperium value = 1 }
		}
		else = {
			set_variable = { which = diplo_intel_of_imperium value = 0 }
		}
	}
}
imperial_authority_trend_check_part_2 = {
	galactic_emperor = {
		set_variable = { which = strengthen_authority_trend value = strengthen_authority_number }
		multiply_variable = { which = strengthen_authority_trend value = @GALACTIC_EMPIRE_ENVOY_AUTHORITY_CHANGE }
		set_variable = { which = undermine_authority_trend value = undermine_authority_number }
		multiply_variable = { which = undermine_authority_trend value = @GALACTIC_EMPIRE_ENVOY_AUTHORITY_CHANGE }
		set_variable = { which = imperial_authority_trend_envoy value = strengthen_authority_trend }
		subtract_variable = { which = imperial_authority_trend_envoy value = undermine_authority_trend }
		set_variable = { which = imperial_authority_trend value = imperial_authority_trend_envoy }
		change_variable = { which = imperial_authority_trend value = var_imperial_authority_monthly_get }
	}
}
add_imperial_authority_MECR = {
	hidden_effect = {
		galactic_emperor = {
			set_variable = { which = add_imperial_authority_MECR value = trigger:imperial_authority }
			change_variable = { which = add_imperial_authority_MECR value = $value$ }
			if = {
				limit = { check_variable = { which = add_imperial_authority_MECR value > 200 } }
				subtract_variable = { which = add_imperial_authority_MECR value = 200 }
				imperial_authority_spill = { value = add_imperial_authority_MECR }
			}
			else_if = {
				limit = { check_variable = { which = add_imperial_authority_MECR value < 0 } }
				imperial_authority_spill = { value = add_imperial_authority_MECR }
			}
		}
	}
	add_imperial_authority = $value$
}
imperial_authority_spill = {
	galactic_emperor = {
		if = {
			limit = { ruler = { has_trait = leader_trait_founder_of_imperium } }
			change_variable = { which = imperial_authority_spilled_accumulated value = $value$ }
			while = {
				limit = { check_variable = { which = imperial_authority_spilled_accumulated value > 200 } }
				ruler = { add_trait = random_common }
				create_message = {
					type = MESSAGE_GAINED_TRAIT
					localization = MESSAGE_GAINED_TRAIT_DESC_leader_trait_founder_of_imperium
					days = 30
					target = ruler
					variable = {
						type = name
						localization = NAME
						scope = ruler
					}
				}
				subtract_variable = { which = imperial_authority_spilled_accumulated value = 200 }
			}
		}
	}
}
add_one_skill_point_for_emperor = {
	galactic_emperor.ruler = {
		if = {
			limit = { has_trait = leader_trait_founder_of_imperium }
			add_trait = random_common
		} 
	}
}

save_cohesion = {
	export_trigger_value_to_variable = {
		trigger = federation_cohesion
		variable = recent_cohesion
	}
}

load_cohesion = {
	add_cohesion = -200
	add_cohesion = 100
	add_cohesion = recent_cohesion
	clear_variable = recent_cohesion
}

add_experience_var = {
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 10000 } } }
		add_experience = 10000
		$scope$ = { subtract_variable = { which = $var$ value = 10000 } }
	}
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 1000 } } }
		add_experience = 1000
		$scope$ = { subtract_variable = { which = $var$ value = 1000 } }
	}
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 100 } } }
		add_experience = 100
		$scope$ = { subtract_variable = { which = $var$ value = 100 } }
	}
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 10 } } }
		add_experience = 10
		$scope$ = { subtract_variable = { which = $var$ value = 10 } }
	}
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 1 } } }
		add_experience = 1
		$scope$ = { subtract_variable = { which = $var$ value = 1 } }
	}
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 0.1 } } }
		add_experience = 1
		$scope$ = { subtract_variable = { which = $var$ value = 0.1 } }
	}
	while = {
		limit = { $scope$ = { check_variable = { which = $var$ value > 0.01 } } }
		add_experience = 1
		$scope$ = { subtract_variable = { which = $var$ value = 0.01 } }
	}
}

no_national_agenda_resolution = {
	hidden_effect = {
		set_timed_country_flag = {
			flag = flag_no_national_agenda_resolution
			days = 1
		}
	}
}

imperial_market_basic_income_calculate = {
	export_resource_income_to_variable = { resource = $resource$ variable = im_$resource$ }
	export_modifier_to_variable = { modifier = country_$resource$_produces_mult variable = im_income_$resource$_multiplier }
	change_variable = { which = im_income_$resource$_multiplier value = 1 }
	multiply_variable = { which = im_income_$resource$ value = im_income_$resource$_multiplier }
	subtract_variable = { which = im_$resource$ value = im_income_$resource$ }
	prev = { change_variable = { which = imperium_market_$resource$ value = prev.im_$resource$ } }
}

start_imperial_gateway_project = { #unused
	solar_system = {
		if = { #无星门
			limit = {
				NOT = {
					any_system_megastructure = {
						OR = {
							is_megastructure_type = gateway_0
							is_megastructure_type = gateway_ruined
							is_megastructure_type = gateway_final
							is_megastructure_type = gateway_restored
						}
					}
				}
			}
			set_star_flag = flag_imperium_gateway_construction
			galactic_emperor = {
				if = {
					limit = { NOT = { has_event_chain = imperial_gateways_construction } }
					begin_event_chain = { event_chain = imperial_gateways_construction target = this }
				}
				enable_special_project = {
					name = IMPERIAL_GATEWAY_CONSTRUCTION
					location = prevprev
				}
			}
		}
		else_if = { #有星门基础
			limit = {
				any_system_megastructure = {
					OR = {
						is_megastructure_type = gateway_0
						is_megastructure_type = gateway_ruined
					}
				}
			}
			if = { #正在升级：立即完成
				limit = {
					any_system_megastructure = {
						OR = {
							is_megastructure_type = gateway_0
							is_megastructure_type = gateway_ruined
						}
						is_upgrading = yes
					}
				}
				random_system_megastructure = {
					limit = {
						OR = {
							is_megastructure_type = gateway_0
							is_megastructure_type = gateway_ruined
						}
						is_upgrading = yes
					}
					upgrade_megastructure_to = gateway_final
					set_name = "NAME_imperial_gateway"
					set_megastructure_flag = imperial_gateway
					add_modifier = { modifier = imperial_gateways_modifier }
				}
				owner = { set_country_flag = flag_imperium_gateways }
			}
			else = { #未在升级
				set_star_flag = flag_imperium_gateway_construction
				random_system_megastructure = {
					limit = {
						OR = {
							is_megastructure_type = gateway_0
							is_megastructure_type = gateway_ruined
						}
					}
					add_modifier = { modifier = imperial_gateways_modifier }
				}
				galactic_emperor = {
					if = {
						limit = { NOT = { has_event_chain = imperial_gateways_construction } }
						begin_event_chain = { event_chain = imperial_gateways_construction target = this }
					}
					enable_special_project = {
						name = IMPERIAL_GATEWAY_RESTORE
						location = prevprev
					}
				}
			}
		}
		else = { #已有星门
			random_system_megastructure = {
				limit = {
					OR = {
						is_megastructure_type = gateway_final
						is_megastructure_type = gateway_restored
					}
				}
				set_name = "NAME_imperial_gateway"
				set_megastructure_flag = imperial_gateway
				add_modifier = { modifier = imperial_gateways_modifier }
			}
			owner = { set_country_flag = flag_imperium_gateways }
		}
	}
}

become_imperial_vassal = {
	set_timed_country_flag = {
		flag = imperial_province_build_up
		days = 1
	}
	if = {
		limit = { is_imperial_province = no }
		if = {
			limit = { is_subject = yes }
			if = {
				limit = {
					OR = {
						any_agreement = { has_active_specialization = specialist_bulwark }
						any_agreement = { has_term_value = { term = specialist_type value = specialist_bulwark } }
					}
				}
				set_subject_of = {
					preset = preset_imperial_$type$_bulwark
					who = galactic_emperor
				}
				imperial_province_instant_conversion_effect = yes
				random_agreement = {
					set_agreement_terms = { specialist_type = imperial_province_specialist_bulwark }
				}
			}
			else_if = {
				limit = {
					OR = {
						any_agreement = { has_active_specialization = specialist_scholarium }
						any_agreement = { has_term_value = { term = specialist_type value = specialist_scholarium } }
					}
				}
				set_subject_of = {
					preset = preset_imperial_$type$_scholarium
					who = galactic_emperor
				}
				imperial_province_instant_conversion_effect = yes
				random_agreement = {
					set_agreement_terms = { specialist_type = imperial_province_specialist_scholarium }
				}
			}
			else_if = {
				limit = {
					OR = {
						any_agreement = { has_active_specialization = specialist_prospectorium }
						any_agreement = { has_term_value = { term = specialist_type value = specialist_prospectorium } }
					}
				}
				set_subject_of = {
					preset = preset_imperial_$type$_prospectorium
					who = galactic_emperor
				}
				imperial_province_instant_conversion_effect = yes
				random_agreement = {
					set_agreement_terms = { specialist_type = imperial_province_specialist_prospectorium }
				}
			}
			else_if = { #其他类型（暂时没法用）
				limit = {
					always = no
					OR = {
						any_agreement = { NOT = { has_active_specialization = specialist_none } }
						any_agreement = {
							NOT = {
								has_term_value = {
									term = specialist_type
									value = specialist_none
								}
							}
						}
					}
				}
				set_subject_of = {
					preset = preset_imperial_$type$_specialist
					who = galactic_emperor
				}
			}
			else = {
				set_subject_of = {
					preset = preset_imperial_$type$
					who = galactic_emperor
				}
				imperial_province_instant_conversion_effect = yes
				random_agreement = {
					set_agreement_terms = { specialist_type = imperial_province_specialist_none }
				}
			}
		}
		else = {
			set_subject_of = {
				preset = preset_imperial_$type$
				who = galactic_emperor
			}
		}
		# 增加忠诚度
		if = {
			limit = {
				OR = {
					any_agreement = { agreement_preset = preset_imperial_province }
					any_agreement = { agreement_preset = preset_imperial_province_bulwark }
					any_agreement = { agreement_preset = preset_imperial_province_scholarium }
					any_agreement = { agreement_preset = preset_imperial_province_prospectorium }
				}
			}
			random_agreement = { add_loyalty = 100 }
		}
		if = {
			limit = {
				OR = {
					any_agreement = { agreement_preset = preset_imperial_senator }
					any_agreement = { agreement_preset = preset_imperial_senator_bulwark }
					any_agreement = { agreement_preset = preset_imperial_senator_scholarium }
					any_agreement = { agreement_preset = preset_imperial_senator_prospectorium }
				}
			}
			random_agreement = { add_loyalty = 200 }
		}
		if = {
			limit = {
				OR = {
					any_agreement = { agreement_preset = preset_imperial_special_economic_zone }
					any_agreement = { agreement_preset = preset_imperial_special_economic_zone_bulwark }
					any_agreement = { agreement_preset = preset_imperial_special_economic_zone_scholarium }
					any_agreement = { agreement_preset = preset_imperial_special_economic_zone_prospectorium }
				}
			}
			random_agreement = { add_loyalty = 100 }
		}
	}
	if = { #根据帝国央行与帝科院法案调整协议
		limit = {
			galactic_emperor = {
				has_federation = yes
				federation = { has_federation_perk = imperium_federation_passive }
			}
		}
		if = {
			limit = {
				galactic_emperor.federation = {
					has_federation_law = imperial_bank_control
				}
			}
			random_agreement = {
				set_imperial_province_resource_subsidies = { value = 0 }
			}
		}
		if = {
			limit = {
				galactic_emperor.federation = {
					has_federation_law = imperial_academy_of_sciences_technical_unification
				}
			}
			random_agreement = {
				set_imperial_province_research_subsidies = { value = 0.9 }
			}
		}
	}
	# 移除忠诚度修正
	erase_modifier = { MOD = divided_patronage }
	add_ethics_compatibility_modifier = yes
}
imperial_province_instant_conversion_effect = {
	galactic_emperor = {
		if = {
			limit = { NOT = { has_modifier = imperial_province_specialisation_instant } }
			add_modifier = {
				modifier = imperial_province_specialisation_instant
				mult = value:imperial_province_specialisation_instant_param
				days = 2
			}
		}
	}
}

create_a_official = {
	create_leader = {
		name = random
		species = owner_main_species
		class = official
		randomize_traits = yes
		effect = {
			if = {
				limit = { years_passed > 100 }
				add_skill = 5
			}
			else_if = {
				limit = { years_passed > 80 }
				add_skill = 4
			}
			else_if = {
				limit = { years_passed > 60 }
				add_skill = 3
			}
			else_if = {
				limit = { years_passed > 40 }
				add_skill = 2
			}
			else_if = {
				limit = { years_passed > 20 }
				add_skill = 1
			}
		}
	}
}

# comp with Vassals Expanded and Reworked - FunEFork
set_imperial_province_resource_subsidies = {
	if = {
		limit = { NOT = { has_global_flag = gf_veru_activated } }
		set_agreement_terms = {
			resource_subsidies_basic = $value$
			resource_subsidies_advanced = $value$
			resource_subsidies_strategic = $value$
		}
	}
	else = {
	}
}
set_imperial_province_research_subsidies = {
	if = {
		limit = { NOT = { has_global_flag = gf_veru_activated } }
		set_agreement_terms = {
			resource_subsidies_research = $value$
		}
	}
	else = {
	}
}

# galactic_emperor_origin
generate_starting_opposers = {
	every_galcom_member = {
		limit = { is_galactic_emperor = no }
		set_variable = { which = support_the_emperor value = 0 }
		# 起源
		if = {
			limit = {
				OR = {
					has_origin = origin_galactic_nemesis
					has_origin = origin_shroudwalker_apprentice
					has_origin = origin_outside_the_border
				}
			}
			change_variable = { which = support_the_emperor value = -10 }
		}
		if = {
			limit = {
				any_country = {
					OR = {
						has_origin = origin_galactic_nemesis
						has_origin = origin_shroudwalker_apprentice
					}
				}
			}
			change_variable = { which = support_the_emperor value = 1 }
		}
		if = {
			limit = {
				OR = {
					has_origin = origin_old_alliance
					has_origin = origin_clone_guard
					has_origin = origin_monopoly_chaebol
					has_origin = origin_prospecting_machine
				}
			}
			change_variable = { which = support_the_emperor value = 10 }
		}
		if = {
			limit = {
				has_origin = origin_internal_border
			}
			change_variable = { which = support_the_emperor value = 2 }
		}
		if = {
			limit = {
				is_subject = yes
				overlord = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			change_variable = { which = support_the_emperor value = -10 }
		}
		# 思潮
		if = {
			limit = { has_ethic = ethic_fanatic_egalitarian }
			change_variable = { which = support_the_emperor value = -3 }
		}
		else_if = {
			limit = { has_ethic = ethic_egalitarian }
			change_variable = { which = support_the_emperor value = -2 }
		}
		else_if = {
			limit = { has_ethic = ethic_fanatic_authoritarian }
			change_variable = { which = support_the_emperor value = 3 }
		}
		else_if = {
			limit = { has_ethic = ethic_authoritarian }
			change_variable = { which = support_the_emperor value = 2 }
		}
		if = {
			limit = { has_ethic = ethic_fanatic_xenophobe }
			change_variable = { which = support_the_emperor value = -2 }
		}
		else_if = {
			limit = { has_ethic = ethic_xenophobe }
			change_variable = { which = support_the_emperor value = -1 }
		}
		else_if = {
			limit = { has_ethic = ethic_fanatic_xenophile }
			change_variable = { which = support_the_emperor value = 1 }
		}
		else_if = {
			limit = { has_ethic = ethic_xenophile }
			change_variable = { which = support_the_emperor value = 2 }
		}
		if = {
			limit = { galactic_emperor = { is_militarist = yes } }
			if = {
				limit = { is_militarist = yes }
				change_variable = { which = support_the_emperor value = 2 }
			}
			else_if = {
				limit = { is_pacifist = yes }
				change_variable = { which = support_the_emperor value = -1 }
			}
		}
		else_if = {
			limit = { galactic_emperor = { is_pacifist = yes } }
			if = {
				limit = { is_pacifist = yes }
				change_variable = { which = support_the_emperor value = 2 }
			}
			else_if = {
				limit = { is_militarist = yes }
				change_variable = { which = support_the_emperor value = -1 }
			}
		}
		if = {
			limit = { galactic_emperor = { is_materialist = yes } }
			if = {
				limit = { is_materialist = yes }
				change_variable = { which = support_the_emperor value = 2 }
			}
			else_if = {
				limit = { is_spiritualist = yes }
				change_variable = { which = support_the_emperor value = -1 }
			}
		}
		else_if = {
			limit = { galactic_emperor = { is_spiritualist = yes } }
			if = {
				limit = { is_spiritualist = yes }
				change_variable = { which = support_the_emperor value = 2 }
			}
			else_if = {
				limit = { is_materialist = yes }
				change_variable = { which = support_the_emperor value = -1 }
			}
		}
		if = {
			limit = { galactic_emperor = { is_gestalt = yes } }
			if = {
				limit = { is_gestalt = yes }
				change_variable = { which = support_the_emperor value = 2 }
			}
		}
		# 人格
		if = {
			limit = {
				OR = {
					has_ai_personality = honorbound_warriors
					has_ai_personality = hegemonic_imperialists
					has_ai_personality = evangelising_zealots
					has_ai_personality = assimilators
				}
			}
			change_variable = { which = support_the_emperor value = -1 }
		}
		if = {
			limit = {
				OR = {
					has_ai_personality = xenophobic_isolationists
					has_ai_personality = imperial_origin_overlord_ai
				}
			}
			change_variable = { which = support_the_emperor value = -3 }
		}
		if = {
			limit = {
				OR = {
					has_ai_personality = metalhead
					has_ai_personality = democratic_crusaders
				}
			}
			change_variable = { which = support_the_emperor value = -5 }
		}
		if = {
			limit = {
				OR = {
					has_ai_personality = ruthless_capitalists
					has_ai_personality = peaceful_traders
					has_ai_personality = migrating_flock
					has_ai_personality = slaving_despots
					has_ai_personality = decadent_hierarchy
					has_ai_personality = harmonious_hierarchy
					has_ai_personality = fanatic_befrienders
					has_ai_personality = servitors
					has_ai_personality = harmonious_hierarchy
					has_ai_personality = harmonious_hierarchy
				}
			}
			change_variable = { which = support_the_emperor value = 1 }
		}
		# 难度
		if = {
			limit = { check_variable = { which = start_empire value = 0 } }
			change_variable = { which = support_the_emperor value = -1 }
		}
		else_if = {
			limit = { check_variable = { which = start_empire value = 4 } }
			change_variable = { which = support_the_emperor value = 1 }
		}
		# 随机变化
		random_list = {
			0 = { change_variable = { which = support_the_emperor value = -3 } modifier = { check_variable = { which = start_empire value = 1 } add = 10 } }
			10 = { change_variable = { which = support_the_emperor value = -2 } }
			10 = { change_variable = { which = support_the_emperor value = -1 } }
			10 = { }
			10 = { change_variable = { which = support_the_emperor value = 1 } }
			10 = { change_variable = { which = support_the_emperor value = 2 } }
			10 = { change_variable = { which = support_the_emperor value = 3 } }
			0 = { change_variable = { which = support_the_emperor value = 4 } modifier = { check_variable = { which = start_empire value = 3 } add = 10 } }
		}
		if = {
			limit = { check_variable = { which = support_the_emperor value < 0 } }
			add_opinion_modifier = {
				who = galactic_emperor
				modifier = opinion_the_dictator
			}
		}
		if = {
			limit = { has_global_flag = flag_MECR_test }
			galactic_emperor = { add_intel = { amount = 100 who = prev } }
			if = {
				limit = { check_variable = { which = support_the_emperor value <= -20 } }
				set_name = "-20"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -19 } }
				set_name = "-19"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -18 } }
				set_name = "-18"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -17 } }
				set_name = "-17"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -16 } }
				set_name = "-16"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -15 } }
				set_name = "-15"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -14 } }
				set_name = "-14"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -13 } }
				set_name = "-13"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -12 } }
				set_name = "-12"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -11 } }
				set_name = "-11"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -10 } }
				set_name = "-10"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -9 } }
				set_name = "-9"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -8 } }
				set_name = "-8"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -7 } }
				set_name = "-7"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -6 } }
				set_name = "-6"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -5 } }
				set_name = "-5"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -4 } }
				set_name = "-4"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -3 } }
				set_name = "-3"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -2 } }
				set_name = "-2"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = -1 } }
				set_name = "-1"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 0 } }
				set_name = "0"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 1 } }
				set_name = "1"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 2 } }
				set_name = "2"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 3 } }
				set_name = "3"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 4 } }
				set_name = "4"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 5 } }
				set_name = "5"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 6 } }
				set_name = "6"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 7 } }
				set_name = "7"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 8 } }
				set_name = "8"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 9 } }
				set_name = "9"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 10 } }
				set_name = "10"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 11 } }
				set_name = "11"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 12 } }
				set_name = "12"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 13 } }
				set_name = "13"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 14 } }
				set_name = "14"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 15 } }
				set_name = "15"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 16 } }
				set_name = "16"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 17 } }
				set_name = "17"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 18 } }
				set_name = "18"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value = 19 } }
				set_name = "19"
			}
			else_if = {
				limit = { check_variable = { which = support_the_emperor value >= 20 } }
				set_name = "20"
			}
		}
	}
	every_playable_country = {
		limit = {
			is_galactic_community_member = no
		}
		add_opinion_modifier = {
			who = galactic_emperor
			modifier = opinion_the_dictator
		}
		if = {
			limit = { has_global_flag = flag_MECR_test }
			galactic_emperor = { add_intel = { amount = 100 who = prev } }
		}
	}
}

imperium_recover_fleet = {
	federation = {
		if = {
			limit = {
				OR = {
					has_federation_law = imperial_armada_conscription_low
					has_federation_law = imperial_armada_conscription_mid
					has_federation_law = imperial_armada_conscription_high
				}
			}
			set_variable = { which = ia_recover_fleet_size value = 0 }
			every_member = {
				limit = { NOT = { has_country_flag = flag_ia_service_exemption } }
				#计算需要删除的舰队
				set_variable = {
					which = should_delete_fleet_size
					value = trigger:used_naval_capacity_integer
				}
				subtract_variable = {
					which = should_delete_fleet_size
					value = trigger:max_naval_capacity
				}
				set_country_flag = flag_imperium_recover_fleet_delete_a_fleet
				while = { #在舰队规模降到舰容以下之前，一直删除舰队
					limit = {
						check_variable = { which = should_delete_fleet_size value > 0 }
						has_country_flag = flag_imperium_recover_fleet_delete_a_fleet
					}
					while = {
						limit = {
							check_variable = { which = should_delete_fleet_size value > 0 }
							has_country_flag = flag_imperium_recover_fleet_delete_a_fleet
						}
						every_owned_fleet = {
							limit = { has_fleet_flag = flag_ia_rec_delete_fleet }
							delete_fleet = this
						}
						remove_country_flag = flag_imperium_recover_fleet_delete_a_fleet
						# 从小规模的舰队开始吃
						random_owned_fleet = {
							limit = {
								any_controlled_ship = { is_ship_class = shipclass_military }
								NOT = { any_controlled_ship = { is_ship_class = shipclass_starbase } }
								fleet_size < 12
							}
							leader = { unassign_leader = this }
							prev = { subtract_variable = { which = should_delete_fleet_size value = prev.trigger:fleet_size } }
							prevprev = { change_variable = { which = ia_recover_fleet_size value = prev.trigger:fleet_size } }
							prev = { set_country_flag = flag_imperium_recover_fleet_delete_a_fleet }
							set_fleet_flag = flag_ia_rec_delete_fleet
						}
						if = {
							limit = { NOT = { has_country_flag = flag_imperium_recover_fleet_delete_a_fleet } }
							random_owned_fleet = {
								limit = {
									any_controlled_ship = { is_ship_class = shipclass_military }
									NOT = { any_controlled_ship = { is_ship_class = shipclass_starbase } }
									fleet_size < 24
								}
								leader = { unassign_leader = this }
								prev = { subtract_variable = { which = should_delete_fleet_size value = prev.trigger:fleet_size } }
								prevprev = { change_variable = { which = ia_recover_fleet_size value = prev.trigger:fleet_size } }
								prev = { set_country_flag = flag_imperium_recover_fleet_delete_a_fleet }
								set_fleet_flag = flag_ia_rec_delete_fleet
							}
						}
						# 不限规模的舰队一艘艘吃
						if = {
							limit = { NOT = { has_country_flag = flag_imperium_recover_fleet_delete_a_fleet } }
							random_owned_fleet = {
								limit = {
									any_controlled_ship = { is_ship_class = shipclass_military }
									NOT = { any_controlled_ship = { is_ship_class = shipclass_starbase } }
								}
								leader = { unassign_leader = this }
								prev = { subtract_variable = { which = should_delete_fleet_size value = prev.trigger:fleet_size } }
								prevprev = { change_variable = { which = ia_recover_fleet_size value = prev.trigger:fleet_size } }
								prev = { set_country_flag = flag_imperium_recover_fleet_delete_a_fleet }
								set_fleet_flag = flag_ia_rec_delete_fleet
							}
						}
					}
				}
				remove_country_flag = flag_imperium_recover_fleet_delete_a_fleet
			}
			federation_leader = {
				set_variable = {	which = ia_recover_fleet_size			value = federation.ia_recover_fleet_size }
				set_variable = {	which = ia_can_receive_fleet_size 		value = 400 }
				change_variable = {	which = ia_can_receive_fleet_size		value = modifier:country_community_gdf_naval_capacity }
				every_owned_fleet = {
					limit = { has_ship_owner_type = galactic_community }
					prev = { subtract_variable = {	which = ia_can_receive_fleet_size 	value = prev.trigger:fleet_size } }
				}
				if = {
					limit = {
						OR = {
							check_variable = { which = ia_can_receive_fleet_size value <= 0 }
							has_country_flag = I_DONT_NEED_THOSE_FLEETS_THROW_THEM_INTO_THE_WRECK_RECYCLING_YARDS
						}
					}
					set_variable = { which = ia_generate_fleet_size value = 0 }
					set_variable = { which = ia_recycle_fleet_size value = ia_recover_fleet_size }
				}
				else_if = {
					limit = {
						check_variable = { which = ia_can_receive_fleet_size value >= ia_recover_fleet_size }
					}
					set_variable = { which = ia_generate_fleet_size value = ia_recover_fleet_size }
					set_variable = { which = ia_recycle_fleet_size value = 0 }
				}
				else_if = {
					limit = {
						check_variable = { which = ia_can_receive_fleet_size value < ia_recover_fleet_size }
					}
					set_variable = { which = ia_generate_fleet_size value = ia_can_receive_fleet_size }
					set_variable = { which = ia_recycle_fleet_size value = ia_recover_fleet_size }
					subtract_variable = { which = ia_recycle_fleet_size value = ia_can_receive_fleet_size }
				}
				# 生成舰队
				export_trigger_value_to_variable = {
					trigger = max_naval_capacity
					variable = federation_leader_naval_cap
				}
				divide_variable = {
					which = ia_generate_fleet_size
					value = federation_leader_naval_cap
				}
				create_fleet_from_naval_cap = {
					fraction = ia_generate_fleet_size
					ship_owner_type = galactic_community
				}
				last_created_fleet = {
					add_modifier = { modifier = fleet_modifier_gdf_no_nc_usage }
				}
				add_resource = {
					alloys = 50
					mult = ia_recycle_fleet_size
				}
				clear_variable = ia_recover_fleet_size
				clear_variable = ia_can_receive_fleet_size
				clear_variable = ia_generate_fleet_size
				clear_variable = ia_recycle_fleet_size
				clear_variable = federation_leader_naval_cap
			}
			clear_variable = ia_recover_fleet_size
		}
	}
}
imperium_recover_fleet_target = {
	federation = {
		if = {
			limit = {
				OR = {
					has_federation_law = imperial_armada_conscription_low
					has_federation_law = imperial_armada_conscription_mid
					has_federation_law = imperial_armada_conscription_high
				}
			}
			set_variable = { which = ia_recover_fleet_size value = 0 }
			prev = {
				#计算需要删除的舰队
				set_variable = {
					which = should_delete_fleet_size
					value = trigger:used_naval_capacity_integer
				}
				subtract_variable = {
					which = should_delete_fleet_size
					value = trigger:max_naval_capacity
				}
				set_country_flag = flag_imperium_recover_fleet_delete_a_fleet
				while = { #在舰队规模降到舰容以下之前，一直删除舰队
					limit = {
						check_variable = { which = should_delete_fleet_size value > 0 }
						has_country_flag = flag_imperium_recover_fleet_delete_a_fleet
					}
					while = {
						limit = {
							check_variable = { which = should_delete_fleet_size value > 0 }
							has_country_flag = flag_imperium_recover_fleet_delete_a_fleet
						}
						every_owned_fleet = {
							limit = { has_fleet_flag = flag_ia_rec_delete_fleet }
							delete_fleet = this
						}
						remove_country_flag = flag_imperium_recover_fleet_delete_a_fleet
						# 从小规模的舰队开始吃
						random_owned_fleet = {
							limit = {
								any_controlled_ship = { is_ship_class = shipclass_military }
								NOT = { any_controlled_ship = { is_ship_class = shipclass_starbase } }
								fleet_size < 12
							}
							leader = { unassign_leader = this }
							prev = { subtract_variable = { which = should_delete_fleet_size value = prev.trigger:fleet_size } }
							prevprev = { change_variable = { which = ia_recover_fleet_size value = prev.trigger:fleet_size } }
							prev = { set_country_flag = flag_imperium_recover_fleet_delete_a_fleet }
							set_fleet_flag = flag_ia_rec_delete_fleet
						}
						if = {
							limit = { NOT = { has_country_flag = flag_imperium_recover_fleet_delete_a_fleet } }
							random_owned_fleet = {
								limit = {
									any_controlled_ship = { is_ship_class = shipclass_military }
									NOT = { any_controlled_ship = { is_ship_class = shipclass_starbase } }
									fleet_size < 24
								}
								leader = { unassign_leader = this }
								prev = { subtract_variable = { which = should_delete_fleet_size value = prev.trigger:fleet_size } }
								prevprev = { change_variable = { which = ia_recover_fleet_size value = prev.trigger:fleet_size } }
								prev = { set_country_flag = flag_imperium_recover_fleet_delete_a_fleet }
								set_fleet_flag = flag_ia_rec_delete_fleet
							}
						}
						# 不限规模的舰队一艘艘吃
						if = {
							limit = { NOT = { has_country_flag = flag_imperium_recover_fleet_delete_a_fleet } }
							random_owned_fleet = {
								limit = {
									any_controlled_ship = { is_ship_class = shipclass_military }
									NOT = { any_controlled_ship = { is_ship_class = shipclass_starbase } }
								}
								leader = { unassign_leader = this }
								prev = { subtract_variable = { which = should_delete_fleet_size value = prev.trigger:fleet_size } }
								prevprev = { change_variable = { which = ia_recover_fleet_size value = prev.trigger:fleet_size } }
								prev = { set_country_flag = flag_imperium_recover_fleet_delete_a_fleet }
								set_fleet_flag = flag_ia_rec_delete_fleet
							}
						}
					}
				}
				remove_country_flag = flag_imperium_recover_fleet_delete_a_fleet
			}
			federation_leader = {
				set_variable = {	which = ia_recover_fleet_size			value = federation.ia_recover_fleet_size }
				set_variable = {	which = ia_can_receive_fleet_size 		value = 400 }
				change_variable = {	which = ia_can_receive_fleet_size		value = modifier:country_community_gdf_naval_capacity }
				every_owned_fleet = {
					limit = { has_ship_owner_type = galactic_community }
					prev = { subtract_variable = {	which = ia_can_receive_fleet_size 	value = prev.trigger:fleet_size } }
				}
				if = {
					limit = {
						OR = {
							check_variable = { which = ia_can_receive_fleet_size value <= 0 }
							has_country_flag = I_DONT_NEED_THOSE_FLEETS_THROW_THEM_INTO_THE_WRECK_RECYCLING_YARDS
						}
					}
					set_variable = { which = ia_generate_fleet_size value = 0 }
					set_variable = { which = ia_recycle_fleet_size value = ia_recover_fleet_size }
				}
				else_if = {
					limit = {
						check_variable = { which = ia_can_receive_fleet_size value >= ia_recover_fleet_size }
					}
					set_variable = { which = ia_generate_fleet_size value = ia_recover_fleet_size }
					set_variable = { which = ia_recycle_fleet_size value = 0 }
				}
				else_if = {
					limit = {
						check_variable = { which = ia_can_receive_fleet_size value < ia_recover_fleet_size }
					}
					set_variable = { which = ia_generate_fleet_size value = ia_can_receive_fleet_size }
					set_variable = { which = ia_recycle_fleet_size value = ia_recover_fleet_size }
					subtract_variable = { which = ia_recycle_fleet_size value = ia_can_receive_fleet_size }
				}
				# 生成舰队
				export_trigger_value_to_variable = {
					trigger = max_naval_capacity
					variable = federation_leader_naval_cap
				}
				divide_variable = {
					which = ia_generate_fleet_size
					value = federation_leader_naval_cap
				}
				create_fleet_from_naval_cap = {
					fraction = ia_generate_fleet_size
					ship_owner_type = galactic_community
				}
				last_created_fleet = {
					add_modifier = { modifier = fleet_modifier_gdf_no_nc_usage }
				}
				add_resource = {
					alloys = 50
					mult = ia_recycle_fleet_size
				}
				clear_variable = ia_recover_fleet_size
				clear_variable = ia_can_receive_fleet_size
				clear_variable = ia_generate_fleet_size
				clear_variable = ia_recycle_fleet_size
				clear_variable = federation_leader_naval_cap
			}
			clear_variable = ia_recover_fleet_size
		}
	}
}

imperial_crusade_score = {
	change_variable = { which = imperial_crusade_my_war_score value = $value$ }
	add_event_chain_counter = {
		event_chain = imperial_crusade_war_score
		counter = my_war_score
		amount = $value$
	}
	event_target:global_event_country = {
		change_variable = { which = imperial_crusade_total_war_score value = $value$ }
	}
	every_galcom_member = {
		add_event_chain_counter = {
			event_chain = imperial_crusade_war_score
			counter = total_war_score
			amount = $value$
		}
	}
}
imperial_crusade_score_crisis = {
	set_variable = { which = imperial_crusade_crisis_score value = $value$ }
	export_trigger_value_to_variable = {
		trigger = check_galaxy_setup_value
		parameters = { setting = crisis_strength_scale }
		variable = crisis_factor
	}
	multiply_variable = { which = crisis_factor value = trigger:additional_crisis_strength }
	multiply_variable = { which = imperial_crusade_crisis_score value = crisis_factor }
	change_variable = { which = imperial_crusade_my_war_score value = imperial_crusade_crisis_score }
	add_event_chain_counter = {
		event_chain = imperial_crusade_war_score
		counter = my_war_score
		amount = imperial_crusade_crisis_score
	}
	event_target:global_event_country = {
		change_variable = { which = imperial_crusade_total_war_score value = prev.imperial_crusade_crisis_score }
	}
	every_galcom_member = {
		add_event_chain_counter = {
			event_chain = imperial_crusade_war_score
			counter = total_war_score
			amount = prev.imperial_crusade_crisis_score
		}
	}
}
imperial_crusade_score_0_5 = {
	if = {
		limit = { NOT = { has_country_flag = imperial_crusade_score_0_5 } }
		set_country_flag = imperial_crusade_score_0_5
	}
	else = {
		remove_country_flag = imperial_crusade_score_0_5
		imperial_crusade_score = { value = 1 }
	}
}

financial_calculate = {
	export_resource_stockpile_to_variable = { resource = $resource$ variable = financial_hand_in_$resource$ }
	if = {
		limit = { check_variable = { which = financial_hand_in_$resource$ value < $min$ } }
		subtract_variable = { which = financial_hand_in_$resource$ value = $min$ }
		add_resource = { $resource$ = -1 mult = financial_hand_in_$resource$ }
		galactic_emperor = { change_variable = { which = financial_income_$resource$ value = prev.financial_hand_in_$resource$ } }
	}
	else_if = {
		limit = { check_variable = { which = financial_hand_in_$resource$ value > $max$ } }
		subtract_variable = { which = financial_hand_in_$resource$ value = $max$ }
		add_resource = { $resource$ = -1 mult = financial_hand_in_$resource$ }
		galactic_emperor = { change_variable = { which = financial_income_$resource$ value = prev.financial_hand_in_$resource$ } }
	}
	else = {
		set_variable = { which = financial_hand_in_$resource$ value = 0 }
	}
}

imperial_department_of_engineering_lvl2_transfer_megaconstructing_slot = {
	every_federation_ally = {
		limit = {
			NOR = {
				has_modifier = rent_in_a_construction_group
				has_modifier = rent_out_a_construction_group
				has_edict = refuse_to_rent_out_construction_groups
			}
		}
		#imperial_department_of_engineering_lvl2_self_check = yes
		set_variable = {
			which = idoe2_free_megaconstructing_slot
			value = value:idoe2_free_megaconstructing_slot
		}
		if = {
			limit = { check_variable = { which = idoe2_free_megaconstructing_slot value > 0 } }
			set_country_flag = flag_can_rent_out_megaconstructing_slot_recent
		}
	}
	if = {
		limit = { any_federation_ally = { has_country_flag = flag_can_rent_out_megaconstructing_slot_recent } }
		random_federation_ally = {
			limit = { has_country_flag = flag_can_rent_out_megaconstructing_slot_recent }
			remove_country_flag = flag_can_rent_out_megaconstructing_slot_recent
			add_modifier = {
				modifier = rent_out_a_construction_group
				days = 31
			}
			change_variable = { which = idoe2_free_megaconstructing_slot value = -1 }
			create_message = {
				type = MESSAGE_TYPE_IDOE2_RENT
				localization = "MESSAGE_TYPE_IDOE2_RENT_OUT"
				days = 7
				target = capital_scope
			}
		}
		remove_modifier = rent_out_a_construction_group
		create_message = {
			type = MESSAGE_TYPE_IDOE2_RENT
			localization = "MESSAGE_TYPE_IDOE2_RETURN"
			days = 7
			target = capital_scope
		}
	}
	else = {
		create_message = {
			type = MESSAGE_TYPE_IDOE2_RENT
			localization = "MESSAGE_TYPE_IDOE2_NO_TEAM_TO_TRANSFER"
			days = 7
			target = capital_scope
		}
	}
	every_federation_ally = {
		limit = { has_country_flag = flag_can_rent_out_megaconstructing_slot_recent }
		remove_country_flag = flag_can_rent_out_megaconstructing_slot_recent
	}
}
imperial_department_of_engineering_lvl2_take_megaconstructing_slot = {
	every_federation_ally = {
		limit = {
			NOR = {
				has_modifier = rent_in_a_construction_group
				has_modifier = rent_out_a_construction_group
				has_edict = refuse_to_rent_out_construction_groups
			}
		}
		#imperial_department_of_engineering_lvl2_self_check = yes
		set_variable = { which = idoe2_free_megaconstructing_slot value = value:idoe2_free_megaconstructing_slot }
		if = {
			limit = { check_variable = { which = idoe2_free_megaconstructing_slot value > 0 } }
			set_country_flag = flag_can_rent_out_megaconstructing_slot_recent
		}
	}
	if = {
		limit = { any_federation_ally = { has_country_flag = flag_can_rent_out_megaconstructing_slot_recent } }
		random_federation_ally = {
			limit = { has_country_flag = flag_can_rent_out_megaconstructing_slot_recent }
			remove_country_flag = flag_can_rent_out_megaconstructing_slot_recent
			add_modifier = {
				modifier = rent_out_a_construction_group
				days = 31
			}
			change_variable = { which = idoe2_free_megaconstructing_slot value = -1 }
			create_message = {
				type = MESSAGE_TYPE_IDOE2_RENT
				localization = "MESSAGE_TYPE_IDOE2_RENT_OUT"
				days = 7
				target = capital_scope
			}
			add_resource = {
				influence = 2.5
				unity = 200
			}
		}
		change_variable = { which = idoe2_rent_in_count value = 1 }
		remove_modifier = rent_in_a_construction_group
		add_modifier = { modifier = rent_in_a_construction_group multiplier = idoe2_rent_in_count }
		create_message = {
			type = MESSAGE_TYPE_IDOE2_RENT
			localization = "MESSAGE_TYPE_IDOE2_RENT_IN"
			days = 7
			target = capital_scope
		}
	}
	else = {
		create_message = {
			type = MESSAGE_TYPE_IDOE2_RENT
			localization = "MESSAGE_TYPE_IDOE2_NO_TEAM_TO_RENT"
			days = 7
			target = capital_scope
		}
		add_resource = {
			influence = 2.5
			unity = 200
		}
	}
	every_federation_ally = {
		limit = { has_country_flag = flag_can_rent_out_megaconstructing_slot_recent }
		remove_country_flag = flag_can_rent_out_megaconstructing_slot_recent
	}
}
imperial_department_of_engineering_lvl2_return_megaconstructing_slot = {
	random_country = {
		limit = { has_modifier = rent_out_a_construction_group }
		remove_modifier = rent_out_a_construction_group
		set_variable = {
			which = idoe2_free_megaconstructing_slot
			value = value:idoe2_free_megaconstructing_slot
		}
		create_message = {
			type = MESSAGE_TYPE_IDOE2_RENT
			localization = "MESSAGE_TYPE_IDOE2_RETURN_BACK"
			days = 7
			target = capital_scope
		}
	}
	subtract_variable = { which = idoe2_rent_in_count value = 1 }
	remove_modifier = rent_in_a_construction_group
	if = {
		limit = { check_variable = { which = idoe2_rent_in_count value > 0 } }
		add_modifier = { modifier = rent_in_a_construction_group multiplier = idoe2_rent_in_count }
	}
	create_message = {
		type = MESSAGE_TYPE_IDOE2_RENT
		localization = "MESSAGE_TYPE_IDOE2_RETURN"
		days = 7
		target = capital_scope
	}
}

imperial_ministry_of_education_lvl_3_check_tradition_finished = {
	if = {
		limit = {
			federation = { NOT = { has_federation_flag = flag_tr_$tradition$ } }
			has_tradition = tr_$tradition$_finish
		}
		federation = {
			set_federation_flag = flag_tr_$tradition$
			change_variable = { which = imoe3_bonus value = 1 }
		}
	}
}

imperial_ministry_of_defence_save_repeatable_military_tech_level = {
	change_variable = { which = $TECH$ value = 1 }
	if = {
		limit = {
			event_target:global_event_country = {
				check_variable = { which = $TECH$_global value < prev.$TECH$ }
			}
		}
	}
}

clear_imperium_modifiers = {
	remove_modifier = ia_take_naval_cap
	remove_modifier = resolution_emperor_imperial_academy_of_sciences_lvl2_scientist_bonus
	remove_modifier = resolution_emperor_imperial_academy_of_sciences_lvl2_scientist_bonus_researcher
	remove_modifier = resolution_emperor_imperial_academy_of_sciences_lvl2_scientist_bonus_analyst
	remove_modifier = resolution_emperor_imperial_academy_of_sciences_lvl2_scientist_bonus_explorer
	remove_modifier = rent_out_a_construction_group
	remove_modifier = rent_in_a_construction_group
	remove_modifier = resolution_emperor_imperial_ministry_of_education_lvl_3
	remove_modifier = imperial_charter
	remove_modifier = resolution_galactic_focus_five_year_plan_shared_prosperity_reward_a
	remove_modifier = resolution_galactic_focus_five_year_plan_shared_prosperity_reward_b
	remove_modifier = imperium_market_all
	remove_modifier = imperium_market_energy
	remove_modifier = imperium_market_minerals
	remove_modifier = imperium_market_food
	remove_modifier = imperium_market_consumer_goods
	remove_modifier = imperium_market_alloys
	remove_modifier = imperium_market_volatile_motes
	remove_modifier = imperium_market_exotic_gases
	remove_modifier = imperium_market_rare_crystals
	remove_modifier = majestic_prestige_senate_againster
	remove_modifier = modifier_condescending_authority
	remove_modifier = expo_ongoing_happiness
	remove_modifier = expo_ongoing_upkeep
	remove_modifier = expo_ongoing_diplomacy
	remove_modifier = expo_science_award_bad
	remove_modifier = expo_science_award_normal
	remove_modifier = expo_science_award_good
	remove_modifier = expo_culture_award_bad
	remove_modifier = expo_culture_award_normal
	remove_modifier = expo_culture_award_good
	remove_modifier = expo_culture_award_good_machine
	remove_modifier = expo_culture_award_good_hive
	remove_modifier = expo_industry_award_bad
	remove_modifier = expo_industry_award_normal
	remove_modifier = expo_industry_award_good
	remove_modifier = expo_industry_award_3rd
	remove_modifier = expo_industry_award_2nd
	remove_modifier = expo_archaeology_award_bad
	remove_modifier = expo_archaeology_award_normal
	remove_modifier = expo_archaeology_award_good
	remove_modifier = expo_history_award_bad
	remove_modifier = expo_history_award_normal
	remove_modifier = expo_history_award_good
	remove_modifier = expo_total_award_bad
	remove_modifier = expo_total_award_normal
	remove_modifier = expo_total_award_good
	remove_modifier = province_modifier_situation_imperial_governance_solidary
	remove_modifier = province_modifier_situation_imperial_governance_authoritative
	remove_modifier = province_modifier_situation_imperial_governance_orderly
	remove_modifier = province_modifier_situation_imperial_governance_disorderly
	remove_modifier = province_modifier_situation_imperial_governance_incontrollable
	remove_modifier = province_civil_war_punishment
	remove_modifier = modifier_operation_disrupt_imperial_governance_7
	every_owned_planet = {
		remove_modifier = ISD_operations
		remove_modifier = planet_modifier_isd_against_planetary_revolt
		remove_modifier = EXPO_AWARD_planetary_industry_design
		remove_modifier = planet_modifier_expo_economic_exchange
	}
	# 帝国门户
	every_owned_megastructure = {
		limit = { has_megastructure_flag = imperial_gateway }
		remove_megastructure_flag = imperial_gateway
		set_name = gateway_final
	}
}
cancel_all_emperor_resolutions = {
	cancel_resolution = resolution_custodian_form_empire
	cancel_resolution = resolution_galactic_empire_imperial_crusade
	cancel_resolution = resolution_emperor_clean_up_ancient_threats
	cancel_resolution = resolution_emperor_united_front
	cancel_resolution = resolution_emperor_galactic_mobilization
	cancel_resolution = resolution_galactic_empire_imperial_crusade_MECR
	cancel_resolution = resolution_emperor_galactic_standard
	pass_resolution_no_cooldown = resolution_custodian_galactic_standard
	cancel_resolution = resolution_emperor_standardizing_weights_and_measures
	cancel_resolution = resolution_emperor_webway_project
	cancel_resolution = resolution_emperor_light_the_astronomican
	cancel_resolution = resolution_emperor_reduce_government_agencies
	cancel_resolution = resolution_emperor_expand_government_agencies
	cancel_resolution = resolution_emperor_pax_galactica
	cancel_resolution = resolution_emperor_the_step_towards_a_united_galaxy
	cancel_resolution = resolution_emperor_imperial_unification
	cancel_resolution = resolution_emperor_imperial_bank
	cancel_resolution = resolution_emperor_isd
	cancel_resolution = resolution_emperor_imperial_academy_of_sciences
	cancel_resolution = resolution_emperor_imperial_department_of_engineering
	cancel_resolution = resolution_emperor_imperial_ministry_of_education
	cancel_resolution = resolution_emperor_imperial_ministry_of_defence
	cancel_resolution = resolution_emperor_ina
	cancel_resolution = resolution_emperor_gto
	cancel_resolution = resolution_emperor_imperial_armada
	cancel_resolution = resolution_emperor_expand_ia
	cancel_resolution = resolution_emperor_expand_ia_3
	cancel_resolution = resolution_emperor_expand_ia_4
	cancel_resolution = resolution_emperor_expand_ia_5
	cancel_resolution = resolution_emperor_expand_ia_6
	cancel_resolution = resolution_emperor_expand_ia_7
	cancel_resolution = resolution_emperor_expand_ia_8
	cancel_resolution = resolution_emperor_expand_ia_9
	cancel_resolution = resolution_emperor_expand_ia_10
	cancel_resolution = resolution_emperor_imperial_legions
	cancel_resolution = resolution_emperor_imperial_legions_extensive_recruitment
	cancel_resolution = resolution_emperor_galactic_monitoring_network
	cancel_resolution = resolution_emperor_imperial_charter
	cancel_resolution = resolution_expel_the_crisis_aspirant
	cancel_resolution = resolution_ia_service_exemption
}

rebel_empires_rebellion_start_effect = {
	hidden_effect = {
		#移除来自帝国的修正
		clear_imperium_modifiers = yes
		#帝国舰队中的我国军人破坏舰船与逃亡
		if= {
			limit = { is_active_resolution = resolution_emperor_imperial_armada }
			set_variable = { which = rebellion_destructed_armada_size value = 0 }
			# 海军征召
			if = {
				limit = {
					exists = galactic_emperor.federation
					galactic_emperor.federation = {
						exists = this
						OR = {
							has_federation_law = imperial_armada_conscription_low
							has_federation_law = imperial_armada_conscription_mid
							has_federation_law = imperial_armada_conscription_high
						}
					}
				}
				change_variable = {
					which = rebellion_destructed_armada_size
					value = IACount_transfer_amount
				}
			}
			# 议案扩军
			if= {
				limit = { is_active_resolution = resolution_emperor_expand_ia }
				set_variable = {
					which = additional_destructed_armada_size
					value = trigger:num_pops
				}
				divide_variable = {
					which = additional_destructed_armada_size
					value = event_target:global_event_country.galactic_imperium_pops
				}
				# 起义比例
				if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_10 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.80 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_9 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.75 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_7 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.75 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_6 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.75 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_5 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.70 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_4 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.65 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia_3 }
					multiply_variable = { which = additional_destructed_armada_size value = 0.50 }
				}
				else_if = {
					limit = { is_active_resolution = resolution_emperor_expand_ia }
					multiply_variable = { which = additional_destructed_armada_size value = 0.45 }
				}
				else = {
					multiply_variable = { which = additional_destructed_armada_size value = 0.40 }
				}
				change_variable = {
					which = rebellion_destructed_armada_size
					value = additional_destructed_armada_size
				}
			}
			# 如果叛乱规模足够40：发起舰队起义
			multiply_variable = {
				which = rebellion_destructed_armada_size
				value = value:rebellion_destructed_armada_percentage
			}
			if = {
				limit = { check_variable = { which = rebellion_destructed_armada_size value > 40 } }
				custom_tooltip = "our_forces_joining_imperial_armada_will_attempt_an_uprising"
				country_event = {
					id = MECR.4010
					days = 6
				}
			}
			else = {
				clear_variable = rebellion_destructed_armada_size
			}
		}
		if = {
			limit = {
				exists = galactic_emperor.federation
				galactic_emperor.federation = {
					exists = this
					OR = {
						has_federation_law = imperial_armada_conscription_low
						has_federation_law = imperial_armada_conscription_mid
						has_federation_law = imperial_armada_conscription_high
					}
				}
			}

			set_variable = {
				which = additional_destructed_armada_size
				value = trigger:num_pops
			}
			divide_variable = {
				which = additional_destructed_armada_size
				value = trigger:num_pops
			}
			every_galcom_member = {
				event_target:global_event_country = {
					change_variable = { which = galactic_imperium_pops value = prev.trigger:num_pops }
				}
			}
		}
	}
	#添加叛军修正
	add_modifier = {
		modifier = imperium_civil_war_rebel_modifier
		years = 10
	}
	hidden_effect = {
		set_variable = { which = rebel_modifier_timer value = 10 }
		country_event = {
			id = MECR.4020
			days = 360
		}
	}
	#帝皇损失对叛军的情报
	galactic_emperor = {
		add_intel = {
			who = root
			amount = -20
		}
	}
}
rebel_armada_destructed = {
	subtract_variable = { which = rebels_destructed_armada_ships value = $value$ }
	remove_country_flag = flag_rebellion_armada_destructed_a_ship
}

senetor_turn_over = {
	export_resource_stockpile_to_variable = { resource = $resource$ variable = senetor_resource }
	add_resource = { $resource$ = -1 mult = senetor_resource }
	galactic_emperor = { add_resource = { $resource$ = 1 mult = prev.senetor_resource } }
}

set_imperial_governance_flag = {
	remove_global_flag = stage_ipg_solidary
	remove_global_flag = stage_ipg_authoritative
	remove_global_flag = stage_ipg_orderly
	remove_global_flag = stage_ipg_disorderly
	remove_global_flag = stage_ipg_incontrollable
	set_timed_global_flag = {
		flag = stage_ipg_$flag$
		days = 31
	}
}
set_imperial_governance_modifier = {
	every_galcom_member = {
		limit = { is_galactic_emperor = no }
		remove_modifier = province_modifier_situation_imperial_governance_solidary
		remove_modifier = province_modifier_situation_imperial_governance_authoritative
		remove_modifier = province_modifier_situation_imperial_governance_orderly
		remove_modifier = province_modifier_situation_imperial_governance_disorderly
		remove_modifier = province_modifier_situation_imperial_governance_incontrollable
		if = {
			limit = { is_imperial_province = yes }
			add_modifier = {
				modifier = province_modifier_situation_imperial_governance_$modifier$
				days = 31
			}
		}
		else = {
			add_modifier = {
				modifier = province_modifier_situation_imperial_governance_$modifier$
				multiplier = 0.5
				days = 31
			}
		}
	}
}
set_imperial_governance_modifier_solidary = {
	# 团结一致参数计算
	event_target:global_event_country = {
		set_variable = { which = situation_imperial_governance_solidary_effect_mult value = root.situation_progress_var }
		subtract_variable = { which = situation_imperial_governance_solidary_effect_mult value = 90 }
		if = {
			limit = { check_variable = { which = situation_imperial_governance_solidary_effect_mult value < 0 } }
			set_variable = { which = situation_imperial_governance_solidary_effect_mult value = 0 }
			if = { #监测flag删除变量
				limit = { has_global_flag = flag_situation_imperial_governance_solidary_variables_set }
				clear_variable = situation_imperial_governance_solidary_effect_mult_half
				clear_variable = situation_imperial_governance_solidary_acceptance
				clear_variable = situation_imperial_governance_solidary_opinion
				clear_variable = sit_impl_gov_soli_display_mult_4
				clear_variable = sit_impl_gov_soli_display_mult_2

				remove_global_flag = flag_situation_imperial_governance_solidary_variables_set
			}
		}
		else = {
			if = {
				limit = { check_variable = { which = situation_imperial_governance_solidary_effect_mult value > 10 } }
				set_variable = { which = situation_imperial_governance_solidary_effect_mult value = 10 }
			}
			if = { #设置flag
				limit = { NOT = { has_global_flag = flag_situation_imperial_governance_solidary_variables_set } }
				set_global_flag = flag_situation_imperial_governance_solidary_variables_set
			}
			# 半倍基础倍率
			set_variable = { which = situation_imperial_governance_solidary_effect_mult_half value = situation_imperial_governance_solidary_effect_mult }
			multiply_variable = { which = situation_imperial_governance_solidary_effect_mult_half value = 0.5 }
			round_variable = situation_imperial_governance_solidary_effect_mult_half
			# 投票同意度*3
			set_variable = { which = situation_imperial_governance_solidary_acceptance value = situation_imperial_governance_solidary_effect_mult }
			multiply_variable = { which = situation_imperial_governance_solidary_acceptance value = 4 }
			round_variable = situation_imperial_governance_solidary_acceptance
			this = { #效果显示用变量
				# 外交评价*15
				set_variable = { which = situation_imperial_governance_solidary_opinion value = situation_imperial_governance_solidary_effect_mult }
				multiply_variable = { which = situation_imperial_governance_solidary_opinion value = 10 }
				round_variable = situation_imperial_governance_solidary_opinion
				# 附庸修正
				set_variable = { which = sit_impl_gov_soli_display_mult_4 value = situation_imperial_governance_solidary_effect_mult }
				multiply_variable = { which = sit_impl_gov_soli_display_mult_4 value = 4 }
				round_variable = sit_impl_gov_soli_display_mult_4
				set_variable = { which = sit_impl_gov_soli_display_mult_2 value = situation_imperial_governance_solidary_effect_mult }
				multiply_variable = { which = sit_impl_gov_soli_display_mult_2 value = 2 }
				round_variable = sit_impl_gov_soli_display_mult_2
			}
			every_galcom_member = {
				limit = { is_galactic_emperor = no }
				remove_modifier = province_modifier_situation_imperial_governance_solidary
				remove_modifier = province_modifier_situation_imperial_governance_authoritative
				remove_modifier = province_modifier_situation_imperial_governance_orderly
				remove_modifier = province_modifier_situation_imperial_governance_disorderly
				remove_modifier = province_modifier_situation_imperial_governance_incontrollable
				if = {
					limit = { is_imperial_province = yes }
					add_modifier = {
						modifier = province_modifier_situation_imperial_governance_solidary
						multiplier = event_target:global_event_country.situation_imperial_governance_solidary_effect_mult
						days = 31
					}
				}
				else = {
					add_modifier = {
						modifier = province_modifier_situation_imperial_governance_solidary
						multiplier = event_target:global_event_country.situation_imperial_governance_solidary_effect_mult_half
						days = 31
					}
				}
			}
		}
	}
}
reset_imperial_governance_modifier = {
	every_galcom_member = {
		limit = { is_galactic_emperor = no }
		remove_modifier = province_modifier_situation_imperial_governance_solidary
		remove_modifier = province_modifier_situation_imperial_governance_authoritative
		remove_modifier = province_modifier_situation_imperial_governance_orderly
		remove_modifier = province_modifier_situation_imperial_governance_disorderly
		remove_modifier = province_modifier_situation_imperial_governance_incontrollable
	}
}

switch_confederation_type = {
	remove_federation_flag = enable_federation_cooldowns
	switch = {
		trigger = has_federation_law
		centralization_minimal_confederation = { set_federation_flag = centralization_minimal_confederation }
		centralization_low_confederation = { set_federation_flag = centralization_low_confederation }
		centralization_medium_confederation = { set_federation_flag = centralization_medium_confederation }
		centralization_high_confederation = { set_federation_flag = centralization_high_confederation }
		centralization_very_high_confederation = { set_federation_flag = centralization_very_high_confederation }
	}
	switch = {
		trigger = has_federation_law
		confederation_bedrock_default = { set_federation_flag = confederation_bedrock_default }
		confederation_bedrock_trade = { set_federation_flag = confederation_bedrock_trade }
		confederation_bedrock_research = { set_federation_flag = confederation_bedrock_research }
		confederation_bedrock_military = { set_federation_flag = confederation_bedrock_military }
		confederation_bedrock_military_complete = { set_federation_flag = confederation_bedrock_military_complete }
		confederation_bedrock_hegemony = { set_federation_flag = confederation_bedrock_hegemony }
		confederation_bedrock_TT_communist = { set_federation_flag = confederation_bedrock_TT_communist }
	}
	switch = {
		trigger = has_federation_law
		fleet_contribution_none = { set_federation_flag = fleet_contribution_none }
		fleet_contribution_low_confederation = { set_federation_flag = fleet_contribution_low_confederation }
		fleet_contribution_medium_confederation = { set_federation_flag = fleet_contribution_medium_confederation }
		fleet_contribution_high_confederation = { set_federation_flag = fleet_contribution_high_confederation }
		fleet_contribution_very_high_confederation = { set_federation_flag = fleet_contribution_very_high_confederation }
		fleet_contribution_combined_fleet_confederation = { set_federation_flag = fleet_contribution_combined_fleet_confederation }
	}
	switch = {
		trigger = has_federation_law
		succession_type_custodian_confederation = { set_federation_flag = succession_type_custodian_confederation }
		succession_type_rotation_confederation = { set_federation_flag = succession_type_rotation_confederation }
	}
	switch = {
		trigger = has_federation_law
		federation_build_fleets_everyone = { set_federation_flag = federation_build_fleets_everyone }
		federation_build_fleets_only_leader = { set_federation_flag = federation_build_fleets_only_leader }
	}
	switch = {
		trigger = has_federation_law
		vote_weight_diplomatic_confederation = { set_federation_flag = vote_weight_diplomatic_confederation }
		vote_weight_equal_confederation = { set_federation_flag = vote_weight_equal_confederation }
	}
	switch = {
		trigger = has_federation_law
		declare_war_unanimous_vote = { set_federation_flag = declare_war_unanimous_vote }
		declare_war_majority_vote = { set_federation_flag = declare_war_majority_vote }
		declare_war_president_vote = { set_federation_flag = declare_war_president_vote }
	}
	switch = {
		trigger = has_federation_law
		invite_members_unanimous_vote = { set_federation_flag = invite_members_unanimous_vote }
		invite_members_majority_vote = { set_federation_flag = invite_members_majority_vote }
		invite_members_president_vote_confederation = { set_federation_flag = invite_members_president_vote_confederation }
	}
	switch = {
		trigger = has_federation_law
		kick_members_majority_vote = { set_federation_flag = kick_members_majority_vote }
		kick_members_senate_confederation = { set_federation_flag = kick_members_senate_confederation }
		kick_members_president_vote_confederation = { set_federation_flag = kick_members_president_vote_confederation }
	}
	switch = {
		trigger = has_federation_law
		free_migration_no = { set_federation_flag = free_migration_no }
		free_migration_yes_confederation = { set_federation_flag = free_migration_yes_confederation }
	}
	switch = {
		trigger = has_federation_law
		treaties_separate_yes_confederation = { set_federation_flag = treaties_separate_yes_confederation }
		treaties_separate_no_confederation = { set_federation_flag = treaties_separate_no_confederation }
	}
	switch = {
		trigger = has_federation_law
		confederation_specialization_choose_vote_deciding = { set_federation_flag = confederation_specialization_choose_vote_deciding }
		confederation_specialization_choose_president_deciding = { set_federation_flag = confederation_specialization_choose_president_deciding }
	}
	save_cohesion = yes
	export_trigger_value_to_variable = {
		trigger = federation_experience
		variable = recent_federation_experience
	}
	set_federation_type = galactic_confederation_$type$
	add_federation_experience = recent_federation_experience
	#clear_variable = recent_federation_experience
	switch = {
		trigger = has_federation_flag
		centralization_minimal_confederation = { set_federation_law = centralization_minimal_confederation }
		centralization_low_confederation = { set_federation_law = centralization_low_confederation }
		centralization_medium_confederation = { set_federation_law = centralization_medium_confederation }
		centralization_high_confederation = { set_federation_law = centralization_high_confederation }
		centralization_very_high_confederation = { set_federation_law = centralization_very_high_confederation }
	}
	switch = {
		trigger = has_federation_flag
		confederation_bedrock_default = { set_federation_law = confederation_bedrock_default }
		confederation_bedrock_trade = { set_federation_law = confederation_bedrock_trade }
		confederation_bedrock_research = { set_federation_law = confederation_bedrock_research }
		confederation_bedrock_military = { set_federation_law = confederation_bedrock_military }
		confederation_bedrock_military_complete = { set_federation_law = confederation_bedrock_military_complete }
		confederation_bedrock_hegemony = { set_federation_law = confederation_bedrock_hegemony }
		confederation_bedrock_TT_communist = { set_federation_law = confederation_bedrock_TT_communist }
	}
	switch = {
		trigger = has_federation_flag
		fleet_contribution_none = { set_federation_law = fleet_contribution_none }
		fleet_contribution_low_confederation = { set_federation_law = fleet_contribution_low_confederation }
		fleet_contribution_medium_confederation = { set_federation_law = fleet_contribution_medium_confederation }
		fleet_contribution_high_confederation = { set_federation_law = fleet_contribution_high_confederation }
		fleet_contribution_very_high_confederation = { set_federation_law = fleet_contribution_very_high_confederation }
		fleet_contribution_combined_fleet_confederation = { set_federation_law = fleet_contribution_combined_fleet_confederation }
	}
	switch = {
		trigger = has_federation_flag
		succession_type_custodian_confederation = { set_federation_law = succession_type_custodian_confederation }
		succession_type_rotation_confederation = { set_federation_law = succession_type_rotation_confederation }
	}
	switch = {
		trigger = has_federation_flag
		federation_build_fleets_everyone = { set_federation_law = federation_build_fleets_everyone }
		federation_build_fleets_only_leader = { set_federation_law = federation_build_fleets_only_leader }
	}
	switch = {
		trigger = has_federation_flag
		vote_weight_diplomatic_confederation = { set_federation_law = vote_weight_diplomatic_confederation }
		vote_weight_equal_confederation = { set_federation_law = vote_weight_equal_confederation }
	}
	switch = {
		trigger = has_federation_flag
		declare_war_unanimous_vote = { set_federation_law = declare_war_unanimous_vote }
		declare_war_majority_vote = { set_federation_law = declare_war_majority_vote }
		declare_war_president_vote = { set_federation_law = declare_war_president_vote }
	}
	switch = {
		trigger = has_federation_flag
		invite_members_unanimous_vote = { set_federation_law = invite_members_unanimous_vote }
		invite_members_majority_vote = { set_federation_law = invite_members_majority_vote }
		invite_members_president_vote_confederation = { set_federation_law = invite_members_president_vote_confederation }
	}
	switch = {
		trigger = has_federation_flag
		kick_members_majority_vote = { set_federation_law = kick_members_majority_vote }
		kick_members_senate_confederation = { set_federation_law = kick_members_senate_confederation }
		kick_members_president_vote_confederation = { set_federation_law = kick_members_president_vote_confederation }
	}
	switch = {
		trigger = has_federation_flag
		free_migration_no = { set_federation_law = free_migration_no }
		free_migration_yes_confederation = { set_federation_law = free_migration_yes_confederation }
	}
	switch = {
		trigger = has_federation_flag
		treaties_separate_yes_confederation = { set_federation_law = treaties_separate_yes_confederation }
		treaties_separate_no_confederation = { set_federation_law = treaties_separate_no_confederation }
	}
	switch = {
		trigger = has_federation_flag
		confederation_specialization_choose_vote_deciding = { set_federation_law = confederation_specialization_choose_vote_deciding }
		confederation_specialization_choose_president_deciding = { set_federation_law = confederation_specialization_choose_president_deciding }
	}
	remove_federation_flag = centralization_minimal_confederation
	remove_federation_flag = centralization_low_confederation
	remove_federation_flag = centralization_medium_confederation
	remove_federation_flag = centralization_high_confederation
	remove_federation_flag = centralization_very_high_confederation
	remove_federation_flag = confederation_bedrock_default
	remove_federation_flag = confederation_bedrock_trade
	remove_federation_flag = confederation_bedrock_research
	remove_federation_flag = confederation_bedrock_military
	remove_federation_flag = confederation_bedrock_military_complete
	remove_federation_flag = confederation_bedrock_hegemony
	remove_federation_flag = confederation_bedrock_TT_communist
	remove_federation_flag = fleet_contribution_none
	remove_federation_flag = fleet_contribution_low_confederation
	remove_federation_flag = fleet_contribution_medium_confederation
	remove_federation_flag = fleet_contribution_high_confederation
	remove_federation_flag = fleet_contribution_very_high_confederation
	remove_federation_flag = fleet_contribution_combined_fleet_confederation
	remove_federation_flag = succession_type_custodian_confederation
	remove_federation_flag = succession_type_rotation_confederation
	remove_federation_flag = federation_build_fleets_everyone
	remove_federation_flag = federation_build_fleets_only_leader
	remove_federation_flag = vote_weight_diplomatic_confederation
	remove_federation_flag = vote_weight_equal_confederation
	remove_federation_flag = declare_war_unanimous_vote
	remove_federation_flag = declare_war_majority_vote
	remove_federation_flag = declare_war_president_vote
	remove_federation_flag = invite_members_unanimous_vote
	remove_federation_flag = invite_members_majority_vote
	remove_federation_flag = invite_members_president_vote_confederation
	remove_federation_flag = kick_members_majority_vote
	remove_federation_flag = kick_members_senate_confederation
	remove_federation_flag = kick_members_president_vote_confederation
	remove_federation_flag = free_migration_no
	remove_federation_flag = free_migration_yes_confederation
	remove_federation_flag = treaties_separate_yes_confederation
	remove_federation_flag = treaties_separate_no_confederation
	remove_federation_flag = confederation_specialization_choose_vote_deciding
	remove_federation_flag = confederation_specialization_choose_president_deciding
	set_federation_flag = enable_federation_cooldowns
	load_cohesion = yes
}

set_province_specialist = {
	every_agreement = {
		# 设置类型
		if = {
			limit = {
				OR = {
					agreement_preset = preset_imperial_province
					agreement_preset = preset_imperial_province_bulwark
					agreement_preset = preset_imperial_province_scholarium
					agreement_preset = preset_imperial_province_prospectorium
				}
			}
			set_agreement_preset = {
				preset = preset_imperial_province_$type$
				apply_terms = no
			}
			hidden_effect = {
				set_agreement_terms = {
					specialist_type = imperial_province_specialist_$type$
				}
			}
		}
		else_if = {
			limit = {
				OR = {
					agreement_preset = preset_imperial_senator
					agreement_preset = preset_imperial_senator_bulwark
					agreement_preset = preset_imperial_senator_scholarium
					agreement_preset = preset_imperial_senator_prospectorium
				}
			}
			set_agreement_preset = {
				preset = preset_imperial_senator_$type$
				apply_terms = no
			}
			hidden_effect = {
				set_agreement_terms = {
					specialist_type = imperial_province_specialist_$type$
				}
			}
		}
		else_if = {
			limit = {
				OR = {
					agreement_preset = preset_imperial_special_economic_zone
					agreement_preset = preset_imperial_special_economic_zone_bulwark
					agreement_preset = preset_imperial_special_economic_zone_scholarium
					agreement_preset = preset_imperial_special_economic_zone_prospectorium
				}
			}
			set_agreement_preset = {
				preset = preset_imperial_special_economic_zone_$type$
				apply_terms = no
			}
			hidden_effect = {
				set_agreement_terms = {
					specialist_type = imperial_province_specialist_$type$
				}
			}
		}
	}
}
reset_province_specialist = {
	every_agreement = {
		if = {
			limit = {
				has_term_value = {
					term = specialist_type
					value = imperial_province_specialist_bulwark
				}
			}
			set_agreement_flag = flag_bulwark_to_other
		}
		# 设置类型
		if = {
			limit = {
				OR = {
					agreement_preset = preset_imperial_province_bulwark
					agreement_preset = preset_imperial_province_scholarium
					agreement_preset = preset_imperial_province_prospectorium
				}
			}
			set_agreement_preset = {
				preset = preset_imperial_province
				apply_terms = no
			}
			set_agreement_terms = {
				specialist_type = imperial_province_specialist_none
			}
		}
		else_if = {
			limit = {
				OR = {
					agreement_preset = preset_imperial_senator_bulwark
					agreement_preset = preset_imperial_senator_scholarium
					agreement_preset = preset_imperial_senator_prospectorium
				}
			}
			set_agreement_preset = {
				preset = preset_imperial_senator
				apply_terms = no
			}
			set_agreement_terms = {
				specialist_type = imperial_province_specialist_none
			}
		}
		else_if = {
			limit = {
				OR = {
					agreement_preset = preset_imperial_special_economic_zone_bulwark
					agreement_preset = preset_imperial_special_economic_zone_scholarium
					agreement_preset = preset_imperial_special_economic_zone_prospectorium
				}
			}
			set_agreement_preset = {
				preset = preset_imperial_special_economic_zone
				apply_terms = no
			}
			set_agreement_terms = {
				specialist_type = imperial_province_specialist_none
			}
		}
		# 如果是戍邦与其他特化之间的转换，设置资源贡献
		if = {
			limit = {
				has_agreement_flag = flag_bulwark_to_other
			}
			set_imperial_province_resource_subsidies = { value = 0.3 }
		}
		remove_agreement_flag = flag_bulwark_to_other
	}
}

forced_become_province_by_war = {
	if = {
		limit = {
			OR = {
				any_agreement = { has_active_specialization = specialist_bulwark }
				any_agreement = { has_term_value = { term = specialist_type value = specialist_bulwark } }
			}
		}
		set_subject_of = {
			who = ROOT
			preset = preset_imperial_province_bulwark
		}
	}
	else_if = {
		limit = {
			OR = {
				any_agreement = { has_active_specialization = specialist_scholarium }
				any_agreement = { has_term_value = { term = specialist_type value = specialist_scholarium } }
			}
		}
		set_subject_of = {
			who = ROOT
			preset = preset_imperial_province_scholarium
		}
	}
	else_if = {
		limit = {
			OR = {
				any_agreement = { has_active_specialization = specialist_prospectorium }
				any_agreement = { has_term_value = { term = specialist_type value = specialist_prospectorium } }
			}
		}
		set_subject_of = {
			who = ROOT
			preset = preset_imperial_province_prospectorium
		}
	}
	else = {
		set_subject_of = {
			who = ROOT
			preset = preset_imperial_province
		}
	}
	add_modifier = {
		modifier = newly_subjugated_loyalty
		years = 5
	}
	hidden_effect = {
		country_event = {
			id = MECR.120
		}
	}
}

financial_income_statistic = {
	subtract_variable = { which = financial_year_energy				value = financial_$month$_energy }
	subtract_variable = { which = financial_year_minerals			value = financial_$month$_minerals }
	subtract_variable = { which = financial_year_food				value = financial_$month$_food }
	subtract_variable = { which = financial_year_alloys				value = financial_$month$_alloys }
	subtract_variable = { which = financial_year_consumer_goods		value = financial_$month$_consumer_goods }
	subtract_variable = { which = financial_year_volatile_motes		value = financial_$month$_volatile_motes }
	subtract_variable = { which = financial_year_rare_crystals		value = financial_$month$_rare_crystals }
	subtract_variable = { which = financial_year_exotic_gases		value = financial_$month$_exotic_gases }

	set_variable = { which = financial_$month$_energy				value = financial_income_energy }
	set_variable = { which = financial_$month$_minerals				value = financial_income_minerals }
	set_variable = { which = financial_$month$_food					value = financial_income_food }
	set_variable = { which = financial_$month$_alloys				value = financial_income_alloys }
	set_variable = { which = financial_$month$_consumer_goods		value = financial_income_consumer_goods }
	set_variable = { which = financial_$month$_volatile_motes		value = financial_income_volatile_motes }
	set_variable = { which = financial_$month$_rare_crystals		value = financial_income_rare_crystals }
	set_variable = { which = financial_$month$_exotic_gases			value = financial_income_exotic_gases }
	
	change_variable = { which = financial_year_energy				value = financial_$month$_energy }
	change_variable = { which = financial_year_minerals				value = financial_$month$_minerals }
	change_variable = { which = financial_year_food					value = financial_$month$_food }
	change_variable = { which = financial_year_alloys				value = financial_$month$_alloys }
	change_variable = { which = financial_year_consumer_goods		value = financial_$month$_consumer_goods }
	change_variable = { which = financial_year_volatile_motes		value = financial_$month$_volatile_motes }
	change_variable = { which = financial_year_rare_crystals		value = financial_$month$_rare_crystals }
	change_variable = { which = financial_year_exotic_gases			value = financial_$month$_exotic_gases }
}
financial_income_year_statistic = {
	export_trigger_value_to_variable = { trigger = years_passed variable = financial_last_year_YEAR }
	change_variable = { which = financial_last_year_YEAR value = 2199 }
	set_variable = { which = financial_last_year_energy					value = financial_year_energy }
	set_variable = { which = financial_last_year_minerals				value = financial_year_minerals }
	set_variable = { which = financial_last_year_food					value = financial_year_food }
	set_variable = { which = financial_last_year_alloys					value = financial_year_alloys }
	set_variable = { which = financial_last_year_consumer_goods			value = financial_year_consumer_goods }
	set_variable = { which = financial_last_year_volatile_motes			value = financial_year_volatile_motes }
	set_variable = { which = financial_last_year_rare_crystals			value = financial_year_rare_crystals }
	set_variable = { which = financial_last_year_exotic_gases			value = financial_year_exotic_gases }
	round_variable = financial_last_year_energy
	round_variable = financial_last_year_minerals
	round_variable = financial_last_year_food
	round_variable = financial_last_year_alloys
	round_variable = financial_last_year_consumer_goods
	round_variable = financial_last_year_volatile_motes
	round_variable = financial_last_year_rare_crystals
	round_variable = financial_last_year_exotic_gases
	create_message = {
		type = MESSAGE_TYPE_IMPERIAL_FINANCE_YEARLY
		localization = "MESSAGE_TYPE_IMPERIAL_FINANCE_YEARLY_LOCAL"
		days = 72
		target = this
	}
}
clear_financial_income_statistic = {
	clear_variable = financial_$month$_energy
	clear_variable = financial_$month$_minerals
	clear_variable = financial_$month$_food
	clear_variable = financial_$month$_alloys
	clear_variable = financial_$month$_consumer_goods
	clear_variable = financial_$month$_volatile_motes
	clear_variable = financial_$month$_rare_crystals
	clear_variable = financial_$month$_exotic_gases
}
clear_financial_income_year_statistic = {
	clear_variable = financial_year_energy
	clear_variable = financial_year_minerals
	clear_variable = financial_year_food
	clear_variable = financial_year_alloys
	clear_variable = financial_year_consumer_goods
	clear_variable = financial_year_volatile_motes
	clear_variable = financial_year_rare_crystals
	clear_variable = financial_year_exotic_gases

	clear_variable = financial_last_year_YEAR
	clear_variable = financial_last_year_energy
	clear_variable = financial_last_year_minerals
	clear_variable = financial_last_year_food
	clear_variable = financial_last_year_alloys
	clear_variable = financial_last_year_consumer_goods
	clear_variable = financial_last_year_volatile_motes
	clear_variable = financial_last_year_rare_crystals
	clear_variable = financial_last_year_exotic_gases
}

add_federation_law_cooldown = {
	if = {
		limit = { has_federation_perk = imperium_federation_passive }
		remove_modifier = $modifier$
		add_modifier = {
			modifier = $modifier$
			days = @federation_law_cooldown_imperium
		}
	}
	else_if = {
		limit = {
			has_federation_perk = galactic_confederation_passive
			OR = {
				has_federation_law = centralization_high_confederation
				has_federation_law = centralization_very_high_confederation
			}
		}
		add_modifier = {
			modifier = $modifier$
			days = @federation_law_cooldown_very_short
		}
	}
	else_if = {
		limit = { has_federation_perk = galactic_confederation_passive }
		add_modifier = {
			modifier = $modifier$
			days = @federation_law_cooldown_short
		}
	}
	else_if = {
		limit = { has_federation_perk = rebel_coalition_passive }
		add_modifier = {
			modifier = $modifier$
			days = @federation_law_cooldown_short
		}
	}
	else = {
		add_modifier = {
			modifier = $modifier$
			days = @federation_law_cooldown
		}
	}
}

add_imperium_federation_law_cooldown_centralization = {
	add_federation_law_cooldown = { modifier = federation_law_category_centralization_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_centralization_imperium_cooldown }
}
add_imperium_federation_law_cooldown_laws = {
	add_federation_law_cooldown = { modifier = federation_law_category_imperium_laws_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperial_armada_conscription_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_service_exemption_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperium_free_migration_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperium_ai_policy_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperium_slavery_policy_cooldown }
}
add_imperium_federation_law_cooldown_institutions = {
	add_federation_law_cooldown = { modifier = federation_law_category_imperium_institutions_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperial_bank_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_isd_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperial_academy_of_sciences_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperial_department_of_engineering_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperial_ministry_of_education_cooldown }
	add_federation_law_cooldown = { modifier = federation_law_category_imperial_ministry_of_defence_cooldown}
}

add_imperial_governance = {
	galactic_emperor = {
		change_variable = {
			which = imperial_governance_capacity_cheat
			value = $value$
		}
		remove_modifier = modifier_imperial_governance_capacity_cheat
		if = {
			limit = {
				NOT = {
					check_variable = { which = imperial_governance_capacity_cheat value = 0 }
				}
			}
			add_modifier = {
				modifier = modifier_imperial_governance_capacity_cheat
				mult = imperial_governance_capacity_cheat
				days = 31
			}
		}
	}
}
pass_resolution_modifier = {
	hidden_effect = {
		set_global_flag = galactic_community_resolution_passed
		set_timed_country_flag = {
			flag = galactic_community_resolution_passed_$CATEGORY$
			days = @resolution_flag_timer
		}
		add_modifier = {
			modifier = resolution_passed_diplomatic_weight
			days = 2200
		}
	}
}
fail_resolution_modifier = {
	hidden_effect = {
		set_timed_country_flag = {
			flag = galactic_community_resolution_failed_$CATEGORY$
			days = @resolution_flag_timer
		}
		add_modifier = {
			modifier = resolution_failed_diplomatic_weight
			days = 2200
		}
	}
}
from_pass_resolution_modifier = {
	hidden_effect = {
		from = {
			set_global_flag = galactic_community_resolution_passed
			set_timed_country_flag = {
				flag = galactic_community_resolution_passed_$CATEGORY$
				days = @resolution_flag_timer
			}
			add_modifier = {
				modifier = resolution_passed_diplomatic_weight
				days = 2200
			}
		}
	}
}
from_fail_resolution_modifier = {
	hidden_effect = {
		from = {
			set_timed_country_flag = {
				flag = galactic_community_resolution_failed_$CATEGORY$
				days = @resolution_flag_timer
			}
			add_modifier = {
				modifier = resolution_failed_diplomatic_weight
				days = 2200
			}
		}
	}
}

operation_provincial_administrative_supervision_roll_event = {
	custom_tooltip = operation_provincial_administrative_supervision_roll_event_tooltip
	hidden_effect = {
		#set_provincial_administrative_supervision_effect = yes
		if = {
			limit = { spynetwork = { NOT = { exists = leader } } }
			destroy_espionage_operation = this
		}
		else_if = {
			limit = { always = no } #还没写好，暂时不用
			set_variable = {
				which = espionage_operation_score
				value = value:espionage_operation_score
			}
			set_variable = {
				which = operation_provincial_administrative_supervision_roll_event_nothing_factor
				value = value:operation_provincial_administrative_supervision_roll_event_nothing_factor
			}
			random_list = { # 基础发生概率受掷骰结果影响
				1 = { #无事发生trigger:is_espionage_operation_last_die_result
					mult = operation_provincial_administrative_supervision_roll_event_nothing_factor
				}
				# 积极合作：增加谍报网增长速度，提高好结果概率，不能进行反对行动
				# 消极抵抗：降低谍报网增长速度，提高坏结果概率，反对行动被发现的概率降低
				1 = { #好结果：行政高效
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = {
						mult = 0.2
						target = { has_modifier = provincial_administrative_supervision_administrative_efficiency }
					}
					modifier = {
						mult = 2
						target = { is_gestalt = yes }
					}
					target = {
						country_event = {
							id = MECR.361
						}
					}
				}
				1 = { #好结果：遏止腐败
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = { #没有腐败领袖
						mult = 0
						target = {
							NOT = {
								any_owned_leader = {
									OR = {
										has_trait = leader_trait_corrupt
										has_trait = leader_trait_corrupt_2
									}
								}
							}
						}
					}
					target = {
						country_event = {
							id = MECR.362
						}
					}
				}
				1 = { #好结果：打击犯罪
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = { #没有犯罪星球
						mult = 0
						target = {
							NOT = {
								any_owned_planet = {
									OR = {
										has_modifier = criminal_underworld
										has_modifier = drone_deviancy
										has_modifier = drone_corruption
									}
								}
							}
						}
					}
					target = {
						country_event = {
							id = MECR.363
						}
					}
				}
				1 = { #好结果：挚诚协作
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = {
						mult = 0.2
						galactic_emperor = {
							has_opinion_modifier = {
								who = prev.target
								modifier = opinion_emp_to_pro_provincial_administrative_supervision_good_cooperation
							}
						}
					}
					target = {
						country_event = {
							id = MECR.364
						}
					}
				}
				1 = { #好结果：人民满意
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = {
						mult = 0
						target = { is_gestalt = yes }
					}
					modifier = {
						mult = 0.2
						has_modifier = provincial_administrative_supervision_well_done
					}
					target = {
						country_event = {
							id = MECR.365
						}
					}
				}
		
				1 = { #坏结果：政府混乱
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
					modifier = {
						mult = 0.2
						target = { has_modifier = provincial_administrative_supervision_government_confusion }
					}
					target = {
						country_event = {
							id = MECR.371
						}
					}
				}
				1 = { #坏结果：帝皇愤怒
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
					modifier = {
						mult = 0.2
						galactic_emperor = {
							has_opinion_modifier = {
								who = prev.target
								modifier = opinion_emp_to_pro_provincial_administrative_supervision_emperor_angry
							}
						}
					}
					target = {
						country_event = {
							id = MECR.372
						}
					}
				}
				1 = { #坏结果：
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
		
				}
				1 = { #坏结果：
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
		
				}
		
				1 = { #察觉反对行动：扰乱行政
					modifier = {
						mult = 0.5
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
					modifier = {
						mult = 0
						target = {
							NOT = {
								any_espionage_operation = {
									has_espionage_type = operation_disrupt_imperial_governance
								}
							}
						}
					}
		
				}
				1 = { #察觉反对行动：削弱权威
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = {
						mult = 0.5
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
					modifier = {
						mult = 0
						target = {
							NOT = {
								any_espionage_operation = {
									has_espionage_type = operation_weaken_galactic_empire
								}
							}
						}
					}
		
				}
				1 = { #察觉反对行动：谋划反叛
					modifier = {
						mult = 2
						target = { has_policy_flag = provincial_administrative_supervision_cooperate }
					}
					modifier = {
						mult = 0.5
						target = { has_policy_flag = provincial_administrative_supervision_resist }
					}
					modifier = {
						mult = 0
						target = {
							NOT = {
								any_espionage_operation = {
									OR = {
										has_espionage_type = operation_spark_rebellion
										has_espionage_type = operation_spark_rebellion_MECR
									}
								}
							}
						}
					}
		
				}
			}
		}
	}
}

# UNUSED
imperial_treasury_calculate = {
	export_resource_stockpile_to_variable = { resource = $resource$ variable = imperial_treasury_$resource$ }
	# 资源入库
	change_variable = { which = imperial_treasury_$resource$ value = financial_income_$resource$ }
	add_resource = { $resource$ = 1 mult = financial_income_$resource$ }
	# 如果亏空，找皇帝补齐
	if = {
		limit = { check_variable = { which = imperial_treasury_$resource$ value < 0 } }
		galactic_emperor = {
			add_resource = { $resource$ = 1 mult = prev.imperial_treasury_$resource$ }
			create_message = {
				type = MESSAGE_TYPE_IMPERIAL_TREASURY
				localization = "MESSAGE_TYPE_IMPERIAL_TREASURY_$resource$"
				days = 30
				target = no_scope
			}
		}
		set_variable = { which = imperial_treasury_$resource$ value = 0 }
	}
	# 年度统计
	subtract_variable = { which = financial_income_$resource$_year value = financial_income_$resource$_12 }
	change_variable = { which = financial_income_$resource$_year value = financial_income_$resource$ }
	# 月度统计
	set_variable = { which = financial_income_$resource$_12 value = financial_income_$resource$_11 }
	set_variable = { which = financial_income_$resource$_11 value = financial_income_$resource$_10 }
	set_variable = { which = financial_income_$resource$_10 value = financial_income_$resource$_9 }
	set_variable = { which = financial_income_$resource$_9 value = financial_income_$resource$_8 }
	set_variable = { which = financial_income_$resource$_8 value = financial_income_$resource$_7 }
	set_variable = { which = financial_income_$resource$_7 value = financial_income_$resource$_6 }
	set_variable = { which = financial_income_$resource$_6 value = financial_income_$resource$_5 }
	set_variable = { which = financial_income_$resource$_5 value = financial_income_$resource$_4 }
	set_variable = { which = financial_income_$resource$_4 value = financial_income_$resource$_3 }
	set_variable = { which = financial_income_$resource$_3 value = financial_income_$resource$_2 }
	set_variable = { which = financial_income_$resource$_2 value = financial_income_$resource$_1 }
	set_variable = { which = financial_income_$resource$_1 value = financial_income_$resource$ }
	# 年度统计
	subtract_variable = { which = emperor_stock_$resource$_year value = emperor_stock_$resource$_12 }
	change_variable = { which = emperor_stock_$resource$_year value = emperor_stock_$resource$ }
	# 月度统计
	set_variable = { which = emperor_stock_$resource$_12 value = emperor_stock_$resource$_11 }
	set_variable = { which = emperor_stock_$resource$_11 value = emperor_stock_$resource$_10 }
	set_variable = { which = emperor_stock_$resource$_10 value = emperor_stock_$resource$_9 }
	set_variable = { which = emperor_stock_$resource$_9 value = emperor_stock_$resource$_8 }
	set_variable = { which = emperor_stock_$resource$_8 value = emperor_stock_$resource$_7 }
	set_variable = { which = emperor_stock_$resource$_7 value = emperor_stock_$resource$_6 }
	set_variable = { which = emperor_stock_$resource$_6 value = emperor_stock_$resource$_5 }
	set_variable = { which = emperor_stock_$resource$_5 value = emperor_stock_$resource$_4 }
	set_variable = { which = emperor_stock_$resource$_4 value = emperor_stock_$resource$_3 }
	set_variable = { which = emperor_stock_$resource$_3 value = emperor_stock_$resource$_2 }
	set_variable = { which = emperor_stock_$resource$_2 value = emperor_stock_$resource$_1 }
	set_variable = { which = emperor_stock_$resource$_1 value = emperor_stock_$resource$ }
}
imperial_treasury_change = {
	add_resource = { $resource$ = -1 mult = $amount$ }
	event_target:imperial_treasury_country = {
		add_resource = { $resource$ = 1 mult = $amount$ }
		export_resource_stockpile_to_variable = {
			resource = $resource$
			variable = imperial_treasury_$resource$
		}
		change_variable = { which = emperor_stock_$resource$ value = $amount$ }
	}
}
initialize_treasury_variables = {
	set_variable = { which = imperial_treasury_$resource$ value = 0 }
	set_variable = { which = financial_income_$resource$ value = 0 }
	set_variable = { which = financial_income_$resource$_year value = 0 }
	set_variable = { which = financial_income_$resource$_12 value = 0 }
	set_variable = { which = financial_income_$resource$_11 value = 0 }
	set_variable = { which = financial_income_$resource$_10 value = 0 }
	set_variable = { which = financial_income_$resource$_9 value = 0 }
	set_variable = { which = financial_income_$resource$_8 value = 0 }
	set_variable = { which = financial_income_$resource$_7 value = 0 }
	set_variable = { which = financial_income_$resource$_6 value = 0 }
	set_variable = { which = financial_income_$resource$_5 value = 0 }
	set_variable = { which = financial_income_$resource$_4 value = 0 }
	set_variable = { which = financial_income_$resource$_3 value = 0 }
	set_variable = { which = financial_income_$resource$_2 value = 0 }
	set_variable = { which = financial_income_$resource$_1 value = 0 }
}

debug_consship_check = {
	if = {
		limit = {
			has_fleet_order = build_megastructure_fleet_order
		}
		custom_tooltip = "build_megastructure_fleet_order"
		if = {
			limit = {
				OR = {
					is_constructing = gateway_0
					is_constructing = habitat_central_complex
				}
			}
			custom_tooltip = "build_gateway_0/habitat_0"
		}
	}
	else = {
		switch = {
			trigger = has_fleet_order
			move_to_system_point_order = { custom_tooltip = "move_to_system_point_order" }
			orbit_planet_order = { custom_tooltip = "orbit_planet_order" }
			follow_order = { custom_tooltip = "follow_order" }
			use_bypass_order = { custom_tooltip = "use_bypass_order" }
			default = { custom_tooltip = "others" }
		}
	}
}

imperial_legions_amount_check = {
	if = {
		limit = { is_active_resolution = resolution_emperor_imperial_legions }
		# 来自建筑的额外容量
		set_variable = { which = count_overlord_imperial_legion_recruit value = 0 }
		set_variable = { which = count_overlord_imperial_mega_warform_builder value = 0 }
		set_variable = { which = count_overlord_imperial_warrior_drones_transforming value = 0 }
		every_galcom_member = {
			limit = { is_galactic_emperor = no }
			if = {
				limit = { is_gestalt = no }
				galactic_emperor = {
					change_variable = {
						which = count_overlord_imperial_legion_recruit
						value = prev.modifier:overlord_imperial_legion_capacity_add
					}
				}
			}
			else_if = {
				limit = { is_machine_empire = yes }
				galactic_emperor = {
					change_variable = {
						which = count_overlord_imperial_mega_warform_builder
						value = prev.modifier:overlord_imperial_mega_warform_capacity_add
					}
				}
			}
			else_if = {
				limit = { is_hive_empire = yes }
				galactic_emperor = {
					change_variable = {
						which = count_overlord_imperial_warrior_drones_transforming
						value = prev.modifier:overlord_imperial_warrior_drones_capacity_add
					}
				}
			}
		}
		set_variable = { which = imperial_legion_additional value = count_overlord_imperial_legion_recruit }
		set_variable = { which = imperial_mega_warform_additional value = count_overlord_imperial_mega_warform_builder }
		set_variable = { which = imperial_warrior_drones_additional value = count_overlord_imperial_warrior_drones_transforming }
		# 刷新显示
		set_variable = { which = var_imperial_legion_cap value = value:imperial_legion_cap }
		set_variable = { which = var_imperial_mega_warform_cap value = value:imperial_mega_warform_cap }
		set_variable = { which = var_imperial_warrior_drones_cap value = value:imperial_warrior_drones_cap }
		if = {
			limit = { is_ai = yes }
			while = {
				limit = {
					check_variable = {
						which = imperial_legion_soldier_count
						value > var_imperial_legion_cap
					}
				}
				random_owned_army = {
					limit = { army_type = imperial_legion }
					remove_army = yes
					subtract_variable = { which = imperial_legion_soldier_count value = 1 }
				}
			}
			while = {
				limit = {
					check_variable = {
						which = imperial_legion_soldier_count_mega_warform
						value > var_imperial_mega_warform_cap
					}
				}
				random_owned_army = {
					limit = { army_type = imperial_mega_warform }
					remove_army = yes
					subtract_variable = { which = imperial_legion_soldier_count_mega_warform value = 1 }
				}
			}
			while = {
				limit = {
					check_variable = {
						which = imperial_legion_soldier_count_warrior_drones
						value > var_imperial_warrior_drones_cap
					}
				}
				random_owned_army = {
					limit = { army_type = imperial_warrior_drones }
					remove_army = yes
					subtract_variable = { which = imperial_legion_soldier_count_warrior_drones value = 1 }
				}
			}
		}
	}
}

skip_geo = {
	set_global_flag = flag_debug_skip_geo_time_limit
}

ambassador_favor_maker_ask_for_favor = {
	root = {
		if = {
			limit = { prev.envoy_location_country = { is_galactic_emperor = no } }
			add_favors = {
				target = prev.envoy_location_country
				value = 1
			}
			create_message = {
				type = MESSAGE_FAVOR_GAINED_TRADITION
				localization = MESSAGE_FAVOR_GAINED_TRADITION_DESC
				days = 30
				target = prev.envoy_location_country.capital_scope
				variable = {
					type = name
					localization = WHO
					scope = prev.envoy_location_country
				}
			}
		}
		else = {
			country_event = {
				id = leader.301
			}
		}
	}
}

ccc = {
	set_variable = { which = iaos2_scientist_bonus_researcher value = 0 }
	set_variable = { which = iaos2_scientist_bonus_analyst value = 0 }
	set_variable = { which = iaos2_scientist_bonus_explorer value = 0 }
	every_member = {
		if = {
			limit = {
				OR = {
					is_galactic_emperor = yes
					is_imperial_province = yes
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					has_skill > 5
					has_trait = subclass_scientist_councilor
				}
				prevprev = {
					change_variable = { which = iaos2_scientist_bonus_researcher value = 1 }
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					has_skill > 5
					has_trait = subclass_scientist_governor
				}
				prevprev = {
					change_variable = { which = iaos2_scientist_bonus_analyst value = 1 }
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					has_skill > 5
					OR = {
						has_trait = subclass_scientist_explorer
						has_trait = subclass_scientist_scholar
					}
				}
				prevprev = {
					change_variable = { which = iaos2_scientist_bonus_explorer value = 1 }
				}
			}
		}
		else = {
			every_owned_leader = {
				limit = {
					leader_class = scientist
					has_skill > 5
					has_trait = subclass_scientist_councilor
				}
				prevprev = {
					change_variable = { which = iaos2_scientist_bonus_researcher value = 0.5 }
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					has_skill > 5
					has_trait = subclass_scientist_governor
				}
				prevprev = {
					change_variable = { which = iaos2_scientist_bonus_analyst value = 0.5 }
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					has_skill > 5
					OR = {
						has_trait = subclass_scientist_explorer
						has_trait = subclass_scientist_scholar
					}
				}
				prevprev = {
					change_variable = { which = iaos2_scientist_bonus_explorer value = 0.5 }
				}
			}
		}
	}
	multiply_variable = { which = iaos2_scientist_bonus_researcher value = 0.5 }
	multiply_variable = { which = iaos2_scientist_bonus_analyst value = 1 }
	multiply_variable = { which = iaos2_scientist_bonus_explorer value = 2 }
}
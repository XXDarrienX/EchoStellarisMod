@octeelan_system_AVI_pops = 1
@octeelan_system_MOL1_pops = 1
@octeelan_system_MOL2_pops = 2
@octeelan_system_FUN_pops = 1

# create the base edditional Octee-lan species, with each savced as event_target
# * octeelan_system_AVI_species - selects the non-mechanist secondary species if it exists, otherwise points at the default avians (very strong, industrious laborers)
# * octeelan_system_MOL1_species - intelligent scientist species
# * octeelan_system_MOL2_species - agrarian farmer species
# * octeelan_system_FUN_species - long-lived, reclusive fungoid species
# this = planet
create_additional_xenos_species = {
	optimize_memory
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		if = {
			limit = {
				is_planet_class = pc_ocean
				has_aquatics = yes
			}
			# this species is the syncretic species by default
			create_species = {
				name = PRESCRIPTED_secondary_species_name_octeelan1
				plural = PRESCRIPTED_secondary_species_plural_octeelan1
				adjective = PRESCRIPTED_secondary_species_adjective_octeelan1
				class = AVI
				portrait = avi5
				homeworld = this
				traits = {
					ideal_planet_class = this
					trait = trait_syncretic_proles
					trait = trait_aquatic
					trait = trait_very_strong
					# swapped trait_industrious for trait_aquatic to maintain net 0 points
					# trait = trait_industrious
					trait = trait_nonadaptive
					trait = trait_slow_learners
				}
				effect = {
					set_species_flag = octeelan_bonus_species@prev.owner
					save_event_target_as = octeelan_system_AVI_species
				}
			}
		}
		else = {
			create_species = {
				name = PRESCRIPTED_secondary_species_name_octeelan1
				plural = PRESCRIPTED_secondary_species_plural_octeelan1
				adjective = PRESCRIPTED_secondary_species_adjective_octeelan1
				class = AVI
				portrait = avi5
				homeworld = this
				traits = {
					ideal_planet_class = this
					trait = trait_very_strong
					trait = trait_industrious
					trait = trait_nonadaptive
					trait = trait_slow_learners
				}
				effect = {
					set_species_flag = octeelan_bonus_species@prev.owner
					save_event_target_as = octeelan_system_AVI_species
				}
			}
		}
	}
	else = {
		last_created_species = {
			set_species_flag = octeelan_bonus_species@prev.owner
			save_event_target_as = octeelan_system_AVI_species
		}
	}
	if = {
		limit = {
			is_planet_class = pc_ocean
			has_aquatics = yes
		}
		create_species = {
			name = NAME_octeelan_system_MOL1_species_name
			plural = NAME_octeelan_system_MOL1_species_plural
			adjective = NAME_octeelan_system_MOL1_species_adjective
			class = MOL
			portrait = mol12
			homeworld = this
			traits = {
				ideal_planet_class = this
				trait = trait_aquatic
				trait = trait_intelligent
				trait = trait_conformists
				trait = trait_slow_breeders
				trait = trait_fleeting
				# added trait_aquatic because of extra trait point and thematic feel
			}
			effect = {
				set_species_flag = octeelan_bonus_species@prev.owner
				save_event_target_as = octeelan_system_MOL1_species
			}
		}
		create_species = {
			name = NAME_octeelan_system_MOL2_species_name
			plural = NAME_octeelan_system_MOL2_species_plural
			adjective = NAME_octeelan_system_MOL2_species_adjective
			class = MOL
			portrait = mol4
			homeworld = this
			traits = {
				ideal_planet_class = this
				trait = trait_aquatic
				trait = trait_agrarian
				trait = trait_conformists
				trait = trait_repugnant
				trait = trait_sedentary
				# added trait_aquatic because of extra trait point and thematic feel
			}
			effect = {
				set_species_flag = octeelan_bonus_species@prev.owner
				save_event_target_as = octeelan_system_MOL2_species
			}
		}
		create_species = {
			name = NAME_octeelan_system_FUN_species_name
			plural = NAME_octeelan_system_FUN_species_plural
			adjective = NAME_octeelan_system_FUN_species_adjective
			class = FUN
			portrait = fun1
			homeworld = this
			gender = indeterminable
			traits = {
				ideal_planet_class = this
				trait = trait_aquatic
				trait = trait_venerable
				trait = trait_conservational
				trait = trait_repugnant
				trait = trait_solitary
				trait = trait_sedentary
			}
			effect = {
				set_species_flag = octeelan_bonus_species@prev.owner
				save_event_target_as = octeelan_system_FUN_species
			}
		}
	}
	else = {
		create_species = {
			name = NAME_octeelan_system_MOL1_species_name
			plural = NAME_octeelan_system_MOL1_species_plural
			adjective = NAME_octeelan_system_MOL1_species_adjective
			class = MOL
			portrait = mol12
			homeworld = this
			traits = {
				ideal_planet_class = this
				trait = trait_intelligent
				trait = trait_conformists
				trait = trait_quick_learners
				trait = trait_slow_breeders
				trait = trait_fleeting
				# added trait_quick_learners because of extra trait point without aquatics
			}
			effect = {
				set_species_flag = octeelan_bonus_species@prev.owner
				save_event_target_as = octeelan_system_MOL1_species
			}
		}
		create_species = {
			name = NAME_octeelan_system_MOL2_species_name
			plural = NAME_octeelan_system_MOL2_species_plural
			adjective = NAME_octeelan_system_MOL2_species_adjective
			class = MOL
			portrait = mol4
			homeworld = this
			traits = {
				ideal_planet_class = this
				trait = trait_strong
				trait = trait_agrarian
				trait = trait_conformists
				trait = trait_repugnant
				trait = trait_sedentary
				# added trait_strong because of extra trait point without aquatics
			}
			effect = {
				set_species_flag = octeelan_bonus_species@prev.owner
				save_event_target_as = octeelan_system_MOL2_species
			}
		}
		create_species = {
			name = NAME_octeelan_system_FUN_species_name
			plural = NAME_octeelan_system_FUN_species_plural
			adjective = NAME_octeelan_system_FUN_species_adjective
			class = FUN
			portrait = fun1
			homeworld = this
			gender = indeterminable
			traits = {
				ideal_planet_class = this
				trait = trait_venerable
				trait = trait_conservational
				trait = trait_repugnant
				trait = trait_solitary
				# remove sedentary because this species had points remaining but couldn't spend them - partially because Repugnant is -2 points now
				# trait = trait_sedentary
			}
			effect = {
				set_species_flag = octeelan_bonus_species@prev.owner
				save_event_target_as = octeelan_system_FUN_species
			}
		}
	}
}

# this = planet
modify_additional_xenos_hive = {
	optimize_memory
	every_owned_species = {
		limit = {
			has_species_flag = octeelan_bonus_species@prev.owner
			is_organic_species = yes
		}
		change_species_characteristics = {
			add_traits_at_start_of_list = yes
			add_trait = trait_hive_mind
		}
		set_citizenship_type = {
			type = citizenship_full
			country = prev.owner
			cooldown = no
		}
		set_living_standard = {
			type = living_standard_hive_mind
			country = prev.owner
			cooldown = no
		}
	}
}

# this = planet
modify_additional_xenos_cyborg = {
	optimize_memory
	every_owned_species = {
		limit = {
			has_species_flag = octeelan_bonus_species@prev.owner
			is_organic_species = yes
			NOT = { has_trait = trait_cybernetic }
		}
		change_species_characteristics = {
			add_traits_at_start_of_list = yes
			add_trait = trait_cybernetic
		}
		set_citizenship_type = {
			type = citizenship_full_machine
			country = prev.owner
			cooldown = no
		}
		set_living_standard = {
			type = living_standard_hive_mind
			country = prev.owner
			cooldown = no
		}
	}
}

# this = planet
generate_additional_xenos_pops = {
	optimize_memory
	create_additional_xenos_species = yes
	if = {
		limit = { owner = { is_homicidal = no } }if = {
			limit = { owner = { is_hive_empire = yes } }
			modify_additional_xenos_hive = yes
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_machine_assimilator } }
			modify_additional_xenos_cyborg = yes
		}
	}
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
				NOT = { has_valid_civic = civic_machine_assimilator }
			}
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			every_owned_species = {
				limit = { has_species_flag = octeelan_bonus_species@prev.owner }
				set_citizenship_type = {
					type = citizenship_organic_trophy
					country = prev.owner
					cooldown = no
				}
				set_living_standard = {
					type = living_standard_organic_trophy
					country = prev.owner
					cooldown = no
				}
			}
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_machine_terminator } }
			every_owned_species = {
				limit = { has_species_flag = octeelan_bonus_species@prev.owner }
				set_citizenship_type = {
					type = citizenship_purge_machine
					country = prev.owner
					cooldown = no
				}
				set_living_standard = {
					type = living_standard_none
					country = prev.owner
					cooldown = no
				}
				set_purge_type = {
					type = purge_processing
					country = prev.owner
					cooldown = no
				}
			}
		}
		else = {
			every_owned_species = {
				limit = { has_species_flag = octeelan_bonus_species@prev.owner }
				set_citizenship_type = {
					type = citizenship_slavery
					country = prev.owner
					cooldown = no
				}
				set_slavery_type = {
					type = slavery_matrix
					country = prev.owner
					cooldown = no
				}
			}
		}
	}
	# only add a Pop of the first bonus species if the country doesn't have a secondary species
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		while = {
			count = @octeelan_system_AVI_pops
			if = {
				limit = { owner = { is_homicidal = no } }
				if = {
					limit = { owner = { is_gestalt = no } }
					random_owned_pop = {
						limit = {
							has_job = miner
							NOT = { is_species = event_target:octeelan_system_AVI_species }
						}
						unemploy_pop = yes
					}
				}
				else = {
					random_owned_pop = {
						limit = {
							has_job = mining_drone
							NOT = { is_species = event_target:octeelan_system_AVI_species }
						}
						unemploy_pop = yes
					}
				}
			}
			create_pop = {
				species = event_target:octeelan_system_AVI_species
				ethos = random
			}
		}
	}
	while = {
		count = @octeelan_system_MOL1_pops
		if = {
			limit = { owner = { is_homicidal = no } }
			if = {
				limit = { owner = { is_hive_empire = yes } }
				random_owned_pop = {
					limit = {
						has_job = brain_drone
						NOT = { is_species = event_target:octeelan_system_MOL1_species }
					}
					unemploy_pop = yes
				}
			}
			else_if = {
				limit = { owner = { has_valid_civic = civic_machine_assimilator } }
				random_owned_pop = {
					limit = {
						has_job = calculator
						NOT = { is_species = event_target:octeelan_system_MOL1_species }
					}
					unemploy_pop = yes
				}
			}
			else_if = {
				limit = { owner = { is_regular_empire = yes } }
				random_owned_pop = {
					limit = {
						has_job = researcher
						NOT = { is_species = event_target:octeelan_system_MOL1_species }
					}
					unemploy_pop = yes
					clear_pop_category = yes
				}
			}
		}
		create_pop = {
			species = event_target:octeelan_system_MOL1_species
			ethos = random
		}
	}
	while = {
		count = @octeelan_system_MOL2_pops
		if = {
			limit = { owner = { is_homicidal = no } }
			if = {
				limit = { owner = { is_gestalt = no } }
				random_owned_pop = {
					limit = {
						has_job = farmer
						NOT = { is_species = event_target:octeelan_system_MOL2_species }
					}
					unemploy_pop = yes
				}
			}
			else_if = {
				limit = {
					OR = {
						is_hive_empire = yes
						has_valid_civic = civic_machine_assimilator
					}
				}
				random_owned_pop = {
					limit = {
						has_job = agri_drone
						NOT = { is_species = event_target:octeelan_system_MOL2_species }
					}
					unemploy_pop = yes
				}
			}
		}
		create_pop = {
			species = event_target:octeelan_system_MOL2_species
			ethos = random
		}
	}
	while = {
		count = @octeelan_system_FUN_pops
		create_pop = {
			species = event_target:octeelan_system_FUN_species
			ethos = random
		}
	}
}

# Set up the decadent synths
# this = planet
setup_peepboop_homeworld = {
	optimize_memory
	save_event_target_as = peepboop_planet
	clear_deposits = yes
	create_species = {
		name = PRESCRIPTED_species_name_peepboop1
		plural = PRESCRIPTED_species_plural_peepboop1
		adjective = PRESCRIPTED_species_adjective_peepboop1
		name_list = AI
		class = PEEBOOP
		portrait = peepboop1
		homeworld = this
		traits = {
			trait = trait_machine_unit
			trait = trait_robot_efficient_processors
			trait = trait_robot_emotion_emulators
			trait = trait_robot_luxurious
			trait = trait_robot_custom_made
			# remove High Maintenance because species had -4 trait points,
			# add Efficient Processors to use full amount trait points
		}
		effect = { save_event_target_as = peepboop_species }
	}
	create_country = {
		name = random
		ethos = { ethic = ethic_gestalt_consciousness }
		authority = auth_machine_intelligence
		civics = {
			civic = civic_machine_ota_updates
			civic = civic_machine_introspective
		}
		type = default
		species = event_target:peepboop_species
		name_list = MACHINE1
		flag = {
			icon= {
				category = "special"
				file = "ai_01.dds"
			}
			background= {
				category = "backgrounds"
				file = "circle.dds"
			}
			colors = {
				"pink"
				"grey"
				"null"
				"null"
			}
		}
		ignore_initial_colony_error = yes
		day_zero_contact = no
		effect = {
			save_event_target_as = peepboop_country
			set_country_flag = is_peepboops
			set_country_flag = is_peepboops@prev.space_owner
			establish_communications_no_message = prev.space_owner
			add_intel = {
				who = prev.space_owner
				amount = 40
			}
			prev.space_owner = {
				establish_communications_no_message = event_target:peepboop_country
				add_intel = {
					who = event_target:peepboop_country
					amount = 40
				}
				set_country_flag = abandoned_peepboops@prev
			}
			set_origin = origin_fallen_empire
			set_graphical_culture = mammalian_01
			add_resource = {
				energy = 1000
				minerals = 1000
				alloys = 1000
				influence = 100
			}
			set_ai_personality = machine_intelligence
			set_policy = {
				policy = diplomatic_stance
				option = diplo_stance_belligerent
				cooldown = no
			}
			set_closed_borders = {
				who = prev.space_owner
				status = no
			}
			give_technology = { tech = tech_alien_life_studies_gestalt	message = no }
			give_technology = { tech = tech_auxiliary_fire_control		message = no }
			give_technology = { tech = tech_ground_defense_planning		message = no }
			give_technology = { tech = tech_adaptive_combat_algorithms	message = no }
			give_technology = { tech = tech_planetary_unification		message = no }
			give_technology = { tech = tech_planetary_infrastructure_1	message = no }
			give_technology = { tech = tech_corvette_hull_1				message = no }
			give_technology = { tech = tech_corvette_build_speed		message = no }
			create_ship_design = { design = DESIGN_military_station_small_point_defense_peepboop }
			add_ship_design = last_created_design
			create_ship_design = { design = DESIGN_military_station_small_line_peepboop }
			add_ship_design = last_created_design
			create_ship_design = { design = DESIGN_military_station_small_strike_craft_peepboop }
			add_ship_design = last_created_design
			create_starting_leaders = yes
		}
	}
	create_colony = {
		owner = event_target:peepboop_country
		species = event_target:peepboop_species
		ethos = owner
	}
	set_name = PRESCRIPTED_planet_name_peepboop1
	set_capital = yes
	# 9 energy + 6 minerals + 8 farming
	while = {
		count = 3
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
	}
	while = {
		count = 4
		add_district = district_nexus
	}
	add_deposit = d_veiny_cliffs
	add_deposit = d_ore_rich_caverns
	add_deposit = d_rich_mountain
	add_deposit = d_great_river
	add_deposit = d_marvelous_oasis
	add_deposit = d_tropical_island
	add_building = building_machine_capital
	add_building = building_machine_assembly_plant
	add_building = building_uplink_node
	add_building = building_class_4_singularity
	add_building = building_nano_forge
	add_building = building_dimensional_fabricator
	while = {
		count = 2
		add_deposit = d_alien_pets_deposit
		add_building = building_xeno_zoo_gestalt
	}
	while = {
		count = 3
		add_deposit = d_octeelan_xeno_preserve
	}
	while = {
		limit = { num_pops < 21 }
		create_pop = { species = event_target:peepboop_species }
	}
	while = {
		count = 6
		create_army = {
			owner = event_target:peepboop_country
			species = event_target:peepboop_species
			type = machine_defense_peepboop
			effect = {
				set_name = machine_defense_peepboop_army_name
			}
		}
	}
	solar_system = {
		every_system_planet = {
			set_surveyed = {
				surveyed = yes
				surveyor = event_target:peepboop_country
			}
		}
		set_surveyed = {
			surveyed = yes
			surveyor = event_target:peepboop_country
		}
		create_fleet = {
			effect = {
				set_owner = event_target:peepboop_country
				create_ship = {
					name = random
					random_existing_design = science
				}
				set_fleet_stance = evasive
				set_location = {
					target = prevprev
					distance = 10
					angle = random
				}
				owner = {
					create_leader = {
						class = scientist
						sub_type = survey
						name = random
						species = owner_main_species
					}
				}
				set_leader = last_created_leader
			}
		}
		create_fleet = {
			effect = {
				set_owner = event_target:peepboop_country
				create_ship = {
					name = random
					random_existing_design = constructor
				}
				set_fleet_stance = evasive
				set_location = {
					target = prevprev
					distance = 10
					angle = random
				}
			}
		}
	}
	event_target:peepboop_planet = {
		create_starbase = {
			size = starbase_starport
			owner = event_target:peepboop_country
			building = crew_quarters
			module = shipyard
			module = solar_panel_network
			effect = {
				set_starbase_flag = peepboop_country_starbase@event_target:peepboop_country
				create_ship = {
					name = random
					design = DESIGN_military_station_small_point_defense_peepboop
					prefix = no
				}
				create_ship = {
					name = random
					design = DESIGN_military_station_small_line_peepboop
					prefix = no
				}
				create_ship = {
					name = random
					design = DESIGN_military_station_small_strike_craft_peepboop
					prefix = no
				}
			}
		}
	}
}
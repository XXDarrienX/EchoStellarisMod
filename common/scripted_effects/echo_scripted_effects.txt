generate_start_pops = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_hive_bodysnatcher
					has_origin = origin_vb_psi_soul_eater
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = {
				last_created_species = { is_species_class = MACHINE }
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
					create_pop_group = {
					size = 600
						species = last_created_species
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
					create_pop_group = {
					size = 900
						species = last_created_species
				}
			}
			else = {
					create_pop_group = {
					size = 1200
						species = last_created_species
				}
			}
		}
		generate_civic_secondary_pops = yes
		make_nascent_starting_pops = yes
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = {
			owner = { has_origin = origin_mechanists }
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
			create_pop_group = {
			size = 800
				species = last_created_species
		}
		while = {
			limit = { pop_amount < 2700 }
			create_pop_group = {
				species = owner_main_species
			}
			}
		}

	# MISC: spawn Pops
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
				is_wilderness_empire = no
				NOT = { has_origin = origin_hive_overmind }
			}
		}
		while = {
			limit = { pop_amount < 3300 }
			create_pop_group = {
				species = owner_main_species
		}
	}
	if = {
		limit = { owner = { has_origin = origin_hive_overmind } }
		
		last_created_species = {
			if = {
				limit = { is_lithoid = yes }
				root = { owner = { set_country_flag = lithoid_overminded_species } }
			}
			else = { root = { owner = { set_country_flag = organic_overminded_species } } }
			}
		while = {
			limit = { pop_amount < 3300 }
			create_pop_group = {
				species = last_created_species
				ethos = random
			}
			}
		}
	}
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		while = {
			limit = { pop_amount < 4800 }	# Includes the 2,000 Bio-Trophies that were already created.
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { pop_amount < 2800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { pop_amount < 2800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			pop_amount < 600
		}

		while = {
			limit = { pop_amount < 600 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { pop_amount < 2800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			pop_amount < 1800
		}
		while = {
			limit = { pop_amount < 1800 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			limit = { pop_amount < 2000 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
			create_pop_group = {
			size = 200
				species = owner_main_species
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
			create_pop_group = {
			size = 400
				species = owner_main_species
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop_group = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_single_pop = yes
			}
		}
	}

	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_toxic_knights
			}
		}
		while = { #they get the habitat
			count = 11
			random_owned_pop_group = { kill_single_pop = yes }
		}
	}

	# Nascent Stage pops being generated
	make_nascent_starting_pops = yes

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop_group = { kill_single_pop = yes }
		}
		create_zombie_pop_group = {
			SIZE = 400
		}
	}

	# Civilians
				if = {
					limit = {
			owner =  {
				NOR = {
					has_origin = origin_broken_shackles
					is_wilderness_empire = yes
					has_valid_civic = civic_machine_servitor
				}
			}
		}
		while = {
			count = @civilians_counter
			create_pop_group = {
				size = @civilians_gamestart
				species = owner_main_species
			}
		}
	}

	# Wilderness
	if = {
		limit = {
			owner = { is_wilderness_empire = yes }
		}
		while = {
			limit = { pop_amount < 2000 }
			create_pop_group = {
				species = owner_main_species
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop_group = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			weighted_random_owned_pop_group = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
			create_pop_group = {
			size = 900
			species = owner_main_species
		}
	}
	inline_script = "game_start/oriding_modded"
}

scion_fe_intervention = {
	optimize_memory
	if = {
		limit = { fleet_power < 65000 }
		root = { create_fe_intervention_1 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 65001
			fleet_power < 90000
		}
		root = { create_fe_intervention_2 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 90001
			fleet_power < 100000
		}
		root = { create_fe_intervention_3 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 100001
			fleet_power < 120000
		}
		root = { create_fe_intervention_4 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 120001
			fleet_power < 150000
		}
		root = { create_fe_intervention_5 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 150001
			fleet_power < 300000
		}
		root = { create_fe_intervention_6 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 300001
			fleet_power < 500000
		}
		root = { create_fe_intervention_7 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 500001
		}
		root = { create_fe_intervention_8 = yes }
	}
}

create_fe_intervention_1 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_2 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 3
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_3 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_4 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 2
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_5 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 4
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_6 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 2
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 4
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_7 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 3
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 6
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_8 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 6
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 12
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

# This is called after game start
generate_start_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes

	# blockers
	if = {
		limit = {
			owner = {
				is_apocalyptic_empire = yes
			}
		}
		add_deposit = d_tomb_world_ruins
		if = {
			limit = {
				owner = {
					is_environmental_architects_empire = yes
				}
			}
			add_random_natural_blocker_and_give_tech = yes
		}
		else = {
			add_deposit = d_tomb_world_wasteland
		}
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_servitor
			}
		}

		add_deposit = d_unsupervised_settlement
		if = {
			limit = {
				owner = {
					is_environmental_architects_empire = yes
				}
			}
			add_random_natural_blocker_and_give_tech = yes
		}
		else = {
			add_deposit = d_strip_mine
		}
	}
	else_if = {
		limit = {
			owner = {
				is_environmental_architects_empire = yes
			}
		}

		while = {
			count = 2
			add_random_natural_blocker_and_give_tech = yes
		}
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_exterminators_ruins
		add_deposit = d_former_battlefield
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_assimilator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_assimilators_ruins
	}
	else_if = {
		limit = {
			owner = {
				is_machine_empire = yes
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_machine_empire_ruins
	}
	else_if = { # "Unplugged"
		limit = {
			owner = {
				has_origin = origin_unplugged
			}
		}

		add_deposit = d_decrepit_dwellings
		add_deposit = d_strip_mine
		add_deposit = d_former_battlefield
	}
	else_if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_machine
					has_origin = origin_synthetic_fertility
					is_gestalt = yes
				}
			}
		}

		add_deposit = d_decrepit_dwellings
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}

		add_deposit = d_collapsed_burrows
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}

	if = {
		limit = {
			has_planet_flag = planet_unity
		}
		remove_deposit = d_failing_infrastructure
		add_deposit = d_forgotten_civilization
	}
	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_origin = origin_lithoid
					has_origin = origin_broken_shackles
				}
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_devouring_swarm = yes
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_apocalyptic_empire = yes
			}
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent

		# 3 + 4 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 3 + 2 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		add_deposit = d_fungal_forest
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		create_life_seeded_planet = yes
	}

	if = {
		limit = {
			is_planet_class = pc_continental
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_prosperous_mesa
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_rugged_woods
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_rugged_woods

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tropical
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_green_hills
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_ocean
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_underwater_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_green_hills

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_teeming_reef
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_arctic
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_lichen_fields

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tundra
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_alpine
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_desert
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_nutritious_mudland
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_nutritious_mudland

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_marvelous_oasis
			}
		}
		set_planet_flag = tasty_desert
	}

	if = {
		limit = {
			is_planet_class = pc_arid
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_savannah
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_relic
			owner = {
				OR = {
					has_origin = origin_remnants
					has_origin = origin_slavers
				}
			}
		}

		set_planet_size = 22

		# 6 blockers
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains
			add_deposit = d_black_soil
		}
	}
	inline_script = "game_start/origin_reliquary"

	# Ocean Paradise Origin

	if = {
		limit = {
			owner = {
				OR  = {
					has_origin = origin_ocean_paradise
					has_origin = origin_ocean_machines
				}
			}
		}
		create_ocean_paradise_planet = yes
	}

	# Wilderness Origin

		if = {
			limit = {
			owner = { is_wilderness_empire = yes }
		}
		create_wilderness_planet = yes
					}
				}

# Special for Earth
generate_earth_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes
	add_deposit = d_mesopotamian_urban_corridor
	add_deposit = d_boswash_metropolitan_axis
	add_deposit = d_mauritanian_security_zone
	add_deposit = d_great_albertan_crater
	add_deposit = d_scandinavian_reclamation_sector
	add_deposit = d_saharan_irrigation_project
	add_deposit = d_pearl_river_agglomerate
	add_deposit = d_great_pacific_garbage_patch
	if = {
		limit = {
			owner = { is_machine_empire = yes }
		}
		add_deposit = d_rushing_waterfalls
	}

	if = {
		limit = {
			owner = {
				is_environmental_architects_empire = yes
			}
		}
		add_random_natural_blocker_and_give_tech = yes

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			add_deposit = d_unsupervised_settlement
		}
	}
	else = {
		add_deposit = d_failing_infrastructure_earth
		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			add_deposit = d_hot_springs
			add_deposit = d_strip_mine
			add_deposit = d_unsupervised_settlement
		}
		else_if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}

			add_deposit = d_collapsed_burrows
		}
		else = {
			add_deposit = d_decrepit_dwellings
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_devouring_swarm = yes
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		set_planet_size = 30

		add_deposit = d_dust_caverns
		add_deposit = d_bubbling_swamp
		add_deposit = d_crystalline_caverns
	}

	if = {
		limit = {
			is_planet_class = pc_desert # Just in case players cause trouble
		}
		set_planet_flag = tasty_desert
	}
}

hive_and_machine_world_setup = {
	optimize_memory
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_hive
					has_origin = origin_machine
				}
			}
		}
		owner = {
			capital_scope = {
				set_planet_size = 30
			}
		}
	}
}

create_marauder_armies = {
	create_leader = {
		class = commander
		species = owner_main_species
		name = random
		skill = 10
		traits = {
			trait = random_trait
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:raider_khanate
			while = {
				count = 20
				create_army_transport = {
					ship_name = "NAME_Pirate_Transport"
					graphical_culture = "mammalian_01"
					army_type = "marauders"
					species = event_target:raider_khanate
				}
			}
			set_location = {
				target = event_target:marauder_rally_point
				distance = 20
				angle = random
			}
		}
	}
	last_created_army = { assign_leader = last_created_leader }
}

add_awakened_fallen_empire_resources = {
	# Changing country type resets resources, so give them full stores
	add_resource = { minerals = 100000 }
	add_resource = { energy = 100000 }
	add_resource = { food = 100000 }
	add_resource = { influence = 1000 }
	add_resource = { alloys = 100000 }
	add_resource = { consumer_goods = 100000 }
	add_resource = { exotic_gases = 10000 }
	add_resource = { volatile_motes = 10000 }
	add_resource = { rare_crystals = 10000 }
	add_resource = { sr_dark_matter = 10000 }
	add_resource = { nanites = 5000 }
	add_resource = { unity = 500000 }
	add_resource = { minor_artifacts = 500 }

	if = {
		limit = { is_fallen_empire_spiritualist = yes }
		add_resource = { sr_zro = 10000 }
	}
}

create_ai_armies = {
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "machine_assault_3"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "machine_assault_3"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
}

recalculate_brothel_bonus = {
	remove_modifier = brothel_growth_commercial_pact
	remove_modifier = brothel_growth_commercial_pact_empire
	If = {
		limit = {
			is_country_type = default
			any_relation = { has_commercial_pact = prev has_federation = no }
			has_civic = civic_mega_brothel
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact
			days = -1
			multiplier = value:brothel_bonus
		}
	}
	If = {
		limit = {
			any_relation = {
    			is_country_type = default
    			has_commercial_pact = from
    			has_civic = civic_mega_brothel
				has_federation = no
		}
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact_empire
			days = -1
		}
	}
	If = {
		limit = {
			is_country_type = default
			any_relation = { has_commercial_pact = prev has_federation = yes }
			has_civic = civic_mega_brothel
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact
			days = -1
			multiplier = value:brothel_bonus
		}
	}
	If = {
		limit = {
			any_relation = {
    			is_country_type = default
    			has_commercial_pact = from
    			has_civic = civic_mega_brothel
				has_federation = yes
			}
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact_empire
			days = -1
		}
	}
}
generate_start_pops = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_origin = origin_vb_psi_soul_eater
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = {
				last_created_species = { is_species_class = MACHINE }
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes

		if = {
			limit = {
				owner = {
					has_origin = origin_vb_psi_soul_eater
				}
			}
			last_created_species = {
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_vb_psi_soul_eater
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			while = {
				count = 8
				create_pop = {
					species = last_created_species
					ethos = random
				}
			}
		}
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = {
			owner = { has_origin = origin_mechanists }
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = { 
		limit = { owner = { has_origin = origin_religious_constructs } }
		#owner = { create_built_robot_species = yes }
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			} 
	}
		add_building = building_robot_assembly_plant		
		add_district = district_generator
		while = {
			limit = { num_pops < 24 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	# (Non-Purging) Necrophage: add Buildings & Districts
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}
	# Necrophage + Devouring Swarm: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}
	# Clone Army: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}
	# MISC: spawn Pops
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
				NOT = { has_origin = origin_hive_overmind }
			}
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_origin = origin_hive_overmind } }
		
		last_created_species = {
			if = {
				limit = { is_lithoid = yes }
				root = { owner = { set_country_flag = lithoid_overminded_species } }
			}
			else = { root = { owner = { set_country_flag = organic_overminded_species } } }
			}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = last_created_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_replicators } }
		last_created_species = {
			save_event_target_as = replicate
		}
		create_replica = yes
		event_target:new_replica = {
			set_species_flag = replicated_species@root.owner
		}
		while = {
			count = 29
			create_pop = {
				species = event_target:new_replica
			}
		}
		if = {
			limit = {
				owner = {
					has_origin = origin_default
				}
			}
			while = {
				count = 4
				create_pop = {
					species = event_target:new_replica
				}
			}
		}
		owner = {
			change_dominant_species  = { species = event_target:replicate change_all = yes } #for some reason i need this, else colonization rights will bug
			country_event = { id = cx_machine_replicators.0 days = 1 }
			every_owned_leader = {
				change_species = event_target:new_replica
				change_leader_portrait = species
			}
		}
	}
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					has_cybernetic_creed_trait = no
					OR = {
						is_pop_category = ruler
						is_pop_category = specialist
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_cybernetic_creed_trait = no
				}
				clear_pop_category = yes
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		while = {
			count = 9
			create_pop = {
				species = owner
			}
		}
	}
}

scion_fe_intervention = {
	optimize_memory
	if = {
		limit = { fleet_power < 65000 }
		root = { create_fe_intervention_1 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 65001
			fleet_power < 90000
		}
		root = { create_fe_intervention_2 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 90001
			fleet_power < 100000
		}
		root = { create_fe_intervention_3 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 100001
			fleet_power < 120000
		}
		root = { create_fe_intervention_4 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 120001
			fleet_power < 150000
		}
		root = { create_fe_intervention_5 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 150001
			fleet_power < 300000
		}
		root = { create_fe_intervention_6 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 300001
			fleet_power < 500000
		}
		root = { create_fe_intervention_7 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 500001
		}
		root = { create_fe_intervention_8 = yes }
	}
}

create_fe_intervention_1 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_2 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 3
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_3 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_4 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 2
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_5 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 4
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_6 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 2
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 4
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_7 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 3
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 6
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_8 = {
	optimize_memory
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 6
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 12
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

# This is called after game start
generate_start_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes

	# blockers
	if = {
		limit = {
			owner = {
				is_apocalyptic_empire = yes
			}
		}
		add_deposit = d_tomb_world_ruins
		add_deposit = d_tomb_world_wasteland
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_exterminators_ruins
		add_deposit = d_former_battlefield
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_servitor
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_unsupervised_settlement
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_assimilator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_assimilators_ruins
	}
	else_if = {
		limit = {
			owner = {
				has_authority = auth_machine_intelligence
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_machine_empire_ruins
	}
	else_if = {
		limit = {
			owner = {
				has_authority = auth_hive_mind
			}
		}

		add_deposit = d_collapsed_burrows
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}
	else_if = {
		limit = {
			owner = {
				NOT = { has_origin = origin_machine }
			}
		}
		add_deposit = d_decrepit_dwellings
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}
	if = {
		limit = {
			has_planet_flag = planet_unity
		}
		remove_deposit = d_failing_infrastructure
		add_deposit = d_forgotten_civilization
	}
	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_origin = origin_lithoid
					has_origin = origin_broken_shackles
				}
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_apocalyptic_empire = yes
			}
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent

		# 3 + 4 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 3 + 2 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		add_deposit = d_fungal_forest
	}

	if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
			}
		}

		# 4 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent
		add_deposit = d_searing_desert

		# 4 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 3 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		create_life_seeded_planet = yes
	}

	if = {
		limit = {
			is_planet_class = pc_continental
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_prosperous_mesa
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_rugged_woods
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_rugged_woods

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tropical
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_green_hills
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_ocean
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_underwater_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_green_hills

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_teeming_reef
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_arctic
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_lichen_fields

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tundra
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_alpine
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_desert
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_nutritious_mudland
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_nutritious_mudland

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_marvelous_oasis
			}
		}
		set_planet_flag = tasty_desert
	}

	if = {
		limit = {
			is_planet_class = pc_arid
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_savannah
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_relic
			owner = {
				OR = {
					has_origin = origin_remnants
					has_origin = origin_slavers
					has_origin = origin_reliquary
				}
			}
		}

		set_planet_size = 22

		# 6 blockers
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains
			add_deposit = d_black_soil
		}
	}

	# Ocean Paradise Origin

	if = {
		limit = {
			owner = {
				OR  = {
					has_origin = origin_ocean_paradise
					has_origin = origin_ocean_machines
				}
			}
		}
		create_ocean_paradise_planet = yes
	}
}

generate_start_buildings_and_districts = {
	optimize_memory
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_shattered_ring
					has_origin = origin_broken_shackles
				}
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			if = {
				limit = {
					owner = {
						OR = {
							last_created_species = { is_lithoid = yes }
							last_created_species = { has_trait = trait_machine_unit }
						}
					}
				}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_origin = origin_tree_of_life
					is_lithoid_empire = yes
				}
			}
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}

		if = {
			limit = { owner = { is_regular_empire = yes } }

			# total - 24 jobs

			# 3 jobs
			if = {
				limit = { NOT = { owner = { has_origin = origin_payback } } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			if = {
				limit = {
					owner = {
						has_origin = origin_payback
						has_valid_civic = civic_agrarian_idyll
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = {
					owner = { is_guided_sapience_empire = yes }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = {
					owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
			}
			else = {
				limit = {
					owner = {
						is_individual_machine = no
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}

			if = {
				limit = { owner = { is_megacorp = yes } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			# 4 - 6 jobs
			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								is_lithoid_empire = yes
								is_individual_machine = yes
							}
							has_country_flag = non_lithoid_subspecies
						}
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
				if = {
					limit = {
						owner = {
							NOR = {
								has_origin = origin_payback
								is_individual_machine = yes
							}
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
							is_individual_machine = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
				if = {
					limit = {
						NOT = { owner = { has_origin = origin_payback } }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_industrial
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_megacorp = no
						NOT = { has_origin = origin_payback }
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = { owner = { is_spiritualist = no } }
				add_building = building_bureaucratic_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						NOR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_temple
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_valid_civic = civic_reanimated_armies }
						}
					}
					add_building = building_research_lab_1
				}
				else = {
					add_building = building_dread_encampment

					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						while = {
							count = 2
							random_system_planet = {
								limit = {
									has_deposit_for = shipclass_research_station
									NOT = { has_deposit = d_engineering_6 }
								}
								clear_deposits = yes
								add_deposit = d_engineering_6
							}
						}
					}
				}
			}
			# 1 job
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}
			# 2 Jobs
			if = {
				limit = {
					owner = {
						NOT = {
							has_origin = origin_payback
						}
						has_valid_civic = civic_environmentalist
					}
				}
				add_building = building_ranger_lodge
				add_blocker = { type = d_big_nature_preserve_blocker }
			}
			# 4-5 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_agrarian_idyll }
					}
				}
				if = {
					limit = {
						owner = {
							is_spiritualist = no
							is_pleasure_seeker = yes
						}
					}
					add_building = building_holo_theatres
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_spiritualist = yes
							OR = {
								has_valid_civic = civic_death_cult
								has_valid_civic = civic_death_cult_corporate
							}
						}
					}
					add_building = building_sacrificial_temple_1
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_megacorp = no
							is_spiritualist = yes
						}
					}
					add_building = building_temple
					if = {
						limit = {
							owner = {
								is_anglers_empire = yes
								is_catalytic_empire = yes
							}
						}
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_industrial
						}
					}
				}
				else_if = {
					limit = {
						owner = {
							has_valid_civic = civic_augmentation_bazaars
						}
					}
					add_building = building_augmentation_bazaars
				}
				else = {
					add_building = building_commercial_zone
				}
			}
			if = {
				limit = {
					owner = { is_individual_machine = yes }
				}
				add_building = building_machine_assembly_plant
			}
		}

		if = {
			limit = { owner = { is_hive_empire = yes } }

			# 9 jobs
			while = {
				count = 3
				add_district_and_planet_size_if_needed_effect = {
					district = district_hive
				}
			}

			# 6-9 jobs
			if = {
				limit = {
					owner = {
						NOR = {
							is_lithoid_empire = yes
							is_individual_machine = yes
						}
					}
				}

				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
							is_individual_machine = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}

			if = {
				limit = {
					owner = { has_origin = origin_tree_of_life }
				}
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 3 jobs
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}

			# 5 jobs
			add_building = building_hive_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			if = {
				limit = { #Necrophages need fewer complex drones or the menial drone slots won't be filled
					owner = {
						OR = {
							AND = {
								has_origin = origin_necrophage
								has_valid_civic = civic_hive_devouring_swarm
							}
							NOT = { has_origin = origin_necrophage }
						}
					}
				}
				# 2 jobs
				add_building = building_hive_node
			}
			if = { #This building is very useless for Devouring Swarm Necrophages
				limit = {
					NOT = {
						owner = {
							has_origin = origin_necrophage
							has_valid_civic = civic_hive_devouring_swarm
						}
					}
				}
				# 1 job
				if = {
					limit = {
						owner = { has_origin = origin_progenitor_hive }
					}
					add_building = building_offspring_nest
				}
				else = {
					add_building = building_spawning_pool
				}
			}
			if = {
				limit = {
					owner = { is_guided_sapience_empire = yes }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}

		# Replace capital building for machine empires
		if = {
			limit = { owner = { is_machine_empire = yes } }

			# total - 27 jobs

			# 3 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}

			# 6 jobs
			add_building = building_machine_capital

			# 1 job
			add_building = building_machine_assembly_plant

			# 2 job
			if = {
				limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			#Tactical Cogitators
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_tactical_algorithms
					}
				}
				owner = {
					give_technology = {
						tech = tech_centralized_command
						message = no
					}
				}
				add_building = building_military_academy
			}

			####Genesis Architects
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_guided_sapience
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = { owner = { NOT = { has_origin = origin_machine } } }

				# 4 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}

				# 2 jobs
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}

				# 8 jobs
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}

				# 2 jobs
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}

				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					remove_district = district_generator

					if = {
						limit = {
							owner = {
								has_country_flag = lithoid_subspecies
							}
						}
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
				}

				#Servitors
				if = {
					limit = { owner = { has_civic = civic_machine_servitor } }

					if = {
						limit = { owner = { has_country_flag = lithoid_subspecies } }
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}

					add_district_and_planet_size_if_needed_effect = {
						district = district_nexus
					}
					add_building = building_organic_sanctuary
				}
			}
			# Resource Consolidation
			else = {
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator_uncapped
					}
				}

				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}

				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					add_deposit = d_organic_slurry
				}

				# Blocker that removes the extra machine world replicator jobs until removed
				add_deposit = d_resource_consolidation_1
			}
		}
		# Replace a mining district with a farming district for lithoid empires with an organic secondary species that use food for alloy production
		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_country_flag = non_lithoid_subspecies
					is_catalytic_empire = yes
				}
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# Replace two mining districts with farming district for non-machine empires that use food for alloy production
		if = {
			limit = {
				owner = {
					NOT = { has_country_flag = non_lithoid_subspecies }
					NOT = { has_authority = auth_machine_intelligence }
					is_catalytic_empire = yes
				}
			}
			while = {
				count = 2
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		# And machine empires swap a generator district for another farming district
		if = {
			limit = {
				owner = {
					OR = {
						has_authority = auth_machine_intelligence
						is_individual_machine = yes
					}
					is_catalytic_empire = yes
				}
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
			remove_district = district_generator
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# Replace 1 generator district with 1 farming district for anglers civic on wet worlds
		if = {
			limit = {
				owner = { is_anglers_empire = yes }
				has_climate = wet
			}
			remove_district = district_generator
			add_district = district_farming
		}
		# Replace farming districts with uncapped ones for anglers civic on ocean worlds
		if = {
			limit = {
				owner = { is_anglers_empire = yes }
				is_planet_class = pc_ocean
			}
			while = {
				limit = { num_districts = { type = district_farming value > 0 } }
				remove_district = district_farming
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming_uncapped
				}
			}
		}
		# Replace mining districts with uncapped ones for subterranean origin
		if = {
			limit = {
				owner = { is_subterranean_empire = yes }
			}
			while = {
				limit = { num_districts = { type = district_mining value > 0 } }
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}
		}
		# Give Idyllic Bloom a Gaiaseeder to start with if they have room
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_idyllic_bloom
						has_valid_civic = civic_hive_idyllic_bloom
					}
					NOT = { has_origin = origin_life_seeded }
				}
				free_building_slots > 0
			}
			add_building = building_gaiaseeders_1
		}
		# Swaps Cybernetic Creed Buildings
		if = {
			limit = {
				owner = { has_origin = origin_cybernetic_creed }
			}
			# fix for Agrarian Idyll
			if = {
				limit = {
					owner = { has_civic = civic_agrarian_idyll }
				}
				add_district = district_farming
			}
			remove_building = building_research_lab_1
			remove_building = building_temple
			remove_building = building_temple
			remove_district = district_industrial
			remove_district = district_generator
			remove_district = district_farming
			add_building = building_amphitheater_of_the_mind
			add_building = building_forge_of_the_fellowship
			add_building = building_battlement_of_steel
			add_building = building_sanctuary_of_toil
			owner = {
				set_country_flag = suppress_vanilla_factions
				begin_event_chain = {
					event_chain = "cybernetic_creed_chain"
					target = this
				}
				country_event = {
					id = machine_age.2150
					days = 30
				}
				every_owned_leader = {
					limit = {
						is_ruler = yes
						NOT = { has_trait = leader_trait_ritualistic_implants_cyborg	}
					}
					add_trait = leader_trait_ritualistic_implants_cyborg
				}
			}
		}
		# Swaps Synthetic Fertility Buildings, Tech
		if = {
			limit = {
				owner = { has_origin = origin_synthetic_fertility }
			}
			set_planet_size = 20
			remove_building = building_research_lab_1
			add_building = building_identity_repository
			add_building = building_abandoned_gene_clinic
			while = {
				count = 2
				add_district = district_city
			}
			if = {
				limit = {
					exists = owner
					owner = {
						is_lithoid_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			while = {
				count = 2
				add_deposit = d_abandoned_cities
			}
			owner = {
				set_variable = {
					which = num_dead_identities
					value = 3
				}
				give_technology = {	tech = tech_administrative_ai message = no }
				give_technology = {	tech = tech_self_aware_logic message = no }
				give_technology = {	tech = tech_sapient_ai message = no }
			}
			while = {
				count = 4
				remove_deposit = d_hibernating_lithoids
			}
		}
		#Add Natural Design Buildings
		if = {
			limit = {
				owner = { is_natural_design_empire = yes }
			}
			if = {
				limit = {
					owner = { is_hive_empire = yes }
				}
				add_building = building_hive_transcendental_retreat
			}
			if = {
				limit = {
					owner = { is_hive_empire = no }
				}
				add_building = building_transcendental_retreat
			}
		}
	}

	if = {
		limit = {
			owner = { has_origin = origin_shattered_ring }
		}

		add_deposit = d_segment_rubble_1
		add_deposit = d_segment_rubble_2
		add_deposit = d_segment_rubble_3
		add_deposit = d_segment_rubble_4
		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_1

		if = {
			limit = {
				owner = {
					has_civic = civic_machine_servitor
				}
			}
			add_deposit = d_unsupervised_settlement
		}

		else_if = {
			limit = {
				owner = {
					has_authority = auth_hive_mind
				}
			}
			add_deposit = d_collapsed_burrows
		}

		else = {
			add_deposit = d_decrepit_dwellings
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOT = {
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
					}
				}
			}

			if = {
				limit = {
					owner = {
						last_created_species = { is_lithoid = yes }
					}
				}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		#Add Genesis Guides Deposit
		if = {
			limit = {
				owner = { is_guided_sapience_empire = yes }
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming_uncapped
			}
		}

		if = {
			limit = {
				owner = { is_regular_empire = yes }
			}

			# total - 24 jobs

			# 3 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}

			if = {
				limit = {
					owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				if = {
					limit = {
						owner = { has_origin = origin_payback }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}

			if = {
				limit = { owner = { is_megacorp = yes } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			# 4 - 6 jobs
			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								is_lithoid_empire = yes
								is_individual_machine = yes
							}
							has_country_flag = non_lithoid_subspecies
						}
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
							is_individual_machine = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
			}

			# 4 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}

			# 2 jobs
			add_building = building_factory_1

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_srw_commercial
			}

			# 2 jobs
			if = {
				limit = { owner = { is_megacorp = no } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_srw_commercial
				}
			}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = { owner = { is_spiritualist = no } }
				add_building = building_bureaucratic_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						NOT = { has_valid_civic = civic_death_cult }
					}
				}
				add_building = building_temple
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_reanimated_armies
						}
					}
					add_building = building_dread_encampment

					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						random_system_planet = {
							limit = {
								has_deposit_for = shipclass_research_station
								has_deposit = d_engineering_5
							}
							# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
							add_deposit = d_engineering_10
						}
					}
				}
				else = {
					add_building = building_research_lab_1
				}
			}

			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}
			# 4-5 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_agrarian_idyll }
					}
				}
				if = {
					limit = {
						owner = {
							is_spiritualist = no
							is_pleasure_seeker = yes
						}
					}
					add_building = building_holo_theatres
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_spiritualist = yes
							OR = {
								has_valid_civic = civic_death_cult
								has_valid_civic = civic_death_cult_corporate
							}
						}
					}
					add_building = building_sacrificial_temple_1
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_megacorp = no
							is_spiritualist = yes
						}
					}
					add_building = building_temple
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = { #Aug Bazaar building
					limit = {
						owner = {
							has_valid_civic = civic_augmentation_bazaars
						}
					}
					add_building = building_augmentation_bazaars
				}
				else = {
					add_building = building_commercial_zone
				}
			}
			if = {
				limit = {
					owner = { is_individual_machine = yes }
				}
				add_building = building_machine_assembly_plant
			}
		}

		if = {
			limit = {
				owner = { is_hive_empire = yes }
			}

			# 9 jobs
			while = {
				count = 3
				add_district_and_planet_size_if_needed_effect = {
					district = district_hive
				}
			}

			# 6-9 jobs
			if = {
				limit = {
					owner = {
						is_lithoid_empire = no
						is_individual_machine = no
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 5 jobs
			add_building = building_hive_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 2 jobs
			add_building = building_hive_node

			# 1 job
			if = {
				limit = {
					owner = { has_origin = origin_progenitor_hive }
				}
				add_building = building_offspring_nest
			}
			else = {
				add_building = building_spawning_pool
			}

			# 1 job
			add_building = building_hive_warren
		}

		# Replace capital building for machine empires
		if = {
			limit = { owner = { is_machine_empire = yes } }

			# total - 27 jobs

			# 3 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 6 jobs
			add_building = building_machine_capital

			# 1 job
			add_building = building_machine_assembly_plant

			# 2 job
			if = {
				limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 8 jobs
			while = {
				count = 4
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}

			#Assimilators
			if = {
				limit = { owner = { has_civic = civic_machine_assimilator } }
				remove_district = district_generator_uncapped
				if = {
					limit = { owner = { has_country_flag = lithoid_subspecies } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}

			#Servitors
			if = {
				limit = { owner = { has_civic = civic_machine_servitor } }
				if = {
					limit = { owner = { has_country_flag = lithoid_subspecies } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
				add_building = building_organic_sanctuary
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}
		while = {
			count = 6
			add_district_and_planet_size_if_needed_effect = {
				district = district_crashed_slaver_ship
			}
		}
		add_building = building_low_tech_farm
		add_building = building_low_tech_scrap_refinery
		add_building = building_low_tech_admin_hub
		add_building = building_low_tech_power_plant
		add_building = building_low_tech_capital
		add_building = building_low_tech_research_lab
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_payback
			}
		}
		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		add_planet_devastation = 33
		add_modifier = {
			modifier = payback_debris_field
		}
		add_modifier = {
			modifier = payback_unified_purpose
			days = 7200
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		add_building = building_clinic
		add_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		add_building = building_energy_grid
	}

	if = {
		limit = {
			owner = {
				is_relentless_industrialist_empire = yes
			}
			free_building_slots > 0
		}
		add_building = building_coordinated_fulfillment_center_1
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_remnants
				has_ancrel = yes
			}
		}
		owner = {
			give_technology = {
				tech = tech_archaeostudies
				message = no
			}
		}
		remove_building = building_research_lab_1
		add_building = building_archaeostudies_faculty
	}

	# Additional resources based on empire type and possible subspecies
	owner = {
		give_starting_resources_effect = yes
	}
}


# Special for Earth
generate_earth_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes
	add_deposit = d_mesopotamian_urban_corridor
	add_deposit = d_boswash_metropolitan_axis
	add_deposit = d_mauritanian_security_zone
	add_deposit = d_great_albertan_crater
	add_deposit = d_scandinavian_reclamation_sector
	add_deposit = d_saharan_irrigation_project
	add_deposit = d_pearl_river_agglomerate
	add_deposit = d_great_pacific_garbage_patch
	add_deposit = d_failing_infrastructure_earth
	if = {
		limit = {
			owner = { is_machine_empire = yes }
		}
		add_deposit = d_rushing_waterfalls
	}

	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		add_deposit = d_hot_springs
		add_deposit = d_strip_mine
		add_deposit = d_unsupervised_settlement
	}
	else = {
		add_deposit = d_decrepit_dwellings
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		set_planet_size = 30

		add_deposit = d_dust_caverns
		add_deposit = d_bubbling_swamp
		add_deposit = d_crystalline_caverns
	}

	if = {
		limit = {
			is_planet_class = pc_desert # Just in case players cause trouble
		}
		set_planet_flag = tasty_desert
	}
}

hive_and_machine_world_setup = {
	optimize_memory
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_hive
					has_origin = origin_machine
				}
			}
		}
		owner = {
			capital_scope = {
				set_planet_size = 30
			}
		}
	}
}

create_marauder_armies = {
	create_leader = {
		class = commander
		species = owner_main_species
		name = random
		skill = 10
		traits = {
			trait = random_trait
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:raider_khanate
			while = {
				count = 20
				create_army_transport = {
					ship_name = "NAME_Pirate_Transport"
					graphical_culture = "mammalian_01"
					army_type = "marauders"
					species = event_target:raider_khanate
				}
			}
			set_location = {
				target = event_target:marauder_rally_point
				distance = 20
				angle = random
			}
		}
	}
	last_created_army = { assign_leader = last_created_leader }
}

add_awakened_fallen_empire_resources = {
	# Changing country type resets resources, so give them full stores
	add_resource = { minerals = 100000 }
	add_resource = { energy = 100000 }
	add_resource = { food = 100000 }
	add_resource = { influence = 1000 }
	add_resource = { alloys = 100000 }
	add_resource = { consumer_goods = 100000 }
	add_resource = { exotic_gases = 10000 }
	add_resource = { volatile_motes = 10000 }
	add_resource = { rare_crystals = 10000 }
	add_resource = { sr_dark_matter = 10000 }
	add_resource = { nanites = 5000 }
	add_resource = { unity = 500000 }
	add_resource = { minor_artifacts = 500 }

	if = {
		limit = { is_fallen_empire_spiritualist = yes }
		add_resource = { sr_zro = 10000 }
	}
}

create_ai_armies = {
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "machine_assault_3"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
	create_fleet = {
		effect = {
			set_owner = event_target:AI_crisis
			while = {
				count = 20
				create_army_transport = {
					graphical_culture = "ai_01"
					army_type = "machine_assault_3"
				}
			}
			set_location = {
				target = root
				distance = 45
				angle = random
			}
		}
	}
}

void_dweller_home_planet_setup = {
	optimize_memory
	set_planet_flag = habitat_level_2
	owner = {
		save_event_target_as = void_dweller_owner
	}
	solar_system = {
		random_system_planet = {
			limit = { has_planet_flag = habitat_1_planet }
			save_event_target_as = habitat_1_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_1_planet
			coords_from = event_target:habitat_1_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_2_planet }
			save_event_target_as = habitat_2_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_2_planet
			coords_from = event_target:habitat_2_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_3_planet }
			save_event_target_as = habitat_3_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_3_planet
			coords_from = event_target:habitat_3_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		if = {
			limit = {
				event_target:void_dweller_owner = {
					is_lithoid_empire = yes
				}
			}
			random_system_planet = {
				limit = {
					has_deposit = no
				}
				add_deposit = d_minerals_4
				set_planet_flag = mining_planet
			}
		}
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}
		# Change starting pre-scripted ideal into inhabitable worlds
		# First pre-sripted is a research system
		closest_system = {
			limit = { has_star_flag = neighbor_t1_first_colony }
			set_star_flag = ideal_habitat_t1
			max_steps = 3
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				change_pc = pc_frozen
				set_deposit = d_engineering_3
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						is_colonizable = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_physics_1 }
						5 = { set_deposit = d_society_1 }
						5 = { set_deposit = d_engineering_1 }
						1 = { set_deposit = d_physics_2 }
						1 = { set_deposit = d_society_2 }
						1 = { set_deposit = d_engineering_2 }
					}
				}
			}
		}
		# Second pre-sripted is a resource system
		closest_system = {
			limit = { has_star_flag = neighbor_t2_second_colony }
			set_star_flag = ideal_habitat_t2
			max_steps = 6
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				remove_planet_flag = prescripted_ideal
				change_pc = pc_molten
				set_deposit = d_alloys_3
				add_deposit = d_minerals_4
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_minerals_1 }
						5 = { set_deposit = d_energy_1 }
						1 = { set_deposit = d_minerals_2 }
						1 = { set_deposit = d_energy_2 }
					}
				}
			}
		}
	}
	event_target:habitat_1_planet = {
		set_planet_flag = habitat@PREV
	}
	owner = {
		give_starting_resources_effect = yes
		give_technology = {
			tech = tech_habitat_1
			message = no
		}
		add_research_option = tech_habitat_2

		if = {
			limit = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					is_catalytic_empire = yes
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
			root.solar_system.starbase = {
				remove_starbase_building = {
					slot = 1
				}
				set_starbase_building = {
					slot = 1
					building = hydroponics_bay
				}
			}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}

		}
		if = {
			limit = {
				has_valid_civic = civic_private_healthcare_corporate
			}
			give_technology = { message = no tech = tech_frontier_health }
			add_research_option = tech_subdermal_stimulation
		}
	}

	if = {
		limit = {
			owner = {
				NOR = {
					is_eager_explorer_empire = yes
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		while = {
			count = 28
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 18
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else = {
		generate_servitor_assmiliator_secondary_pops = yes
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		while = {
			count = 5
			create_pop = {
				species = owner_main_species
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	set_planet_entity = {
		entity = "habitat_phase_03_entity"
		graphical_culture = owner
	}
	set_planet_size = 6
	add_deposit = d_arcane_replicator
	while = {
		count = 2
		add_district = {
			district_type = district_hab_housing
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_industrial
		ignore_cap = yes
	}
	while = {
		count = 2
		add_district = {
			district_type = district_hab_mining
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_energy
		ignore_cap = yes
	}
	add_building = building_hab_major_capital
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = no
			}
		}
		add_district = {
			district_type = district_hab_science
			ignore_cap = yes
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					OR = {
						is_catalytic_empire = yes
						has_country_flag = non_lithoid_subspecies
					}
				}
			}
		}
		add_building = building_hydroponics_farm
	}
	if = {
		limit = {
			owner = {
				is_gestalt = no
			}
		}
		# Unity Building - Admin/Sacrificial Temple/Temple
		if = {
			limit = {
				owner = {
					is_spiritualist = no
				}
			}
			add_building = building_bureaucratic_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					NOR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_temple
		}

		# Amenity Building - Holo-Theatres/Clinc/Sacrificial Temple/Temple/Commercial Zone
		if = {
			limit = {
				owner = {
					is_spiritualist = no
					is_pleasure_seeker = yes
				}
			}
			add_building = building_holo_theatres
		}
		#Aug Bazaar
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_augmentation_bazaars
				}
				free_building_slots > 0
			}
			add_building = building_augmentation_bazaars
		}
		# Pharma State
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_private_healthcare_corporate
				}
			}
			add_building = building_clinic
		}
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		else_if = {
			limit = {
				owner = {
					is_megacorp = no
					is_spiritualist = yes
				}
			}
			add_building = building_temple
		}
		else = {
			add_building = building_commercial_zone
		}

		# Permanent Employment
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_permanent_employment
				}
				free_building_slots > 0
			}
			add_building = building_posthumous_employment_center
		}

		# Relentless Industrialists
		if = {
			limit = {
				owner = {
					is_relentless_industrialist_empire = yes
				}
				free_building_slots > 0
			}
			add_building = building_coordinated_fulfillment_center_1
		}
		if = {
			limit = {
				owner = { is_individual_machine = yes }
			}
		add_building = building_machine_assembly_plant
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		add_building = building_hive_node
		add_building = building_spawning_pool
	}
	else = {
		add_building = building_machine_assembly_plant
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
				}
			}
			add_building = building_organic_sanctuary
		}
		else = {
			add_building = building_uplink_node
		}
	}
}

recalculate_brothel_bonus = {
	remove_modifier = brothel_growth_commercial_pact
	remove_modifier = brothel_growth_commercial_pact_empire
	If = {
		limit = {
			is_country_type = default
			any_relation = { has_commercial_pact = prev has_federation = no }
			has_civic = civic_mega_brothel
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact
			days = -1
			multiplier = value:brothel_bonus
		}
	}
	If = {
		limit = {
			any_relation = {
    			is_country_type = default
    			has_commercial_pact = from
    			has_civic = civic_mega_brothel
				has_federation = no
		}
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact_empire
			days = -1
		}
	}
	If = {
		limit = {
			is_country_type = default
			any_relation = { has_commercial_pact = prev has_federation = yes }
			has_civic = civic_mega_brothel
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact
			days = -1
			multiplier = value:brothel_bonus
		}
	}
	If = {
		limit = {
			any_relation = {
    			is_country_type = default
    			has_commercial_pact = from
    			has_civic = civic_mega_brothel
				has_federation = yes
			}
		}
		add_modifier = {
			modifier = brothel_growth_commercial_pact_empire
			days = -1
		}
	}
}
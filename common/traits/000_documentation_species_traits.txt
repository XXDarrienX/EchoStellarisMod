# Hopefully someday we will write a full file here.

# For now, note about "cost":
# You can (in both species and leader traits) specify something like
	# cost = {
	# 	base = 1
	# 	modifier = {
	# 		add = 2
	# 		has_country_flag = something #(no way of accessing species scope, it proved highly impractical)
	# 	}
	# }
# If you do this, the "base" will be used in cases where there is no country scope (e.g. customising a species in empire setup, and various
# randomisation functions used mainly during galaxy generation. And a few more places). So you should always set that to a sensible number.

# Some parameters for species traits
#
# category = <category type>: Sets the category the trait is a part of. Current categories { normal(default), cyborg, robotic, psionic, advanced_genetic, overtuned, malleable, mutation }
#
# hidden = yes/no (default = no)
# Hides the trait in the Template Modification window
#
# assembly_score: evaluated when the game decides to build a species. Default is 0, anything positive adds some extra weight to
# a species with that trait. (Has species and planet scope). A value of 0 does not stop it being picked, it just means this factor won't make
# a difference. If you make it strongly negative, it will not pick this species. You probably only want to be in the range from -2 to 2 or so.
#
# allowed_archetypes = {}
# Determines if the trait is valid for the given archetypes.
# Accepts BIOLOGICAL, LITHOID, ROBOT, and MACHINE by default.
#
# archetype_override = {}
# trigger that allows you to ignore allowed_archetypes (for example if you've researched a tech )
# scope is the species, from is the country for which the species is being modified
# if it returns true, then the trait is valid, even if it's for a species with a different archetype
# if empty or returning false, then the allowed_archetypes limitations are respected normally.
#
# allowed_planet_classes = {}
# Lists the planet classes for the homeworld of the species (i.e. species habitability) for which this trait is allowed
#
# allowed_planet_classes_override = {}
# trigger that allows you to ignore allowed_planet_classes
# scope is the species, from is the country for which the species is being modified
# if it returns true, then the trait is valid, even if it's for a species with a homeworld
# of a planet class not included in allowed_planet_classes
# if empty or returning false, then the allowed_planet_classes limitations are respected normally.
#
# species_class = {}
# Determines if the trait is valid for the given species class.
# Requires the species class is a member of an allowed archetype.
#
# species_class_override = {}
# trigger that allows you to ignore species_classes (for example if you've researched a tech )
# scope is the species, from is the country for which the species is being modified
# if it returns true, then the trait is valid, even if it's for a species with a different species class
# if empty or returning false, then the species_class limitations are respected normally.
#
# portrait_override = { portrait1 portrait2 ... }
# list of portrait for which the trait is always valid, regardless of archetype or species class
# this allows exception, for example, egg laying, flat tailed, funny lookin, fast swimming, warm blooded duck billed web footed burrow digging p p p p p p platypus
#
# opposites = {}
# Opposite traits are mutually exclusive.
# IMPORTANT: if you add a new positive trait, please add it to the opposites = {} block of trait_invasive!
#
# species_potential_add = {}
# Show the trait to add to species when genemodding or randomizing traits.
# Scopes are this = species, from = country performing the modification.
# default = always=yes

# species_possible_add = {}
# Governs if the trait can be added when creating a template with genemodding.
# Scopes are this = species, from = country performing the modification.
# default = always=yes

# species_possible_merge_add = {}
# Governs if the trait can be added when applying a template to an existing species with genemodding.
# Scopes are this = species, from = country performing the modification.
# default = always=yes

# species_possible_remove = {}
# Allow to remove the trait when genemodding.
# Scopes are this = species, from = country performing the modification.
# default = always=yes

# species_possible_merge_remove = {}
# Governs if the trait can be removed when applying a template to an existing species with genemodding.
# Scopes are this = species, from = country performing the modification.
# default = always=yes

# triggered_planet_growth_habitability_modifier = {}
# Applies growth and habitability modifiers (logistic_growth_mult, pop_environment_tolerance etc.) to pop groups of the species.
# Won't show in trait tooltips, use custom_tooltip/custom_tooltip_with_modifiers.
# scope is planet, from is species, fromfrom is country

# triggered_species_modifier = {}
# Applied to pops if the trigger is true.
# Will show in trait tooltips if active. Tooltips will always use the player country as the country scope.
# scope is species, from is country

# triggered_pop_group_modifier = {}
# Applied to pop groups if the trigger is true.
# Won't show in trait tooltips, use custom_tooltip/custom_tooltip_with_modifiers.
# scope is pop group

# triggered_planet_pop_group_modifier_for_all = {} See documentation in buildings file. Won't show in trait tooltips, use custom_tooltip/custom_tooltip_with_modifier
# triggered_planet_pop_group_modifier_for_species = {} See documentation in buildings file. Won't show in trait tooltips, use custom_tooltip/custom_tooltip_with_modifier

# triggered_desc = {			Show key if trigger/exclusive_trigger is true.
# 	trigger = { }				Trigger prepends additional localization key to existing text.
#	exclusive_trigger = { }		Exclusive trigger replaces all other text in tooltip with localization key.
#	text = KEY
# }
# For both trigger and exclusive_trigger: THIS = trait, from = pop (if applicable, otherwise use NOT = { exists = from } as an extra condition)
# Won't show in auto-generated trait tooltips, use custom_tooltip/custom_tooltip_with_modifiers.

# localized_tags = { category_loc_key_1 category_loc_key_2 ... } # Appends a list of corresponding categories to the trait tooltip
